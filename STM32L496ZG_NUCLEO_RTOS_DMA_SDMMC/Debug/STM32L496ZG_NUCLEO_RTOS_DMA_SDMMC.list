
STM32L496ZG_NUCLEO_RTOS_DMA_SDMMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019e28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  08019fd8  08019fd8  00029fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801accc  0801accc  000301a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801accc  0801accc  0002accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801acd4  0801acd4  000301a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801acd4  0801acd4  0002acd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801acd8  0801acd8  0002acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0801acdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ce84  200001a8  0801ae84  000301a8  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  2003d02c  0801ae84  0003d02c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a65  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091c5  00000000  00000000  00068c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f10  00000000  00000000  00071e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa0  00000000  00000000  00074d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000394af  00000000  00000000  000777b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fd88  00000000  00000000  000b0c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122967  00000000  00000000  000f09ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00213356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c458  00000000  00000000  002133a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019fc0 	.word	0x08019fc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ac 	.word	0x200001ac
 80001ec:	08019fc0 	.word	0x08019fc0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ae:	2003      	movs	r0, #3
 80005b0:	f000 f921 	bl	80007f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b4:	2000      	movs	r0, #0
 80005b6:	f015 fcd3 	bl	8015f60 <HAL_InitTick>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d002      	beq.n	80005c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	e001      	b.n	80005ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c6:	f015 fca3 	bl	8015f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x1c>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_IncTick+0x20>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x1c>)
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200001c4 	.word	0x200001c4
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <HAL_GetTick+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200001c4 	.word	0x200001c4

08000610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000618:	f7ff ffee 	bl	80005f8 <HAL_GetTick>
 800061c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d004      	beq.n	8000634 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_Delay+0x40>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000634:	bf00      	nop
 8000636:	f7ff ffdf 	bl	80005f8 <HAL_GetTick>
 800063a:	4602      	mov	r2, r0
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	429a      	cmp	r2, r3
 8000644:	d8f7      	bhi.n	8000636 <HAL_Delay+0x26>
  {
  }
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000004 	.word	0x20000004

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db0b      	blt.n	80006e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f003 021f 	and.w	r2, r3, #31
 80006d0:	4907      	ldr	r1, [pc, #28]	; (80006f0 <__NVIC_EnableIRQ+0x38>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	095b      	lsrs	r3, r3, #5
 80006d8:	2001      	movs	r0, #1
 80006da:	fa00 f202 	lsl.w	r2, r0, r2
 80006de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db12      	blt.n	800072c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <__NVIC_DisableIRQ+0x44>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	3320      	adds	r3, #32
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000720:	f3bf 8f4f 	dsb	sy
}
 8000724:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000726:	f3bf 8f6f 	isb	sy
}
 800072a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff28 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800081e:	f7ff ff3d 	bl	800069c <__NVIC_GetPriorityGrouping>
 8000822:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f7ff ffb1 	bl	8000790 <NVIC_EncodePriority>
 800082e:	4602      	mov	r2, r0
 8000830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff80 	bl	800073c <__NVIC_SetPriority>
}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff30 	bl	80006b8 <__NVIC_EnableIRQ>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff40 	bl	80006f4 <__NVIC_DisableIRQ>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e098      	b.n	80009c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <HAL_DMA_Init+0x150>)
 8000896:	429a      	cmp	r2, r3
 8000898:	d80f      	bhi.n	80008ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <HAL_DMA_Init+0x154>)
 80008a2:	4413      	add	r3, r2
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <HAL_DMA_Init+0x158>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	009a      	lsls	r2, r3, #2
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <HAL_DMA_Init+0x15c>)
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
 80008b8:	e00e      	b.n	80008d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b46      	ldr	r3, [pc, #280]	; (80009dc <HAL_DMA_Init+0x160>)
 80008c2:	4413      	add	r3, r2
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <HAL_DMA_Init+0x158>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	009a      	lsls	r2, r3, #2
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <HAL_DMA_Init+0x164>)
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2202      	movs	r2, #2
 80008dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80008ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80008fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a1b      	ldr	r3, [r3, #32]
 800091a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000932:	d039      	beq.n	80009a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_DMA_Init+0x15c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d11a      	bne.n	8000974 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <HAL_DMA_Init+0x168>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f003 031c 	and.w	r3, r3, #28
 800094a:	210f      	movs	r1, #15
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	4924      	ldr	r1, [pc, #144]	; (80009e4 <HAL_DMA_Init+0x168>)
 8000954:	4013      	ands	r3, r2
 8000956:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <HAL_DMA_Init+0x168>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f003 031c 	and.w	r3, r3, #28
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	491d      	ldr	r1, [pc, #116]	; (80009e4 <HAL_DMA_Init+0x168>)
 800096e:	4313      	orrs	r3, r2
 8000970:	600b      	str	r3, [r1, #0]
 8000972:	e019      	b.n	80009a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_DMA_Init+0x16c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f003 031c 	and.w	r3, r3, #28
 8000980:	210f      	movs	r1, #15
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	4917      	ldr	r1, [pc, #92]	; (80009e8 <HAL_DMA_Init+0x16c>)
 800098a:	4013      	ands	r3, r2
 800098c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_DMA_Init+0x16c>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6859      	ldr	r1, [r3, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f003 031c 	and.w	r3, r3, #28
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	4911      	ldr	r1, [pc, #68]	; (80009e8 <HAL_DMA_Init+0x16c>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40020407 	.word	0x40020407
 80009d0:	bffdfff8 	.word	0xbffdfff8
 80009d4:	cccccccd 	.word	0xcccccccd
 80009d8:	40020000 	.word	0x40020000
 80009dc:	bffdfbf8 	.word	0xbffdfbf8
 80009e0:	40020400 	.word	0x40020400
 80009e4:	400200a8 	.word	0x400200a8
 80009e8:	400204a8 	.word	0x400204a8

080009ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e072      	b.n	8000ae4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 0201 	bic.w	r2, r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <HAL_DMA_DeInit+0x104>)
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d80f      	bhi.n	8000a3a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <HAL_DMA_DeInit+0x108>)
 8000a22:	4413      	add	r3, r2
 8000a24:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <HAL_DMA_DeInit+0x10c>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	009a      	lsls	r2, r3, #2
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_DMA_DeInit+0x110>)
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
 8000a38:	e00e      	b.n	8000a58 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_DMA_DeInit+0x114>)
 8000a42:	4413      	add	r3, r2
 8000a44:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <HAL_DMA_DeInit+0x10c>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	009a      	lsls	r2, r3, #2
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a2b      	ldr	r2, [pc, #172]	; (8000b04 <HAL_DMA_DeInit+0x118>)
 8000a56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	f003 021c 	and.w	r2, r3, #28
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <HAL_DMA_DeInit+0x110>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10d      	bne.n	8000a9a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_DMA_DeInit+0x11c>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f003 031c 	and.w	r3, r3, #28
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	491d      	ldr	r1, [pc, #116]	; (8000b08 <HAL_DMA_DeInit+0x11c>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	600b      	str	r3, [r1, #0]
 8000a98:	e00c      	b.n	8000ab4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_DMA_DeInit+0x120>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f003 031c 	and.w	r3, r3, #28
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4917      	ldr	r1, [pc, #92]	; (8000b0c <HAL_DMA_DeInit+0x120>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40020407 	.word	0x40020407
 8000af4:	bffdfff8 	.word	0xbffdfff8
 8000af8:	cccccccd 	.word	0xcccccccd
 8000afc:	40020000 	.word	0x40020000
 8000b00:	bffdfbf8 	.word	0xbffdfbf8
 8000b04:	40020400 	.word	0x40020400
 8000b08:	400200a8 	.word	0x400200a8
 8000b0c:	400204a8 	.word	0x400204a8

08000b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <HAL_DMA_Start_IT+0x20>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e04b      	b.n	8000bc8 <HAL_DMA_Start_IT+0xb8>
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d13a      	bne.n	8000bba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2202      	movs	r2, #2
 8000b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f96b 	bl	8000e44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d008      	beq.n	8000b88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f042 020e 	orr.w	r2, r2, #14
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e00f      	b.n	8000ba8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0204 	bic.w	r2, r2, #4
 8000b96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 020a 	orr.w	r2, r2, #10
 8000ba6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e005      	b.n	8000bc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d008      	beq.n	8000bfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2204      	movs	r2, #4
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e022      	b.n	8000c40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 020e 	bic.w	r2, r2, #14
 8000c08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f003 021c 	and.w	r2, r3, #28
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d005      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e029      	b.n	8000cc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020e 	bic.w	r2, r2, #14
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	f003 021c 	and.w	r2, r3, #28
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	4798      	blx	r3
    }
  }
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f003 031c 	and.w	r3, r3, #28
 8000cee:	2204      	movs	r2, #4
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d026      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x7a>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d021      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d107      	bne.n	8000d22 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0204 	bic.w	r2, r2, #4
 8000d20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 021c 	and.w	r2, r3, #28
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	2104      	movs	r1, #4
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d071      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000d46:	e06c      	b.n	8000e22 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	f003 031c 	and.w	r3, r3, #28
 8000d50:	2202      	movs	r2, #2
 8000d52:	409a      	lsls	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d02e      	beq.n	8000dba <HAL_DMA_IRQHandler+0xec>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d029      	beq.n	8000dba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 020a 	bic.w	r2, r2, #10
 8000d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f003 021c 	and.w	r2, r3, #28
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	2102      	movs	r1, #2
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d038      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000db8:	e033      	b.n	8000e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f003 031c 	and.w	r3, r3, #28
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d02a      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x156>
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d025      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 020e 	bic.w	r2, r2, #14
 8000de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f003 021c 	and.w	r2, r3, #28
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
}
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 021c 	and.w	r2, r3, #28
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	d108      	bne.n	8000e88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e86:	e007      	b.n	8000e98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	60da      	str	r2, [r3, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e166      	b.n	8001182 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8158 	beq.w	800117c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x38>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b12      	cmp	r3, #18
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	6939      	ldr	r1, [r7, #16]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d00b      	beq.n	8000f78 <HAL_GPIO_Init+0xd4>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6c:	2b11      	cmp	r3, #17
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80b2 	beq.w	800117c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <HAL_GPIO_Init+0x2fc>)
 800101a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101c:	4a60      	ldr	r2, [pc, #384]	; (80011a0 <HAL_GPIO_Init+0x2fc>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6613      	str	r3, [r2, #96]	; 0x60
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <HAL_GPIO_Init+0x2fc>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a5c      	ldr	r2, [pc, #368]	; (80011a4 <HAL_GPIO_Init+0x300>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105a:	d02b      	beq.n	80010b4 <HAL_GPIO_Init+0x210>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d025      	beq.n	80010b0 <HAL_GPIO_Init+0x20c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x308>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d01f      	beq.n	80010ac <HAL_GPIO_Init+0x208>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d019      	beq.n	80010a8 <HAL_GPIO_Init+0x204>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x310>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d013      	beq.n	80010a4 <HAL_GPIO_Init+0x200>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x314>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d00d      	beq.n	80010a0 <HAL_GPIO_Init+0x1fc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x318>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d007      	beq.n	800109c <HAL_GPIO_Init+0x1f8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x31c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d101      	bne.n	8001098 <HAL_GPIO_Init+0x1f4>
 8001094:	2307      	movs	r3, #7
 8001096:	e00e      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 8001098:	2308      	movs	r3, #8
 800109a:	e00c      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 800109c:	2306      	movs	r3, #6
 800109e:	e00a      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010a0:	2305      	movs	r3, #5
 80010a2:	e008      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e004      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <HAL_GPIO_Init+0x212>
 80010b4:	2300      	movs	r3, #0
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	f002 0203 	and.w	r2, r2, #3
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	4093      	lsls	r3, r2
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c6:	4937      	ldr	r1, [pc, #220]	; (80011a4 <HAL_GPIO_Init+0x300>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_Init+0x320>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_GPIO_Init+0x320>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_GPIO_Init+0x320>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_GPIO_Init+0x320>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f ae91 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	48001000 	.word	0x48001000
 80011b8:	48001400 	.word	0x48001400
 80011bc:	48001800 	.word	0x48001800
 80011c0:	48001c00 	.word	0x48001c00
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80011d6:	e0c9      	b.n	800136c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011d8:	2201      	movs	r2, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80bc 	beq.w	8001366 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80011ee:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_GPIO_DeInit+0x1c0>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001216:	d02b      	beq.n	8001270 <HAL_GPIO_DeInit+0xa8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a5c      	ldr	r2, [pc, #368]	; (800138c <HAL_GPIO_DeInit+0x1c4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d025      	beq.n	800126c <HAL_GPIO_DeInit+0xa4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_GPIO_DeInit+0x1c8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d01f      	beq.n	8001268 <HAL_GPIO_DeInit+0xa0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a5a      	ldr	r2, [pc, #360]	; (8001394 <HAL_GPIO_DeInit+0x1cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d019      	beq.n	8001264 <HAL_GPIO_DeInit+0x9c>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a59      	ldr	r2, [pc, #356]	; (8001398 <HAL_GPIO_DeInit+0x1d0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_DeInit+0x98>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_GPIO_DeInit+0x1d4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_DeInit+0x94>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_GPIO_DeInit+0x1d8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_DeInit+0x90>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <HAL_GPIO_DeInit+0x1dc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_DeInit+0x8c>
 8001250:	2307      	movs	r3, #7
 8001252:	e00e      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001254:	2308      	movs	r3, #8
 8001256:	e00c      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001258:	2306      	movs	r3, #6
 800125a:	e00a      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 800125c:	2305      	movs	r3, #5
 800125e:	e008      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001260:	2304      	movs	r3, #4
 8001262:	e006      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001264:	2303      	movs	r3, #3
 8001266:	e004      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001268:	2302      	movs	r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_DeInit+0xaa>
 8001270:	2300      	movs	r3, #0
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	d132      	bne.n	80012e8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001282:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	4947      	ldr	r1, [pc, #284]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 800128c:	4013      	ands	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	4943      	ldr	r1, [pc, #268]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 800129a:	4013      	ands	r3, r2
 800129c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4940      	ldr	r1, [pc, #256]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	493c      	ldr	r1, [pc, #240]	; (80013a8 <HAL_GPIO_DeInit+0x1e0>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_GPIO_DeInit+0x1c0>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	482b      	ldr	r0, [pc, #172]	; (8001388 <HAL_GPIO_DeInit+0x1c0>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	400a      	ands	r2, r1
 80012e2:	3302      	adds	r3, #2
 80012e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2103      	movs	r1, #3
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	08d2      	lsrs	r2, r2, #3
 800131c:	4019      	ands	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2103      	movs	r1, #3
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2103      	movs	r1, #3
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f af2f 	bne.w	80011d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40010000 	.word	0x40010000
 800138c:	48000400 	.word	0x48000400
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	48001000 	.word	0x48001000
 800139c:	48001400 	.word	0x48001400
 80013a0:	48001800 	.word	0x48001800
 80013a4:	48001c00 	.word	0x48001c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f014 feea 	bl	8016204 <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	b08f      	sub	sp, #60	; 0x3c
 8001440:	af0a      	add	r7, sp, #40	; 0x28
 8001442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e116      	b.n	800167c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f015 fbed 	bl	8016c48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f007 fb08 	bl	8008aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	687e      	ldr	r6, [r7, #4]
 800149a:	466d      	mov	r5, sp
 800149c:	f106 0410 	add.w	r4, r6, #16
 80014a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b0:	1d33      	adds	r3, r6, #4
 80014b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b4:	6838      	ldr	r0, [r7, #0]
 80014b6:	f007 f9f5 	bl	80088a4 <USB_CoreInit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0d7      	b.n	800167c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 faf6 	bl	8008ac4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e04a      	b.n	8001574 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	333d      	adds	r3, #61	; 0x3d
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	333c      	adds	r3, #60	; 0x3c
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	b298      	uxth	r0, r3
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3342      	adds	r3, #66	; 0x42
 800151a:	4602      	mov	r2, r0
 800151c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	333f      	adds	r3, #63	; 0x3f
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3344      	adds	r3, #68	; 0x44
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3348      	adds	r3, #72	; 0x48
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3350      	adds	r3, #80	; 0x50
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3301      	adds	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3af      	bcc.n	80014de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e044      	b.n	800160e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3b5      	bcc.n	8001584 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	687e      	ldr	r6, [r7, #4]
 8001620:	466d      	mov	r5, sp
 8001622:	f106 0410 	add.w	r4, r6, #16
 8001626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001632:	e885 0003 	stmia.w	r5, {r0, r1}
 8001636:	1d33      	adds	r3, r6, #4
 8001638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f007 fa6c 	bl	8008b18 <USB_DevInit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e014      	b.n	800167c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b01      	cmp	r3, #1
 8001668:	d102      	bne.n	8001670 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 ffe2 	bl	8002634 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f008 f9d2 	bl	8009a1e <USB_DevDisconnect>

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001684 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_PCD_DeInit+0x30>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  (void)HAL_PCD_Stop(hpcd);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f83b 	bl	800171a <HAL_PCD_Stop>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f015 fb35 	bl	8016d14 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_PCD_Start+0x1c>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e01c      	b.n	8001712 <HAL_PCD_Start+0x56>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f008 f978 	bl	80099ee <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f9bc 	bl	8008a80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_PCD_Stop+0x16>
 800172c:	2302      	movs	r3, #2
 800172e:	e020      	b.n	8001772 <HAL_PCD_Stop+0x58>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f007 f9b0 	bl	8008aa2 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f008 f8dc 	bl	8009904 <USB_StopDevice>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e009      	b.n	8001772 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f008 f95b 	bl	8009a1e <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b08d      	sub	sp, #52	; 0x34
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f008 f9ed 	bl	8009b74 <USB_GetMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 836b 	bne.w	8001e78 <HAL_PCD_IRQHandler+0x6fe>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 f951 	bl	8009a4e <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8361 	beq.w	8001e76 <HAL_PCD_IRQHandler+0x6fc>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f008 f948 	bl	8009a4e <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d107      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f002 0202 	and.w	r2, r2, #2
 80017d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 f936 	bl	8009a4e <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ec:	d16e      	bne.n	80018cc <HAL_PCD_IRQHandler+0x152>
    {
      epnum = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 f93c 	bl	8009a74 <USB_ReadDevAllOutEpInterrupt>
 80017fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017fe:	e062      	b.n	80018c6 <HAL_PCD_IRQHandler+0x14c>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d057      	beq.n	80018ba <HAL_PCD_IRQHandler+0x140>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f008 f961 	bl	8009adc <USB_ReadDevOutEPInterrupt>
 800181a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	461a      	mov	r2, r3
 8001834:	2301      	movs	r3, #1
 8001836:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fe20 	bl	8002480 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800184a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fe65 	bl	800251c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	461a      	mov	r2, r3
 8001860:	2308      	movs	r3, #8
 8001862:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	461a      	mov	r2, r3
 800187c:	2310      	movs	r3, #16
 800187e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_PCD_IRQHandler+0x122>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001896:	461a      	mov	r2, r3
 8001898:	2320      	movs	r3, #32
 800189a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_PCD_IRQHandler+0x140>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3301      	adds	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d199      	bne.n	8001800 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f008 f8bc 	bl	8009a4e <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018e0:	f040 8087 	bne.w	80019f2 <HAL_PCD_IRQHandler+0x278>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f008 f8dd 	bl	8009aa8 <USB_ReadDevAllInEpInterrupt>
 80018ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018f4:	e07a      	b.n	80019ec <HAL_PCD_IRQHandler+0x272>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06f      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x266>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f008 f904 	bl	8009b18 <USB_ReadDevInEPInterrupt>
 8001910:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_PCD_IRQHandler+0x1e4>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	2201      	movs	r2, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	43db      	mvns	r3, r3
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800193c:	4013      	ands	r3, r2
 800193e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194c:	461a      	mov	r2, r3
 800194e:	2301      	movs	r3, #1
 8001950:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f015 fa44 	bl	8016de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x200>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2308      	movs	r3, #8
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x21c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2310      	movs	r3, #16
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x238>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_PCD_IRQHandler+0x254>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	2302      	movs	r3, #2
 80019cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x266>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fcc8 	bl	8002370 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d181      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x17c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f008 f829 	bl	8009a4e <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a06:	d122      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x2d4>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x2be>
      {
        hpcd->LPM_State = LPM_L0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f015 fd8f 	bl	8017554 <HAL_PCDEx_LPM_Callback>
 8001a36:	e002      	b.n	8001a3e <HAL_PCD_IRQHandler+0x2c4>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f015 fa41 	bl	8016ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 fffb 	bl	8009a4e <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a62:	d112      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x310>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x300>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f015 f9fd 	bl	8016e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a88:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 ffdd 	bl	8009a4e <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a9e:	d121      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x36a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001aae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d111      	bne.n	8001ade <HAL_PCD_IRQHandler+0x364>
      {
        hpcd->LPM_State = LPM_L1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f015 fd3c 	bl	8017554 <HAL_PCDEx_LPM_Callback>
 8001adc:	e002      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x36a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f015 f9c8 	bl	8016e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 ffb0 	bl	8009a4e <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	f040 80a5 	bne.w	8001c46 <HAL_PCD_IRQHandler+0x4cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2110      	movs	r1, #16
 8001b16:	4618      	mov	r0, r3
 8001b18:	f007 f940 	bl	8008d9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	e036      	b.n	8001b90 <HAL_PCD_IRQHandler+0x416>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	0151      	lsls	r1, r2, #5
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	440a      	add	r2, r1
 8001b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b62:	461a      	mov	r2, r3
 8001b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b7a:	0151      	lsls	r1, r2, #5
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	440a      	add	r2, r1
 8001b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3c3      	bcc.n	8001b22 <HAL_PCD_IRQHandler+0x3a8>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f043 030b 	orr.w	r3, r3, #11
 8001bca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bdc:	f043 030b 	orr.w	r3, r3, #11
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	e015      	b.n	8001c10 <HAL_PCD_IRQHandler+0x496>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0a:	f043 030b 	orr.w	r3, r3, #11
 8001c0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f007 ffe3 	bl	8009bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f007 feff 	bl	8009a4e <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d124      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x52c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 ff95 	bl	8009b90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f007 f8f7 	bl	8008e5e <USB_GetDevSpeed>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681c      	ldr	r4, [r3, #0]
 8001c7c:	f001 faf0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8001c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f006 fe5c 	bl	8008948 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f015 f8d0 	bl	8016e36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f007 fecf 	bl	8009a4e <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d161      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x604>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0210 	bic.w	r2, r2, #16
 8001cc8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	0c5b      	lsrs	r3, r3, #17
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d124      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x5c6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d035      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x5f4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6a38      	ldr	r0, [r7, #32]
 8001d16:	f007 fcf8 	bl	800970a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d26:	441a      	add	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d38:	441a      	add	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	e016      	b.n	8001d6e <HAL_PCD_IRQHandler+0x5f4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0c5b      	lsrs	r3, r3, #17
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d110      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x5f4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d52:	2208      	movs	r2, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	6a38      	ldr	r0, [r7, #32]
 8001d58:	f007 fcd7 	bl	800970a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d68:	441a      	add	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0210 	orr.w	r2, r2, #16
 8001d7c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f007 fe63 	bl	8009a4e <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d10a      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x62e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f015 f841 	bl	8016e1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f002 0208 	and.w	r2, r2, #8
 8001da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f007 fe4e 	bl	8009a4e <USB_ReadInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dbc:	d10d      	bne.n	8001dda <HAL_PCD_IRQHandler+0x660>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f015 f8b5 	bl	8016f34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 fe35 	bl	8009a4e <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dee:	d10d      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x692>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f015 f88a 	bl	8016f10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f007 fe1c 	bl	8009a4e <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d10a      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x6be>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f015 f898 	bl	8016f58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fe06 	bl	8009a4e <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d115      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x6fe>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x6ea>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f015 f888 	bl	8016f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	e000      	b.n	8001e78 <HAL_PCD_IRQHandler+0x6fe>
      return;
 8001e76:	bf00      	nop
    }
  }
}
 8001e78:	3734      	adds	r7, #52	; 0x34
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}

08001e7e <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]

#endif /* defined (USB_OTG_FS) */
  __HAL_LOCK(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_PCD_DevDisconnect+0x1c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e017      	b.n	8001eca <HAL_PCD_DevDisconnect+0x4c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f007 fdb9 	bl	8009a1e <USB_DevDisconnect>
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_PCD_DevDisconnect+0x42>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_SetAddress+0x1a>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e013      	b.n	8001f14 <HAL_PCD_SetAddress+0x42>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f007 fd4c 	bl	80099a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	70fb      	strb	r3, [r7, #3]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	803b      	strh	r3, [r7, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da0f      	bge.n	8001f62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3338      	adds	r3, #56	; 0x38
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	705a      	strb	r2, [r3, #1]
 8001f60:	e00f      	b.n	8001f82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	78ba      	ldrb	r2, [r7, #2]
 8001f98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fac:	78bb      	ldrb	r3, [r7, #2]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_PCD_EP_Open+0xaa>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e00e      	b.n	8001fe4 <HAL_PCD_EP_Open+0xc8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f006 ff61 	bl	8008e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da0f      	bge.n	8002020 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	3338      	adds	r3, #56	; 0x38
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	705a      	strb	r2, [r3, #1]
 800201e:	e00f      	b.n	8002040 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_PCD_EP_Close+0x6e>
 8002056:	2302      	movs	r3, #2
 8002058:	e00e      	b.n	8002078 <HAL_PCD_EP_Close+0x8c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	f006 ff9f 	bl	8008fac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	460b      	mov	r3, r1
 800208e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2200      	movs	r2, #0
 80020c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	4618      	mov	r0, r3
 80020e0:	f007 f9c4 	bl	800946c <USB_EP0StartXfer>
 80020e4:	e005      	b.n	80020f2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6979      	ldr	r1, [r7, #20]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f006 ffe1 	bl	80090b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 020f 	and.w	r2, r3, #15
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2201      	movs	r2, #1
 800216a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	b2da      	uxtb	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6979      	ldr	r1, [r7, #20]
 8002188:	4618      	mov	r0, r3
 800218a:	f007 f96f 	bl	800946c <USB_EP0StartXfer>
 800218e:	e005      	b.n	800219c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6979      	ldr	r1, [r7, #20]
 8002196:	4618      	mov	r0, r3
 8002198:	f006 ff8c 	bl	80090b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d901      	bls.n	80021c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e04e      	b.n	8002262 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	705a      	strb	r2, [r3, #1]
 80021ea:	e00d      	b.n	8002208 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PCD_EP_SetStall+0x82>
 8002224:	2302      	movs	r3, #2
 8002226:	e01c      	b.n	8002262 <HAL_PCD_EP_SetStall+0xbc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f007 fa90 	bl	800975c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f007 fcd2 	bl	8009bfc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 020f 	and.w	r2, r3, #15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d901      	bls.n	8002288 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e042      	b.n	800230e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0f      	bge.n	80022b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
 80022ae:	e00f      	b.n	80022d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_PCD_EP_ClrStall+0x86>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e00e      	b.n	800230e <HAL_PCD_EP_ClrStall+0xa4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	f007 fa9a 	bl	8009838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_PCD_EP_Flush+0x1a>
 800232c:	2302      	movs	r3, #2
 800232e:	e01b      	b.n	8002368 <HAL_PCD_EP_Flush+0x52>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da09      	bge.n	8002354 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f006 fd25 	bl	8008d9c <USB_FlushTxFifo>
 8002352:	e004      	b.n	800235e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f006 fd45 	bl	8008de8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	3338      	adds	r3, #56	; 0x38
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d901      	bls.n	80023a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e067      	b.n	8002478 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d902      	bls.n	80023c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3303      	adds	r3, #3
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023cc:	e026      	b.n	800241c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d902      	bls.n	80023ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3303      	adds	r3, #3
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f007 f952 	bl	80096a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	441a      	add	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	b29b      	uxth	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	429a      	cmp	r2, r3
 8002430:	d809      	bhi.n	8002446 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800243a:	429a      	cmp	r2, r3
 800243c:	d203      	bcs.n	8002446 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1c3      	bne.n	80023ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	429a      	cmp	r2, r3
 8002450:	d811      	bhi.n	8002476 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	43db      	mvns	r3, r3
 800246c:	6939      	ldr	r1, [r7, #16]
 800246e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002472:	4013      	ands	r3, r2
 8002474:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	333c      	adds	r3, #60	; 0x3c
 8002498:	3304      	adds	r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <PCD_EP_OutXfrComplete_int+0x98>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d124      	bne.n	8002500 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d2:	6093      	str	r3, [r2, #8]
 80024d4:	e01a      	b.n	800250c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	461a      	mov	r2, r3
 80024ee:	2320      	movs	r3, #32
 80024f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f014 fc59 	bl	8016db0 <HAL_PCD_DataOutStageCallback>
 80024fe:	e005      	b.n	800250c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f014 fc52 	bl	8016db0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	4f54310a 	.word	0x4f54310a

0800251c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	3304      	adds	r3, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60bb      	str	r3, [r7, #8]


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <PCD_EP_OutSetupPacket_int+0x64>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10e      	bne.n	8002570 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f014 fc0b 	bl	8016d8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	4f54310a 	.word	0x4f54310a

08002584 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
 8002590:	4613      	mov	r3, r2
 8002592:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025a2:	883b      	ldrh	r3, [r7, #0]
 80025a4:	0419      	lsls	r1, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
 80025b0:	e028      	b.n	8002604 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e00d      	b.n	80025e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	3340      	adds	r3, #64	; 0x40
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	3301      	adds	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d3ec      	bcc.n	80025c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025ec:	883b      	ldrh	r3, [r7, #0]
 80025ee:	0418      	lsls	r0, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	4302      	orrs	r2, r0
 80025fc:	3340      	adds	r3, #64	; 0x40
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	f043 0303 	orr.w	r3, r3, #3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_PWREx_GetVoltageRange+0x18>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000

08002698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a6:	d130      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d038      	beq.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2232      	movs	r2, #50	; 0x32
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026dc:	e002      	b.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d102      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f2      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002704:	d110      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e00f      	b.n	800272a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d007      	beq.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002726:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000
 800273c:	200000c0 	.word	0x200000c0
 8002740:	431bde83 	.word	0x431bde83

08002744 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6053      	str	r3, [r2, #4]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_PWREx_DisableVddUSB+0x1c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_PWREx_DisableVddUSB+0x1c>)
 800276e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002772:	6053      	str	r3, [r2, #4]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000

08002784 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6053      	str	r3, [r2, #4]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40007000 	.word	0x40007000

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e3e0      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b6:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c0:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80e1 	beq.w	800299a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_OscConfig+0x4a>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	f040 8088 	bne.w	80028f6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 8084 	bne.w	80028f6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ee:	4b87      	ldr	r3, [pc, #540]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e3b8      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_RCC_OscConfig+0x7c>
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281e:	e005      	b.n	800282c <HAL_RCC_OscConfig+0x88>
 8002820:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282c:	4293      	cmp	r3, r2
 800282e:	d223      	bcs.n	8002878 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd7d 	bl	8003334 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e399      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002844:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b6e      	ldr	r3, [pc, #440]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	496b      	ldr	r1, [pc, #428]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4966      	ldr	r1, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e022      	b.n	80028be <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	495e      	ldr	r1, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	4959      	ldr	r1, [pc, #356]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fd40 	bl	8003334 <RCC_SetFlashLatencyFromMSIRange>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e35c      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028be:	f000 fc43 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a4e      	ldr	r2, [pc, #312]	; (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f013 fb3c 	bl	8015f60 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d052      	beq.n	8002998 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	e340      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028fe:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290a:	f7fd fe75 	bl	80005f8 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002912:	f7fd fe71 	bl	80005f8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e329      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4930      	ldr	r1, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	492b      	ldr	r1, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e01a      	b.n	800299a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002970:	f7fd fe42 	bl	80005f8 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7fd fe3e 	bl	80005f8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e2f6      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1d4>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x214>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d10e      	bne.n	80029d0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d063      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2e8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d15f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e2d3      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x244>
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e025      	b.n	8002a34 <HAL_RCC_OscConfig+0x290>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d114      	bne.n	8002a1c <HAL_RCC_OscConfig+0x278>
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x268>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x290>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	0801ac18 	.word	0x0801ac18
 8002a14:	200000c0 	.word	0x200000c0
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a9f      	ldr	r2, [pc, #636]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a9c      	ldr	r2, [pc, #624]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fd fddc 	bl	80005f8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x2b2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fd fdd8 	bl	80005f8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x2b2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e290      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2a0>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fd fdc8 	bl	80005f8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2da>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fd fdc4 	bl	80005f8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2da>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e27c      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d060      	beq.n	8002b5c <HAL_RCC_OscConfig+0x3b8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x308>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_OscConfig+0x336>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d116      	bne.n	8002ada <HAL_RCC_OscConfig+0x336>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x320>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e259      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4973      	ldr	r1, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e040      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d023      	beq.n	8002b2a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fd fd83 	bl	80005f8 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x364>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fd fd7f 	bl	80005f8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e237      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x352>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	495f      	ldr	r1, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fd fd5f 	bl	80005f8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fd fd5b 	bl	80005f8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e213      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01c      	beq.n	8002baa <HAL_RCC_OscConfig+0x406>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fd fd3a 	bl	80005f8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x3f6>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fd fd36 	bl	80005f8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1ee      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3e4>
 8002ba8:	e01b      	b.n	8002be2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fd fd1d 	bl	80005f8 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fd fd19 	bl	80005f8 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1d1      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ef      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a6 	beq.w	8002d3c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x500>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_OscConfig+0x500>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x500>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7fd fce0 	bl	80005f8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fd fcdc 	bl	80005f8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e194      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x500>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x498>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4d0>
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c72:	e029      	b.n	8002cc8 <HAL_RCC_OscConfig+0x524>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x504>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x4fc>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x524>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	4b94      	ldr	r3, [pc, #592]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a93      	ldr	r2, [pc, #588]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	4b90      	ldr	r3, [pc, #576]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a8f      	ldr	r2, [pc, #572]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCC_OscConfig+0x55a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fd fc92 	bl	80005f8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x54a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fd fc8e 	bl	80005f8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x54a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e144      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ed      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x534>
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fd fc7b 	bl	80005f8 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fd fc77 	bl	80005f8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e12d      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4b77      	ldr	r3, [pc, #476]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ed      	bne.n	8002d06 <HAL_RCC_OscConfig+0x562>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a71      	ldr	r2, [pc, #452]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fd fc4a 	bl	80005f8 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d68:	f7fd fc46 	bl	80005f8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0fe      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5c4>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d90:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fd fc2d 	bl	80005f8 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da2:	f7fd fc29 	bl	80005f8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0e1      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db4:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ef      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80d5 	beq.w	8002f76 <HAL_RCC_OscConfig+0x7d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	f000 808d 	beq.w	8002eee <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d15a      	bne.n	8002e92 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a46      	ldr	r2, [pc, #280]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fd fc06 	bl	80005f8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fd fc02 	bl	80005f8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0ba      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x75c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e28:	0212      	lsls	r2, r2, #8
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e30:	0852      	lsrs	r2, r2, #1
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0552      	lsls	r2, r2, #21
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e3c:	0852      	lsrs	r2, r2, #1
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	0652      	lsls	r2, r2, #25
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e48:	06d2      	lsls	r2, r2, #27
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	492b      	ldr	r1, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e52:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fbc5 	bl	80005f8 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fd fbc1 	bl	80005f8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e079      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x6ce>
 8002e90:	e071      	b.n	8002f76 <HAL_RCC_OscConfig+0x7d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002eb0:	f023 0303 	bic.w	r3, r3, #3
 8002eb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002ebc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fd fb97 	bl	80005f8 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fd fb93 	bl	80005f8 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e04b      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x758>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x72a>
 8002eec:	e043      	b.n	8002f76 <HAL_RCC_OscConfig+0x7d2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x760>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e03e      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	019d808c 	.word	0x019d808c
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCC_OscConfig+0x7dc>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d12c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d123      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7ce>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d113      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7ce>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x7d2>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0c8      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b66      	ldr	r3, [pc, #408]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 0207 	bic.w	r2, r3, #7
 8002fae:	4961      	ldr	r1, [pc, #388]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b0      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d04c      	beq.n	800306e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d121      	bne.n	800302c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e09e      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e092      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300c:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e086      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301c:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e07e      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800302c:	4b42      	ldr	r3, [pc, #264]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 0203 	bic.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	493f      	ldr	r1, [pc, #252]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303e:	f7fd fadb 	bl	80005f8 <HAL_GetTick>
 8003042:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e00a      	b.n	800305c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fd fad7 	bl	80005f8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e066      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 020c 	and.w	r2, r3, #12
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	429a      	cmp	r2, r3
 800306c:	d1eb      	bne.n	8003046 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	492c      	ldr	r1, [pc, #176]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d210      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	4924      	ldr	r1, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b22      	ldr	r3, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1b0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e036      	b.n	800312a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4918      	ldr	r1, [pc, #96]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4910      	ldr	r1, [pc, #64]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030fa:	f000 f825 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_ClockConfig+0x1b4>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	490c      	ldr	r1, [pc, #48]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	5ccb      	ldrb	r3, [r1, r3]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f012 ff1e 	bl	8015f60 <HAL_InitTick>
 8003124:	4603      	mov	r3, r0
 8003126:	72fb      	strb	r3, [r7, #11]

  return status;
 8003128:	7afb      	ldrb	r3, [r7, #11]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	0801ac18 	.word	0x0801ac18
 8003140:	200000c0 	.word	0x200000c0
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x34>
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d121      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d11e      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	e005      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_GetSysClockFreq+0x110>)
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e004      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0x114>)
 80031ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d134      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0xa6>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0xac>
 80031ec:	e005      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_GetSysClockFreq+0x110>)
 80031f0:	617b      	str	r3, [r7, #20]
      break;
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_GetSysClockFreq+0x114>)
 80031f6:	617b      	str	r3, [r7, #20]
      break;
 80031f8:	e002      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	617b      	str	r3, [r7, #20]
      break;
 80031fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	3301      	adds	r3, #1
 800320c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	fb03 f202 	mul.w	r2, r3, r2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	0e5b      	lsrs	r3, r3, #25
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	3301      	adds	r3, #1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003240:	69bb      	ldr	r3, [r7, #24]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	0801ac30 	.word	0x0801ac30
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	200000c0 	.word	0x200000c0

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	0801ac28 	.word	0x0801ac28

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032a8:	f7ff ffda 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0adb      	lsrs	r3, r3, #11
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	0801ac28 	.word	0x0801ac28

080032d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	220f      	movs	r2, #15
 80032de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_GetClockConfig+0x5c>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0203 	and.w	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_RCC_GetClockConfig+0x5c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_GetClockConfig+0x5c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCC_GetClockConfig+0x60>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0207 	and.w	r2, r3, #7
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40022000 	.word	0x40022000

08003334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800334c:	f7ff f996 	bl	800267c <HAL_PWREx_GetVoltageRange>
 8003350:	6178      	str	r0, [r7, #20]
 8003352:	e014      	b.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800336c:	f7ff f986 	bl	800267c <HAL_PWREx_GetVoltageRange>
 8003370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d10b      	bne.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d919      	bls.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2ba0      	cmp	r3, #160	; 0xa0
 8003390:	d902      	bls.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003392:	2302      	movs	r3, #2
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e013      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003398:	2301      	movs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e010      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d902      	bls.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033a4:	2303      	movs	r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e00a      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d102      	bne.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b0:	2302      	movs	r3, #2
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e004      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d101      	bne.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 0207 	bic.w	r2, r3, #7
 80033c8:	4909      	ldr	r1, [pc, #36]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40022000 	.word	0x40022000

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033fc:	2300      	movs	r3, #0
 80033fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003400:	2300      	movs	r3, #0
 8003402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340c:	2b00      	cmp	r3, #0
 800340e:	d041      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003418:	d02a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800341a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800341e:	d824      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003424:	d008      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342a:	d81e      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003434:	d010      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003436:	e018      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003438:	4b86      	ldr	r3, [pc, #536]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a85      	ldr	r2, [pc, #532]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003444:	e015      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fadd 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003456:	e00c      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3320      	adds	r3, #32
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fbc6 	bl	8003bf0 <RCCEx_PLLSAI2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	74fb      	strb	r3, [r7, #19]
      break;
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003478:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003486:	4973      	ldr	r1, [pc, #460]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800348e:	e001      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d041      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034a8:	d02a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ae:	d824      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ba:	d81e      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d010      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034c6:	e018      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034c8:	4b62      	ldr	r3, [pc, #392]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a61      	ldr	r2, [pc, #388]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d4:	e015      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fa95 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e6:	e00c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3320      	adds	r3, #32
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fb7e 	bl	8003bf0 <RCCEx_PLLSAI2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	74fb      	strb	r3, [r7, #19]
      break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003508:	4b52      	ldr	r3, [pc, #328]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	494f      	ldr	r1, [pc, #316]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800351e:	e001      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a0 	beq.w	8003672 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003546:	2300      	movs	r3, #0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a40      	ldr	r2, [pc, #256]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003574:	f7fd f840 	bl	80005f8 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800357a:	e009      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fd f83c 	bl	80005f8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	74fb      	strb	r3, [r7, #19]
        break;
 800358e:	e005      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003590:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d15c      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01f      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d019      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c0:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	4a20      	ldr	r2, [pc, #128]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fc fffb 	bl	80005f8 <HAL_GetTick>
 8003602:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003604:	e00b      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fc fff7 	bl	80005f8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d902      	bls.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	74fb      	strb	r3, [r7, #19]
            break;
 800361c:	e006      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ec      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003660:	7c7b      	ldrb	r3, [r7, #17]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	4ba6      	ldr	r3, [pc, #664]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	4aa5      	ldr	r2, [pc, #660]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800367e:	4ba0      	ldr	r3, [pc, #640]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f023 0203 	bic.w	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	499c      	ldr	r1, [pc, #624]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a0:	4b97      	ldr	r3, [pc, #604]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 020c 	bic.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	4994      	ldr	r1, [pc, #592]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c2:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	498b      	ldr	r1, [pc, #556]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e4:	4b86      	ldr	r3, [pc, #536]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4983      	ldr	r1, [pc, #524]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003706:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	497a      	ldr	r1, [pc, #488]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003728:	4b75      	ldr	r3, [pc, #468]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	4972      	ldr	r1, [pc, #456]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800374a:	4b6d      	ldr	r3, [pc, #436]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003758:	4969      	ldr	r1, [pc, #420]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377a:	4961      	ldr	r1, [pc, #388]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378e:	4b5c      	ldr	r3, [pc, #368]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	4958      	ldr	r1, [pc, #352]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	4950      	ldr	r1, [pc, #320]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d2:	4b4b      	ldr	r3, [pc, #300]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4947      	ldr	r1, [pc, #284]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	493f      	ldr	r1, [pc, #252]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003816:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4936      	ldr	r1, [pc, #216]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003834:	d106      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4a31      	ldr	r2, [pc, #196]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800383c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003840:	60d3      	str	r3, [r2, #12]
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	2101      	movs	r1, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f8d9 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d028      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	491f      	ldr	r1, [pc, #124]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003892:	d106      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
 80038a0:	e011      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f8aa 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f0:	d108      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f2:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4a02      	ldr	r2, [pc, #8]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fc:	60d3      	str	r3, [r2, #12]
 80038fe:	e013      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003900:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f879 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d02f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	4929      	ldr	r1, [pc, #164]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003952:	d10d      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f856 	bl	8003a0c <RCCEx_PLLSAI1_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d014      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	74bb      	strb	r3, [r7, #18]
 800396e:	e011      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003978:	d10c      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3320      	adds	r3, #32
 800397e:	2102      	movs	r1, #2
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f935 	bl	8003bf0 <RCCEx_PLLSAI2_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398a:	7cfb      	ldrb	r3, [r7, #19]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b0:	490d      	ldr	r1, [pc, #52]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	4904      	ldr	r1, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b74      	ldr	r3, [pc, #464]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a26:	4b71      	ldr	r3, [pc, #452]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a3e:	4b6b      	ldr	r3, [pc, #428]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d047      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e044      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d018      	beq.n	8003a92 <RCCEx_PLLSAI1_Config+0x86>
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d825      	bhi.n	8003ab0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d002      	beq.n	8003a6e <RCCEx_PLLSAI1_Config+0x62>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d009      	beq.n	8003a80 <RCCEx_PLLSAI1_Config+0x74>
 8003a6c:	e020      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e01a      	b.n	8003ab6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a80:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e013      	b.n	8003aba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aae:	e006      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e004      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	430b      	orrs	r3, r1
 8003adc:	4943      	ldr	r1, [pc, #268]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d17c      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ae8:	4b40      	ldr	r3, [pc, #256]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a3f      	ldr	r2, [pc, #252]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fc fd80 	bl	80005f8 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afc:	f7fc fd7c 	bl	80005f8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b10:	4b36      	ldr	r3, [pc, #216]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ef      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d15f      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d110      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	06d2      	lsls	r2, r2, #27
 8003b40:	430a      	orrs	r2, r1
 8003b42:	492a      	ldr	r1, [pc, #168]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	610b      	str	r3, [r1, #16]
 8003b48:	e027      	b.n	8003b9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d112      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6912      	ldr	r2, [r2, #16]
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	0552      	lsls	r2, r2, #21
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	491f      	ldr	r1, [pc, #124]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
 8003b74:	e011      	b.n	8003b9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6892      	ldr	r2, [r2, #8]
 8003b86:	0211      	lsls	r1, r2, #8
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6952      	ldr	r2, [r2, #20]
 8003b8c:	0852      	lsrs	r2, r2, #1
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	0652      	lsls	r2, r2, #25
 8003b92:	430a      	orrs	r2, r1
 8003b94:	4915      	ldr	r1, [pc, #84]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fc fd27 	bl	80005f8 <HAL_GetTick>
 8003baa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bac:	e009      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bae:	f7fc fd23 	bl	80005f8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d902      	bls.n	8003bc2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc0:	e005      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ef      	beq.n	8003bae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4903      	ldr	r1, [pc, #12]	; (8003bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000

08003bf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bfe:	4b69      	ldr	r3, [pc, #420]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c0a:	4b66      	ldr	r3, [pc, #408]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c22:	4b60      	ldr	r3, [pc, #384]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
       ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d047      	beq.n	8003cc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	e044      	b.n	8003cc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d018      	beq.n	8003c76 <RCCEx_PLLSAI2_Config+0x86>
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d825      	bhi.n	8003c94 <RCCEx_PLLSAI2_Config+0xa4>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d002      	beq.n	8003c52 <RCCEx_PLLSAI2_Config+0x62>
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d009      	beq.n	8003c64 <RCCEx_PLLSAI2_Config+0x74>
 8003c50:	e020      	b.n	8003c94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c52:	4b54      	ldr	r3, [pc, #336]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11d      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c62:	e01a      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c64:	4b4f      	ldr	r3, [pc, #316]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d116      	bne.n	8003c9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e013      	b.n	8003c9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c76:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c82:	4b48      	ldr	r3, [pc, #288]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c92:	e006      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      break;
 8003c98:	e004      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003caa:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	4938      	ldr	r1, [pc, #224]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d166      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fc fc8e 	bl	80005f8 <HAL_GetTick>
 8003cdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cde:	e009      	b.n	8003cf4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ce0:	f7fc fc8a 	bl	80005f8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d902      	bls.n	8003cf4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cf2:	e005      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ef      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d149      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d110      	bne.n	8003d2e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	06d2      	lsls	r2, r2, #27
 8003d24:	430a      	orrs	r2, r1
 8003d26:	491f      	ldr	r1, [pc, #124]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	614b      	str	r3, [r1, #20]
 8003d2c:	e011      	b.n	8003d52 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	0211      	lsls	r1, r2, #8
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6912      	ldr	r2, [r2, #16]
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0652      	lsls	r2, r2, #25
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	4915      	ldr	r1, [pc, #84]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fc fc4b 	bl	80005f8 <HAL_GetTick>
 8003d62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d64:	e009      	b.n	8003d7a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d66:	f7fc fc47 	bl	80005f8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d902      	bls.n	8003d7a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	73fb      	strb	r3, [r7, #15]
          break;
 8003d78:	e005      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ef      	beq.n	8003d66 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06f      	beq.n	8003e9a <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f011 fd28 	bl	8015824 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	22ca      	movs	r2, #202	; 0xca
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2253      	movs	r2, #83	; 0x53
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb2f 	bl	8004450 <RTC_EnterInitMode>
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d14e      	bne.n	8003e9a <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6919      	ldr	r1, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	041a      	lsls	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb33 	bl	80044b8 <RTC_ExitInitMode>
 8003e52:	4603      	mov	r3, r0
 8003e54:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11e      	bne.n	8003e9a <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0203 	bic.w	r2, r2, #3
 8003e6a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_RTC_SetTime+0x1a>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e08b      	b.n	8003fd6 <HAL_RTC_SetTime+0x132>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	22ca      	movs	r2, #202	; 0xca
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2253      	movs	r2, #83	; 0x53
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fab6 	bl	8004450 <RTC_EnterInitMode>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d163      	bne.n	8003fb6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d126      	bne.n	8003f42 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fb11 	bl	8004534 <RTC_ByteToBcd2>
 8003f12:	4603      	mov	r3, r0
 8003f14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb0a 	bl	8004534 <RTC_ByteToBcd2>
 8003f20:	4603      	mov	r3, r0
 8003f22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	789b      	ldrb	r3, [r3, #2]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fb02 	bl	8004534 <RTC_ByteToBcd2>
 8003f30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	78db      	ldrb	r3, [r3, #3]
 8003f3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e018      	b.n	8003f74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003f7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa83 	bl	80044b8 <RTC_ExitInitMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}

08003fde <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RTC_SetDate+0x1a>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e075      	b.n	80040e4 <HAL_RTC_SetDate+0x106>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10e      	bne.n	800402c <HAL_RTC_SetDate+0x4e>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	b2db      	uxtb	r3, r3
 8004024:	330a      	adds	r3, #10
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11c      	bne.n	800406c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa7c 	bl	8004534 <RTC_ByteToBcd2>
 800403c:	4603      	mov	r3, r0
 800403e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fa75 	bl	8004534 <RTC_ByteToBcd2>
 800404a:	4603      	mov	r3, r0
 800404c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800404e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	789b      	ldrb	r3, [r3, #2]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fa6d 	bl	8004534 <RTC_ByteToBcd2>
 800405a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800405c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e00e      	b.n	800408a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	78db      	ldrb	r3, [r3, #3]
 8004070:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004078:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800407e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	22ca      	movs	r2, #202	; 0xca
 8004090:	625a      	str	r2, [r3, #36]	; 0x24
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2253      	movs	r2, #83	; 0x53
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f9d8 	bl	8004450 <RTC_EnterInitMode>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80040b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f9fc 	bl	80044b8 <RTC_ExitInitMode>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	22ff      	movs	r2, #255	; 0xff
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}

080040ec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_RTC_SetAlarm_IT+0x1a>
 8004102:	2302      	movs	r3, #2
 8004104:	e127      	b.n	8004356 <HAL_RTC_SetAlarm_IT+0x26a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d137      	bne.n	800418c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f9fd 	bl	8004534 <RTC_ByteToBcd2>
 800413a:	4603      	mov	r3, r0
 800413c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f9f6 	bl	8004534 <RTC_ByteToBcd2>
 8004148:	4603      	mov	r3, r0
 800414a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800414c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	789b      	ldrb	r3, [r3, #2]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f9ee 	bl	8004534 <RTC_ByteToBcd2>
 8004158:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800415a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004164:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f9e0 	bl	8004534 <RTC_ByteToBcd2>
 8004174:	4603      	mov	r3, r0
 8004176:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004178:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004180:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004186:	4313      	orrs	r3, r2
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e023      	b.n	80041d4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2200      	movs	r2, #0
 800419e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041ac:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	78db      	ldrb	r3, [r3, #3]
 80041b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80041ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80041c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80041ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	22ca      	movs	r2, #202	; 0xca
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2253      	movs	r2, #83	; 0x53
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f8:	d14a      	bne.n	8004290 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004208:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800421a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800421c:	f7fc f9ec 	bl	80005f8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004222:	e015      	b.n	8004250 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004224:	f7fc f9e8 	bl	80005f8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004232:	d90d      	bls.n	8004250 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	22ff      	movs	r2, #255	; 0xff
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2203      	movs	r2, #3
 8004240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e082      	b.n	8004356 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0e2      	beq.n	8004224 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	e049      	b.n	8004324 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800429e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f462 7220 	orn	r2, r2, #640	; 0x280
 80042b0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80042b2:	f7fc f9a1 	bl	80005f8 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80042b8:	e015      	b.n	80042e6 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042ba:	f7fc f99d 	bl	80005f8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c8:	d90d      	bls.n	80042e6 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e037      	b.n	8004356 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0e2      	beq.n	80042ba <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RTC_SetAlarm_IT+0x274>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_RTC_SetAlarm_IT+0x274>)
 800432a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RTC_SetAlarm_IT+0x274>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_RTC_SetAlarm_IT+0x274>)
 8004336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	bf00      	nop
 8004360:	40010400 	.word	0x40010400

08004364 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_RTC_AlarmIRQHandler+0x88>)
 800436e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004372:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80043a0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f824 	bl	80043f0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d012      	beq.n	80043dc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80043d4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8cc 	bl	8004574 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40010400 	.word	0x40010400

080043f0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800441a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800441c:	f7fc f8ec 	bl	80005f8 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004422:	e009      	b.n	8004438 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004424:	f7fc f8e8 	bl	80005f8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004432:	d901      	bls.n	8004438 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e007      	b.n	8004448 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ee      	beq.n	8004424 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d120      	bne.n	80044ac <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004474:	f7fc f8c0 	bl	80005f8 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800447a:	e00d      	b.n	8004498 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800447c:	f7fc f8bc 	bl	80005f8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448a:	d905      	bls.n	8004498 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2203      	movs	r2, #3
 8004494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <RTC_EnterInitMode+0x5c>
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d1e7      	bne.n	800447c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80044c4:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <RTC_ExitInitMode+0x78>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <RTC_ExitInitMode+0x78>)
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <RTC_ExitInitMode+0x78>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10c      	bne.n	80044f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff91 	bl	8004404 <HAL_RTC_WaitForSynchro>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2203      	movs	r2, #3
 80044ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e017      	b.n	8004526 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <RTC_ExitInitMode+0x78>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <RTC_ExitInitMode+0x78>)
 80044fc:	f023 0320 	bic.w	r3, r3, #32
 8004500:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ff7e 	bl	8004404 <HAL_RTC_WaitForSynchro>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <RTC_ExitInitMode+0x78>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	4a04      	ldr	r2, [pc, #16]	; (8004530 <RTC_ExitInitMode+0x78>)
 8004520:	f043 0320 	orr.w	r3, r3, #32
 8004524:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40002800 	.word	0x40002800

08004534 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004546:	e005      	b.n	8004554 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800454e:	7afb      	ldrb	r3, [r7, #11]
 8004550:	3b0a      	subs	r3, #10
 8004552:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	2b09      	cmp	r3, #9
 8004558:	d8f6      	bhi.n	8004548 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	b2da      	uxtb	r2, r3
 8004562:	7afb      	ldrb	r3, [r7, #11]
 8004564:	4313      	orrs	r3, r2
 8004566:	b2db      	uxtb	r3, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e022      	b.n	80045e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f011 fc0f 	bl	8015dd0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f814 	bl	80045e8 <HAL_SD_InitCard>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00a      	b.n	80045e0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	b08e      	sub	sp, #56	; 0x38
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004604:	2376      	movs	r3, #118	; 0x76
 8004606:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681d      	ldr	r5, [r3, #0]
 800460c:	466c      	mov	r4, sp
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004620:	4628      	mov	r0, r5
 8004622:	f003 fbd8 	bl	8007dd6 <SDMMC_Init>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800462c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e044      	b.n	80046c2 <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004646:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f003 fc0d 	bl	8007e6c <SDMMC_PowerState_ON>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e02e      	b.n	80046c2 <HAL_SD_InitCard+0xda>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004672:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fb5f 	bl	8005d38 <SD_PowerON>
 800467a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e013      	b.n	80046c2 <HAL_SD_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fa7e 	bl	8005b9c <SD_InitCard>
 80046a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_SD_InitCard+0xda>
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080046cc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b092      	sub	sp, #72	; 0x48
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80046da:	f7fb ff8d 	bl	80005f8 <HAL_GetTick>
 80046de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1d7      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 81ca 	bne.w	8004aa0 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	429a      	cmp	r2, r3
 800471e:	d907      	bls.n	8004730 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e1be      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2203      	movs	r2, #3
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	025b      	lsls	r3, r3, #9
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004756:	4618      	mov	r0, r3
 8004758:	f003 fc1b 	bl	8007f92 <SDMMC_CmdBlockLength>
 800475c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800475e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a8d      	ldr	r2, [pc, #564]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004772:	431a      	orrs	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e194      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004784:	f04f 33ff 	mov.w	r3, #4294967295
 8004788:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004790:	2390      	movs	r3, #144	; 0x90
 8004792:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004794:	2302      	movs	r3, #2
 8004796:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800479c:	2301      	movs	r3, #1
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f107 0214 	add.w	r2, r7, #20
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f003 fbc5 	bl	8007f3a <SDMMC_ConfigData>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d90a      	bls.n	80047cc <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2202      	movs	r2, #2
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c2:	4618      	mov	r0, r3
 80047c4:	f003 fc29 	bl	800801a <SDMMC_CmdReadMultiBlock>
 80047c8:	6478      	str	r0, [r7, #68]	; 0x44
 80047ca:	e009      	b.n	80047e0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d8:	4618      	mov	r0, r3
 80047da:	f003 fbfc 	bl	8007fd6 <SDMMC_CmdReadSingleBlock>
 80047de:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80047e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6d      	ldr	r2, [pc, #436]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e150      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004810:	e061      	b.n	80048d6 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03c      	beq.n	800489a <HAL_SD_ReadBlocks+0x1ce>
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d039      	beq.n	800489a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004826:	2300      	movs	r3, #0
 8004828:	643b      	str	r3, [r7, #64]	; 0x40
 800482a:	e033      	b.n	8004894 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f003 fafd 	bl	8007e30 <SDMMC_ReadFIFO>
 8004836:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	b2da      	uxtb	r2, r3
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	3301      	adds	r3, #1
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	3b01      	subs	r3, #1
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	b2da      	uxtb	r2, r3
 8004852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004854:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	3301      	adds	r3, #1
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	3b01      	subs	r3, #1
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	b2da      	uxtb	r2, r3
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	3301      	adds	r3, #1
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004874:	3b01      	subs	r3, #1
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	0e1b      	lsrs	r3, r3, #24
 800487c:	b2da      	uxtb	r2, r3
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	3301      	adds	r3, #1
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488a:	3b01      	subs	r3, #1
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800488e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004890:	3301      	adds	r3, #1
 8004892:	643b      	str	r3, [r7, #64]	; 0x40
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	2b07      	cmp	r3, #7
 8004898:	d9c8      	bls.n	800482c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800489a:	f7fb fead 	bl	80005f8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d902      	bls.n	80048b0 <HAL_SD_ReadBlocks+0x1e4>
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d112      	bne.n	80048d6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0eb      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d096      	beq.n	8004812 <HAL_SD_ReadBlocks+0x146>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d022      	beq.n	8004938 <HAL_SD_ReadBlocks+0x26c>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d91f      	bls.n	8004938 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d01b      	beq.n	8004938 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f003 fbef 	bl	80080e8 <SDMMC_CmdStopTransfer>
 800490a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	2b00      	cmp	r3, #0
 8004910:	d012      	beq.n	8004938 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0ba      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	f043 0208 	orr.w	r2, r3, #8
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0a0      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_SD_ReadBlocks+0x2d8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <HAL_SD_ReadBlocks+0x2d4>)
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f043 0202 	orr.w	r2, r3, #2
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e086      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
 80049a0:	004005ff 	.word	0x004005ff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d061      	beq.n	8004a76 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a40      	ldr	r2, [pc, #256]	; (8004ab8 <HAL_SD_ReadBlocks+0x3ec>)
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e06a      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 fa27 	bl	8007e30 <SDMMC_ReadFIFO>
 80049e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	3301      	adds	r3, #1
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	3b01      	subs	r3, #1
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	3301      	adds	r3, #1
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	3b01      	subs	r3, #1
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	0e1b      	lsrs	r3, r3, #24
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	3301      	adds	r3, #1
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a36:	3b01      	subs	r3, #1
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004a3a:	f7fb fddd 	bl	80005f8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d902      	bls.n	8004a50 <HAL_SD_ReadBlocks+0x384>
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_SD_ReadBlocks+0x3ec>)
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e01b      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SD_ReadBlocks+0x3be>
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1a6      	bne.n	80049d8 <HAL_SD_ReadBlocks+0x30c>
      }
    }
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e006      	b.n	8004aae <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3748      	adds	r7, #72	; 0x48
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	004005ff 	.word	0x004005ff

08004abc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b092      	sub	sp, #72	; 0x48
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004aca:	f7fb fd95 	bl	80005f8 <HAL_GetTick>
 8004ace:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e182      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	f040 8175 	bne.w	8004de6 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d907      	bls.n	8004b20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e169      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2203      	movs	r2, #3
 8004b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d002      	beq.n	8004b3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	025b      	lsls	r3, r3, #9
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b46:	4618      	mov	r0, r3
 8004b48:	f003 fa23 	bl	8007f92 <SDMMC_CmdBlockLength>
 8004b4c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00f      	beq.n	8004b74 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a8f      	ldr	r2, [pc, #572]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e13f      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	025b      	lsls	r3, r3, #9
 8004b7e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004b80:	2390      	movs	r3, #144	; 0x90
 8004b82:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f107 0218 	add.w	r2, r7, #24
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 f9cd 	bl	8007f3a <SDMMC_ConfigData>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d90a      	bls.n	8004bbc <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fa75 	bl	80080a2 <SDMMC_CmdWriteMultiBlock>
 8004bb8:	6478      	str	r0, [r7, #68]	; 0x44
 8004bba:	e009      	b.n	8004bd0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f003 fa48 	bl	800805e <SDMMC_CmdWriteSingleBlock>
 8004bce:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d012      	beq.n	8004bfc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6f      	ldr	r2, [pc, #444]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0fb      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004c00:	e065      	b.n	8004cce <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d040      	beq.n	8004c92 <HAL_SD_WriteBlocks+0x1d6>
 8004c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03d      	beq.n	8004c92 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1a:	e037      	b.n	8004c8c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c24:	3301      	adds	r3, #1
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	3b01      	subs	r3, #1
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	041a      	lsls	r2, r3, #16
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	3301      	adds	r3, #1
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	061a      	lsls	r2, r3, #24
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	3b01      	subs	r3, #1
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f107 0214 	add.w	r2, r7, #20
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f003 f8e2 	bl	8007e4a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	3301      	adds	r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	2b07      	cmp	r3, #7
 8004c90:	d9c4      	bls.n	8004c1c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004c92:	f7fb fcb1 	bl	80005f8 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d902      	bls.n	8004ca8 <HAL_SD_WriteBlocks+0x1ec>
 8004ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d112      	bne.n	8004cce <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3a      	ldr	r2, [pc, #232]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e092      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d092      	beq.n	8004c02 <HAL_SD_WriteBlocks+0x146>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d022      	beq.n	8004d30 <HAL_SD_WriteBlocks+0x274>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d91f      	bls.n	8004d30 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d01b      	beq.n	8004d30 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 f9f3 	bl	80080e8 <SDMMC_CmdStopTransfer>
 8004d02:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d012      	beq.n	8004d30 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e061      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d012      	beq.n	8004d64 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f043 0208 	orr.w	r2, r3, #8
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e047      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d014      	beq.n	8004d9c <HAL_SD_WriteBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <HAL_SD_WriteBlocks+0x2dc>)
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e02d      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
 8004d98:	004005ff 	.word	0x004005ff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <HAL_SD_WriteBlocks+0x340>)
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f043 0210 	orr.w	r2, r3, #16
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e011      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e006      	b.n	8004df4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3748      	adds	r7, #72	; 0x48
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	004005ff 	.word	0x004005ff

08004e00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0cc      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 80c5 	bne.w	8004fc0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d907      	bls.n	8004e5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0b3      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a53      	ldr	r2, [pc, #332]	; (8004fcc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a52      	ldr	r2, [pc, #328]	; (8004fd0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2200      	movs	r2, #0
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3380      	adds	r3, #128	; 0x80
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	025b      	lsls	r3, r3, #9
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	f7fb fe33 	bl	8000b10 <HAL_DMA_Start_IT>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d017      	beq.n	8004ee0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a43      	ldr	r2, [pc, #268]	; (8004fd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e070      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d002      	beq.n	8004efe <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	025b      	lsls	r3, r3, #9
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 f843 	bl	8007f92 <SDMMC_CmdBlockLength>
 8004f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	431a      	orrs	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e046      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	025b      	lsls	r3, r3, #9
 8004f3e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f40:	2390      	movs	r3, #144	; 0x90
 8004f42:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f44:	2302      	movs	r3, #2
 8004f46:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	623b      	str	r3, [r7, #32]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f107 0210 	add.w	r2, r7, #16
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 ffed 	bl	8007f3a <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d90a      	bls.n	8004f7c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2282      	movs	r2, #130	; 0x82
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 f851 	bl	800801a <SDMMC_CmdReadMultiBlock>
 8004f78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004f7a:	e009      	b.n	8004f90 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2281      	movs	r2, #129	; 0x81
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 f824 	bl	8007fd6 <SDMMC_CmdReadSingleBlock>
 8004f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d012      	beq.n	8004fbc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
        __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
        hsd->ErrorCode |= errorstate;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e002      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3730      	adds	r7, #48	; 0x30
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	080059b7 	.word	0x080059b7
 8004fd0:	08005a29 	.word	0x08005a29
 8004fd4:	004005ff 	.word	0x004005ff

08004fd8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0cf      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 80c8 	bne.w	800519e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	429a      	cmp	r2, r3
 8005020:	d907      	bls.n	8005032 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0b6      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2203      	movs	r2, #3
 8005036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 021a 	orr.w	r2, r2, #26
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	4a54      	ldr	r2, [pc, #336]	; (80051a8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	4a53      	ldr	r2, [pc, #332]	; (80051ac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	2200      	movs	r2, #0
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	2b01      	cmp	r3, #1
 8005070:	d002      	beq.n	8005078 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005080:	4618      	mov	r0, r3
 8005082:	f002 ff86 	bl	8007f92 <SDMMC_CmdBlockLength>
 8005086:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00f      	beq.n	80050ae <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a47      	ldr	r2, [pc, #284]	; (80051b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e078      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d90a      	bls.n	80050ca <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22a0      	movs	r2, #160	; 0xa0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c0:	4618      	mov	r0, r3
 80050c2:	f002 ffee 	bl	80080a2 <SDMMC_CmdWriteMultiBlock>
 80050c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80050c8:	e009      	b.n	80050de <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2290      	movs	r2, #144	; 0x90
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d6:	4618      	mov	r0, r3
 80050d8:	f002 ffc1 	bl	800805e <SDMMC_CmdWriteSingleBlock>
 80050dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d012      	beq.n	800510a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      hsd->ErrorCode |= errorstate;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e04a      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3380      	adds	r3, #128	; 0x80
 8005126:	461a      	mov	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	025b      	lsls	r3, r3, #9
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	f7fb fcef 	bl	8000b10 <HAL_DMA_Start_IT>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01a      	beq.n	800516e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 021a 	bic.w	r2, r2, #26
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e018      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	025b      	lsls	r3, r3, #9
 8005178:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800517a:	2390      	movs	r3, #144	; 0x90
 800517c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005186:	2301      	movs	r3, #1
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f107 0210 	add.w	r2, r7, #16
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f002 fed0 	bl	8007f3a <SDMMC_ConfigData>
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3730      	adds	r7, #48	; 0x30
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	0800598d 	.word	0x0800598d
 80051ac:	08005a29 	.word	0x08005a29
 80051b0:	004005ff 	.word	0x004005ff

080051b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_SD_IRQHandler+0x2e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 ffc2 	bl	8006164 <SD_Read_IT>
 80051e0:	e155      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 808f 	beq.w	8005310 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800520a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800520e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d039      	beq.n	800529e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_SD_IRQHandler+0x8a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f002 ff50 	bl	80080e8 <SDMMC_CmdStopTransfer>
 8005248:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f91f 	bl	80054a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f240 523a 	movw	r2, #1338	; 0x53a
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_SD_IRQHandler+0xda>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f00f fb44 	bl	801491c <HAL_SD_RxCpltCallback>
 8005294:	e0fb      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f00f fb36 	bl	8014908 <HAL_SD_TxCpltCallback>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800529c:	e0f7      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80f2 	beq.w	800548e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d011      	beq.n	80052d8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f002 ff15 	bl	80080e8 <SDMMC_CmdStopTransfer>
 80052be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8e4 	bl	80054a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80d5 	bne.w	800548e <HAL_SD_IRQHandler+0x2da>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 80cf 	bne.w	800548e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0208 	bic.w	r2, r2, #8
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f00f fafd 	bl	8014908 <HAL_SD_TxCpltCallback>
}
 800530e:	e0be      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_SD_IRQHandler+0x17c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 ff6c 	bl	8006206 <SD_Write_IT>
 800532e:	e0ae      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80a7 	beq.w	800548e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	f043 0202 	orr.w	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f043 0208 	orr.w	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	f043 0210 	orr.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80053c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 fe8e 	bl	80080e8 <SDMMC_CmdStopTransfer>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f855 	bl	80054a0 <HAL_SD_ErrorCallback>
}
 80053f6:	e04a      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d045      	beq.n	800548e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <HAL_SD_IRQHandler+0x262>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d011      	beq.n	800543a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <HAL_SD_IRQHandler+0x2e4>)
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	4618      	mov	r0, r3
 8005424:	f7fb fc12 	bl	8000c4c <HAL_DMA_Abort_IT>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02f      	beq.n	800548e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fb44 	bl	8005ac0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005438:	e029      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <HAL_SD_IRQHandler+0x29a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_SD_IRQHandler+0x2e8>)
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb fbf6 	bl	8000c4c <HAL_DMA_Abort_IT>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d013      	beq.n	800548e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fb5f 	bl	8005b2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005470:	e00d      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f00f fa34 	bl	80148f4 <HAL_SD_AbortCallback>
}
 800548c:	e7ff      	b.n	800548e <HAL_SD_IRQHandler+0x2da>
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	08005ac1 	.word	0x08005ac1
 800549c:	08005b2f 	.word	0x08005b2f

080054a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	0f9b      	lsrs	r3, r3, #30
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ce:	0e9b      	lsrs	r3, r3, #26
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	b2da      	uxtb	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550a:	b2da      	uxtb	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005514:	0d1b      	lsrs	r3, r3, #20
 8005516:	b29a      	uxth	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	b2da      	uxtb	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005532:	0bdb      	lsrs	r3, r3, #15
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005544:	0b9b      	lsrs	r3, r3, #14
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005556:	0b5b      	lsrs	r3, r3, #13
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005568:	0b1b      	lsrs	r3, r3, #12
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	b2da      	uxtb	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	2b00      	cmp	r3, #0
 8005582:	d163      	bne.n	800564c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005588:	009a      	lsls	r2, r3, #2
 800558a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800558e:	4013      	ands	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005594:	0f92      	lsrs	r2, r2, #30
 8005596:	431a      	orrs	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a0:	0edb      	lsrs	r3, r3, #27
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	0d5b      	lsrs	r3, r3, #21
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d6:	0c9b      	lsrs	r3, r3, #18
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e8:	0bdb      	lsrs	r3, r3, #15
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	7e1b      	ldrb	r3, [r3, #24]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	3302      	adds	r3, #2
 800560c:	2201      	movs	r2, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005616:	fb03 f202 	mul.w	r2, r3, r2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	7a1b      	ldrb	r3, [r3, #8]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005638:	0a52      	lsrs	r2, r2, #9
 800563a:	fb03 f202 	mul.w	r2, r3, r2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005648:	661a      	str	r2, [r3, #96]	; 0x60
 800564a:	e031      	b.n	80056b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	2b01      	cmp	r3, #1
 8005652:	d11d      	bne.n	8005690 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	431a      	orrs	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	3301      	adds	r3, #1
 8005670:	029a      	lsls	r2, r3, #10
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005684:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
 800568e:	e00f      	b.n	80056b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a58      	ldr	r2, [pc, #352]	; (80057f8 <HAL_SD_GetCardCSD+0x344>)
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e09d      	b.n	80057ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b4:	0b9b      	lsrs	r3, r3, #14
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c6:	09db      	lsrs	r3, r3, #7
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	0fdb      	lsrs	r3, r3, #31
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	0f5b      	lsrs	r3, r3, #29
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	0e9b      	lsrs	r3, r3, #26
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b2da      	uxtb	r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	0d9b      	lsrs	r3, r3, #22
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	b2da      	uxtb	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	0d5b      	lsrs	r3, r3, #21
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	b2da      	uxtb	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	0bdb      	lsrs	r3, r3, #15
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	0b9b      	lsrs	r3, r3, #14
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	0b5b      	lsrs	r3, r3, #13
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	0b1b      	lsrs	r3, r3, #12
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	0a9b      	lsrs	r3, r3, #10
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	004005ff 	.word	0x004005ff

080057fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b08e      	sub	sp, #56	; 0x38
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2203      	movs	r2, #3
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	2b03      	cmp	r3, #3
 800586c:	d02e      	beq.n	80058cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d106      	bne.n	8005884 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
 8005882:	e029      	b.n	80058d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d10a      	bne.n	80058a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fb09 	bl	8005ea4 <SD_WideBus_Enable>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
 80058a0:	e01a      	b.n	80058d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb46 	bl	8005f3a <SD_WideBus_Disable>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
 80058bc:	e00c      	b.n	80058d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ca:	e005      	b.n	80058d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e024      	b.n	800593e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	61fb      	str	r3, [r7, #28]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	623b      	str	r3, [r7, #32]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	466c      	mov	r4, sp
 800591c:	f107 0318 	add.w	r3, r7, #24
 8005920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800592e:	4628      	mov	r0, r5
 8005930:	f002 fa51 	bl	8007dd6 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bdb0      	pop	{r4, r5, r7, pc}
 8005946:	bf00      	nop
 8005948:	004005ff 	.word	0x004005ff

0800594c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa78 	bl	8005e54 <SD_SendStatus>
 8005964:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	0a5b      	lsrs	r3, r3, #9
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005982:	693b      	ldr	r3, [r7, #16]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	2b82      	cmp	r3, #130	; 0x82
 80059ca:	d111      	bne.n	80059f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 fb89 	bl	80080e8 <SDMMC_CmdStopTransfer>
 80059d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fd58 	bl	80054a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0208 	bic.w	r2, r2, #8
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f00e ff7f 	bl	801491c <HAL_SD_RxCpltCallback>
#endif
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d002      	beq.n	8005a52 <SD_DMAError+0x2a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d12d      	bne.n	8005aae <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a19      	ldr	r2, [pc, #100]	; (8005abc <SD_DMAError+0x94>)
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff68 	bl	800594c <HAL_SD_GetCardState>
 8005a7c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d002      	beq.n	8005a8a <SD_DMAError+0x62>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d10a      	bne.n	8005aa0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 fb2a 	bl	80080e8 <SDMMC_CmdStopTransfer>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff fcf6 	bl	80054a0 <HAL_SD_ErrorCallback>
#endif
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	004005ff 	.word	0x004005ff

08005ac0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff ff37 	bl	800594c <HAL_SD_GetCardState>
 8005ade:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d002      	beq.n	8005afa <SD_DMATxAbort+0x3a>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d10a      	bne.n	8005b10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f002 faf2 	bl	80080e8 <SDMMC_CmdStopTransfer>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f00e feeb 	bl	80148f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b1e:	e002      	b.n	8005b26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fcbd 	bl	80054a0 <HAL_SD_ErrorCallback>
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ff00 	bl	800594c <HAL_SD_GetCardState>
 8005b4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d002      	beq.n	8005b68 <SD_DMARxAbort+0x3a>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d10a      	bne.n	8005b7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f002 fabb 	bl	80080e8 <SDMMC_CmdStopTransfer>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f00e feb4 	bl	80148f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b8c:	e002      	b.n	8005b94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fc86 	bl	80054a0 <HAL_SD_ErrorCallback>
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b9c:	b5b0      	push	{r4, r5, r7, lr}
 8005b9e:	b094      	sub	sp, #80	; 0x50
 8005ba0:	af04      	add	r7, sp, #16
 8005ba2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 f96c 	bl	8007e8a <SDMMC_GetPowerState>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005bb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bbc:	e0b8      	b.n	8005d30 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d02f      	beq.n	8005c26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 fb96 	bl	80082fc <SDMMC_CmdSendCID>
 8005bd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <SD_InitCard+0x40>
    {
      return errorstate;
 8005bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bda:	e0a9      	b.n	8005d30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f002 f996 	bl	8007f14 <SDMMC_GetResponse>
 8005be8:	4602      	mov	r2, r0
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 f98d 	bl	8007f14 <SDMMC_GetResponse>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2108      	movs	r1, #8
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 f984 	bl	8007f14 <SDMMC_GetResponse>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	210c      	movs	r1, #12
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f002 f97b 	bl	8007f14 <SDMMC_GetResponse>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d00d      	beq.n	8005c4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f107 020e 	add.w	r2, r7, #14
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f002 fb9c 	bl	8008376 <SDMMC_CmdSetRelAdd>
 8005c3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <SD_InitCard+0xae>
    {
      return errorstate;
 8005c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c48:	e072      	b.n	8005d30 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d036      	beq.n	8005cc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c52:	89fb      	ldrh	r3, [r7, #14]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f002 fb66 	bl	8008338 <SDMMC_CmdSendCSD>
 8005c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	e05b      	b.n	8005d30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f002 f948 	bl	8007f14 <SDMMC_GetResponse>
 8005c84:	4602      	mov	r2, r0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2104      	movs	r1, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f002 f93f 	bl	8007f14 <SDMMC_GetResponse>
 8005c96:	4602      	mov	r2, r0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2108      	movs	r1, #8
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f002 f936 	bl	8007f14 <SDMMC_GetResponse>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	210c      	movs	r1, #12
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f002 f92d 	bl	8007f14 <SDMMC_GetResponse>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f002 f924 	bl	8007f14 <SDMMC_GetResponse>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	0d1a      	lsrs	r2, r3, #20
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cd4:	f107 0310 	add.w	r3, r7, #16
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fbea 	bl	80054b4 <HAL_SD_GetCardCSD>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cea:	e021      	b.n	8005d30 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	041b      	lsls	r3, r3, #16
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	4615      	mov	r5, r2
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	462b      	mov	r3, r5
 8005d00:	4608      	mov	r0, r1
 8005d02:	f002 fa13 	bl	800812c <SDMMC_CmdSelDesel>
 8005d06:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <SD_InitCard+0x176>
  {
    return errorstate;
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d10:	e00e      	b.n	8005d30 <SD_InitCard+0x194>
  }

#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	466c      	mov	r4, sp
 8005d1a:	f103 0210 	add.w	r2, r3, #16
 8005d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d24:	3304      	adds	r3, #4
 8005d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f002 f854 	bl	8007dd6 <SDMMC_Init>
#endif /* !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3740      	adds	r7, #64	; 0x40
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bdb0      	pop	{r4, r5, r7, pc}

08005d38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f002 fa0e 	bl	8008172 <SDMMC_CmdGoIdleState>
 8005d56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	e072      	b.n	8005e48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f002 fa21 	bl	80081ae <SDMMC_CmdOperCond>
 8005d6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00d      	beq.n	8005d90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f002 f9f7 	bl	8008172 <SDMMC_CmdGoIdleState>
 8005d84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	e05b      	b.n	8005e48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d137      	bne.n	8005e0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f002 fa21 	bl	80081ec <SDMMC_CmdAppCommand>
 8005daa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02d      	beq.n	8005e0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005db6:	e047      	b.n	8005e48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 fa14 	bl	80081ec <SDMMC_CmdAppCommand>
 8005dc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <SD_PowerON+0x98>
    {
      return errorstate;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	e03b      	b.n	8005e48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	491e      	ldr	r1, [pc, #120]	; (8005e50 <SD_PowerON+0x118>)
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f002 fa2a 	bl	8008230 <SDMMC_CmdAppOperCommand>
 8005ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005de8:	e02e      	b.n	8005e48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f002 f88f 	bl	8007f14 <SDMMC_GetResponse>
 8005df6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	0fdb      	lsrs	r3, r3, #31
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <SD_PowerON+0xcc>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <SD_PowerON+0xce>
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]

    count++;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d802      	bhi.n	8005e1e <SD_PowerON+0xe6>
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0cc      	beq.n	8005db8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d902      	bls.n	8005e2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e2c:	e00c      	b.n	8005e48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e3e:	e002      	b.n	8005e46 <SD_PowerON+0x10e>
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	c1100000 	.word	0xc1100000

08005e54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e68:	e018      	b.n	8005e9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f002 fa9e 	bl	80083b8 <SDMMC_CmdSendStatus>
 8005e7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e009      	b.n	8005e9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f002 f840 	bl	8007f14 <SDMMC_GetResponse>
 8005e94:	4602      	mov	r2, r0
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f002 f82a 	bl	8007f14 <SDMMC_GetResponse>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eca:	d102      	bne.n	8005ed2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ed0:	e02f      	b.n	8005f32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005ed2:	f107 030c 	add.w	r3, r7, #12
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f879 	bl	8005fd0 <SD_FindSCR>
 8005ede:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	e023      	b.n	8005f32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01c      	beq.n	8005f2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f002 f973 	bl	80081ec <SDMMC_CmdAppCommand>
 8005f06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	e00f      	b.n	8005f32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2102      	movs	r1, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f002 f9ac 	bl	8008276 <SDMMC_CmdBusWidth>
 8005f1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e003      	b.n	8005f32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e001      	b.n	8005f32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 ffdf 	bl	8007f14 <SDMMC_GetResponse>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f60:	d102      	bne.n	8005f68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f66:	e02f      	b.n	8005fc8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f68:	f107 030c 	add.w	r3, r7, #12
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f82e 	bl	8005fd0 <SD_FindSCR>
 8005f74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	e023      	b.n	8005fc8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01c      	beq.n	8005fc4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f002 f928 	bl	80081ec <SDMMC_CmdAppCommand>
 8005f9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	e00f      	b.n	8005fc8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 f961 	bl	8008276 <SDMMC_CmdBusWidth>
 8005fb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	e003      	b.n	8005fc8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e001      	b.n	8005fc8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b08f      	sub	sp, #60	; 0x3c
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fda:	f7fa fb0d 	bl	80005f8 <HAL_GetTick>
 8005fde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2108      	movs	r1, #8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 ffcb 	bl	8007f92 <SDMMC_CmdBlockLength>
 8005ffc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	e0a9      	b.n	800615c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f002 f8e9 	bl	80081ec <SDMMC_CmdAppCommand>
 800601a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	e09a      	b.n	800615c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800602c:	2308      	movs	r3, #8
 800602e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006030:	2330      	movs	r3, #48	; 0x30
 8006032:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006034:	2302      	movs	r3, #2
 8006036:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800603c:	2301      	movs	r3, #1
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f107 0210 	add.w	r2, r7, #16
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 ff75 	bl	8007f3a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f002 f930 	bl	80082ba <SDMMC_CmdSendSCR>
 800605a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d022      	beq.n	80060a8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	e07a      	b.n	800615c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	f107 0208 	add.w	r2, r7, #8
 8006080:	18d4      	adds	r4, r2, r3
 8006082:	4608      	mov	r0, r1
 8006084:	f001 fed4 	bl	8007e30 <SDMMC_ReadFIFO>
 8006088:	4603      	mov	r3, r0
 800608a:	6023      	str	r3, [r4, #0]
      index++;
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	3301      	adds	r3, #1
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006092:	f7fa fab1 	bl	80005f8 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d102      	bne.n	80060a8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060a6:	e059      	b.n	800615c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ae:	f240 432a 	movw	r3, #1066	; 0x42a
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0d6      	beq.n	8006066 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2208      	movs	r2, #8
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80060ce:	2308      	movs	r3, #8
 80060d0:	e044      	b.n	800615c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2202      	movs	r2, #2
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80060e8:	2302      	movs	r3, #2
 80060ea:	e037      	b.n	800615c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2220      	movs	r2, #32
 8006100:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006102:	2320      	movs	r3, #32
 8006104:	e02a      	b.n	800615c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f240 523a 	movw	r2, #1338	; 0x53a
 800610e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	061a      	lsls	r2, r3, #24
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800611c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006126:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	0e1b      	lsrs	r3, r3, #24
 800612c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	601a      	str	r2, [r3, #0]
    scr++;
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	3304      	adds	r3, #4
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	061a      	lsls	r2, r3, #24
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006144:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800614e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	0e1b      	lsrs	r3, r3, #24
 8006154:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	373c      	adds	r7, #60	; 0x3c
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d03f      	beq.n	80061fe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e033      	b.n	80061ec <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fe51 	bl	8007e30 <SDMMC_ReadFIFO>
 800618e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0e1b      	lsrs	r3, r3, #24
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	3301      	adds	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b07      	cmp	r3, #7
 80061f0:	d9c8      	bls.n	8006184 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d043      	beq.n	80062a8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e037      	b.n	8006296 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	3b01      	subs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	021a      	lsls	r2, r3, #8
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3b01      	subs	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	041a      	lsls	r2, r3, #16
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4313      	orrs	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	061a      	lsls	r2, r3, #24
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4313      	orrs	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3b01      	subs	r3, #1
 800627e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f107 0208 	add.w	r2, r7, #8
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fddd 	bl	8007e4a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3301      	adds	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b07      	cmp	r3, #7
 800629a:	d9c4      	bls.n	8006226 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80062a8:	bf00      	nop
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e01d      	b.n	80062fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f010 fa9a 	bl	8016810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f000 fa42 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <HAL_TIM_Base_Start_IT+0x50>)
 8006328:	4013      	ands	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d00b      	beq.n	800634a <HAL_TIM_Base_Start_IT+0x42>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d007      	beq.n	800634a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9cb 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9bd 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9ce 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9a1 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f993 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9a4 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f977 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f969 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f97a 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f94d 	bl	800673a <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f93f 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f950 	bl	800674e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f00e ff04 	bl	80152e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fad0 	bl	8006aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fac3 	bl	8006ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8fe 	bl	8006762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa83 	bl	8006a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_TIM_ConfigClockSource+0x18>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e0b5      	b.n	800671e <HAL_TIM_ConfigClockSource+0x184>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ee:	d03e      	beq.n	800666e <HAL_TIM_ConfigClockSource+0xd4>
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f4:	f200 8087 	bhi.w	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	f000 8085 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x170>
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d87f      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 8006606:	2b70      	cmp	r3, #112	; 0x70
 8006608:	d01a      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0xa6>
 800660a:	2b70      	cmp	r3, #112	; 0x70
 800660c:	d87b      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 800660e:	2b60      	cmp	r3, #96	; 0x60
 8006610:	d050      	beq.n	80066b4 <HAL_TIM_ConfigClockSource+0x11a>
 8006612:	2b60      	cmp	r3, #96	; 0x60
 8006614:	d877      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 8006616:	2b50      	cmp	r3, #80	; 0x50
 8006618:	d03c      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0xfa>
 800661a:	2b50      	cmp	r3, #80	; 0x50
 800661c:	d873      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d058      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x13a>
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d86f      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d064      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x15a>
 800662a:	2b30      	cmp	r3, #48	; 0x30
 800662c:	d86b      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 800662e:	2b20      	cmp	r3, #32
 8006630:	d060      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x15a>
 8006632:	2b20      	cmp	r3, #32
 8006634:	d867      	bhi.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d05c      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x15a>
 800663a:	2b10      	cmp	r3, #16
 800663c:	d05a      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800663e:	e062      	b.n	8006706 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6899      	ldr	r1, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f000 f9a6 	bl	80069a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006662:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	609a      	str	r2, [r3, #8]
      break;
 800666c:	e04e      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f000 f98f 	bl	80069a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006690:	609a      	str	r2, [r3, #8]
      break;
 8006692:	e03b      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6859      	ldr	r1, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f000 f903 	bl	80068ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2150      	movs	r1, #80	; 0x50
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 f95c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 80066b2:	e02b      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f000 f922 	bl	800690a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2160      	movs	r1, #96	; 0x60
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f94c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 80066d2:	e01b      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 f8e3 	bl	80068ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2140      	movs	r1, #64	; 0x40
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f93c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 80066f2:	e00b      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f000 f933 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8006704:	e002      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800670a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a40      	ldr	r2, [pc, #256]	; (800688c <TIM_Base_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d00f      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3d      	ldr	r2, [pc, #244]	; (8006890 <TIM_Base_SetConfig+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <TIM_Base_SetConfig+0x11c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3b      	ldr	r2, [pc, #236]	; (8006898 <TIM_Base_SetConfig+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3a      	ldr	r2, [pc, #232]	; (800689c <TIM_Base_SetConfig+0x124>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2f      	ldr	r2, [pc, #188]	; (800688c <TIM_Base_SetConfig+0x114>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01f      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d01b      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2c      	ldr	r2, [pc, #176]	; (8006890 <TIM_Base_SetConfig+0x118>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d017      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2b      	ldr	r2, [pc, #172]	; (8006894 <TIM_Base_SetConfig+0x11c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2a      	ldr	r2, [pc, #168]	; (8006898 <TIM_Base_SetConfig+0x120>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a29      	ldr	r2, [pc, #164]	; (800689c <TIM_Base_SetConfig+0x124>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <TIM_Base_SetConfig+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <TIM_Base_SetConfig+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <TIM_Base_SetConfig+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a10      	ldr	r2, [pc, #64]	; (800688c <TIM_Base_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <TIM_Base_SetConfig+0x124>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <TIM_Base_SetConfig+0x128>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <TIM_Base_SetConfig+0x12c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <TIM_Base_SetConfig+0x130>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	615a      	str	r2, [r3, #20]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 030a 	bic.w	r3, r3, #10
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800690a:	b480      	push	{r7}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0210 	bic.w	r2, r3, #16
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	031b      	lsls	r3, r3, #12
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	f043 0307 	orr.w	r3, r3, #7
 800698c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	609a      	str	r2, [r3, #8]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e045      	b.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a56:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40013400 	.word	0x40013400

08006a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e040      	b.n	8006b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f00f ff20 	bl	801693c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2224      	movs	r2, #36	; 0x24
 8006b00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0201 	bic.w	r2, r2, #1
 8006b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fb74 	bl	8007200 <UART_SetConfig>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e022      	b.n	8006b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 ff00 	bl	8007930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 ff87 	bl	8007a74 <UART_CheckIdleState>
 8006b66:	4603      	mov	r3, r0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d164      	bne.n	8006c50 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HAL_UART_Transmit_DMA+0x22>
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e05d      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_UART_Transmit_DMA+0x34>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e056      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2221      	movs	r2, #33	; 0x21
 8006bcc:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <HAL_UART_Transmit_DMA+0xec>)
 8006bdc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be2:	4a1f      	ldr	r2, [pc, #124]	; (8006c60 <HAL_UART_Transmit_DMA+0xf0>)
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <HAL_UART_Transmit_DMA+0xf4>)
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3328      	adds	r3, #40	; 0x28
 8006c06:	461a      	mov	r2, r3
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	f7f9 ff81 	bl	8000b10 <HAL_DMA_Start_IT>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2210      	movs	r2, #16
 8006c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e012      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c4a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08007bf9 	.word	0x08007bf9
 8006c60:	08007c4d 	.word	0x08007c4d
 8006c64:	08007ced 	.word	0x08007ced

08006c68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d16c      	bne.n	8006d58 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_UART_Receive_DMA+0x22>
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e065      	b.n	8006d5a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Receive_DMA+0x34>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e05e      	b.n	8006d5a <HAL_UART_Receive_DMA+0xf2>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2222      	movs	r2, #34	; 0x22
 8006cbc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02a      	beq.n	8006d1c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cca:	4a26      	ldr	r2, [pc, #152]	; (8006d64 <HAL_UART_Receive_DMA+0xfc>)
 8006ccc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd2:	4a25      	ldr	r2, [pc, #148]	; (8006d68 <HAL_UART_Receive_DMA+0x100>)
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cda:	4a24      	ldr	r2, [pc, #144]	; (8006d6c <HAL_UART_Receive_DMA+0x104>)
 8006cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3324      	adds	r3, #36	; 0x24
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	f7f9 ff09 	bl	8000b10 <HAL_DMA_Start_IT>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2210      	movs	r2, #16
 8006d08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e01e      	b.n	8006d5a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d32:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d52:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e000      	b.n	8006d5a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006d58:	2302      	movs	r3, #2
  }
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	08007c69 	.word	0x08007c69
 8006d68:	08007cd1 	.word	0x08007cd1
 8006d6c:	08007ced 	.word	0x08007ced

08006d70 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d126      	bne.n	8006de0 <HAL_UART_DMAStop+0x70>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b21      	cmp	r3, #33	; 0x21
 8006d96:	d123      	bne.n	8006de0 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d014      	beq.n	8006dda <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7f9 ff0b 	bl	8000bd0 <HAL_DMA_Abort>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00c      	beq.n	8006dda <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fa f831 	bl	8000e2c <HAL_DMA_GetError>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d104      	bne.n	8006dda <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e031      	b.n	8006e3e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fed7 	bl	8007b8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d126      	bne.n	8006e3c <HAL_UART_DMAStop+0xcc>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b22      	cmp	r3, #34	; 0x22
 8006df2:	d123      	bne.n	8006e3c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e02:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7f9 fedd 	bl	8000bd0 <HAL_DMA_Abort>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fa f803 	bl	8000e2c <HAL_DMA_GetError>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d104      	bne.n	8006e36 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e003      	b.n	8006e3e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 febe 	bl	8007bb8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8006e5c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d124      	bne.n	8006ec6 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e8a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d018      	beq.n	8006ec6 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e98:	2200      	movs	r2, #0
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7f9 fe95 	bl	8000bd0 <HAL_DMA_Abort>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7f9 ffbb 	bl	8000e2c <HAL_DMA_GetError>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d104      	bne.n	8006ec6 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e04b      	b.n	8006f5e <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d124      	bne.n	8006f1e <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d018      	beq.n	8006f1e <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7f9 fe69 	bl	8000bd0 <HAL_DMA_Abort>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00c      	beq.n	8006f1e <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7f9 ff8f 	bl	8000e2c <HAL_DMA_GetError>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d104      	bne.n	8006f1e <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2210      	movs	r2, #16
 8006f18:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e01f      	b.n	8006f5e <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	220f      	movs	r2, #15
 8006f34:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	8b1b      	ldrh	r3, [r3, #24]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0208 	orr.w	r2, r2, #8
 8006f46:	b292      	uxth	r2, r2
 8006f48:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d113      	bne.n	8006fbe <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80fe 	beq.w	80071b0 <HAL_UART_IRQHandler+0x248>
      {
        huart->RxISR(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
      }
      return;
 8006fbc:	e0f8      	b.n	80071b0 <HAL_UART_IRQHandler+0x248>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80c1 	beq.w	8007148 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d105      	bne.n	8006fdc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80b6 	beq.w	8007148 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <HAL_UART_IRQHandler+0x9c>
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00e      	beq.n	800702c <HAL_UART_IRQHandler+0xc4>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2202      	movs	r2, #2
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007024:	f043 0204 	orr.w	r2, r3, #4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <HAL_UART_IRQHandler+0xec>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2204      	movs	r2, #4
 8007046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704c:	f043 0202 	orr.w	r2, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d013      	beq.n	8007086 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2208      	movs	r2, #8
 8007078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800707e:	f043 0208 	orr.w	r2, r3, #8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8092 	beq.w	80071b4 <HAL_UART_IRQHandler+0x24c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d004      	beq.n	80070d2 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d031      	beq.n	8007136 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fd70 	bl	8007bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d123      	bne.n	800712e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d013      	beq.n	8007126 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007102:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <HAL_UART_IRQHandler+0x258>)
 8007104:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710a:	4618      	mov	r0, r3
 800710c:	f7f9 fd9e 	bl	8000c4c <HAL_DMA_Abort_IT>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d016      	beq.n	8007144 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e00e      	b.n	8007144 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f00f f8a6 	bl	8016278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	e00a      	b.n	8007144 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f00f f8a2 	bl	8016278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	e006      	b.n	8007144 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f00f f89e 	bl	8016278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007142:	e037      	b.n	80071b4 <HAL_UART_IRQHandler+0x24c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007144:	bf00      	nop
    return;
 8007146:	e035      	b.n	80071b4 <HAL_UART_IRQHandler+0x24c>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00d      	beq.n	800716e <HAL_UART_IRQHandler+0x206>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fe2b 	bl	8007dc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800716c:	e025      	b.n	80071ba <HAL_UART_IRQHandler+0x252>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <HAL_UART_IRQHandler+0x250>
    {
      huart->TxISR(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
    }
    return;
 8007192:	e011      	b.n	80071b8 <HAL_UART_IRQHandler+0x250>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <HAL_UART_IRQHandler+0x252>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <HAL_UART_IRQHandler+0x252>
  {
    UART_EndTransmit_IT(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fdf1 	bl	8007d90 <UART_EndTransmit_IT>
    return;
 80071ae:	e004      	b.n	80071ba <HAL_UART_IRQHandler+0x252>
      return;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <HAL_UART_IRQHandler+0x252>
    return;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <HAL_UART_IRQHandler+0x252>
    return;
 80071b8:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	08007d65 	.word	0x08007d65

080071c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007204:	b09e      	sub	sp, #120	; 0x78
 8007206:	af00      	add	r7, sp, #0
 8007208:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800720a:	2300      	movs	r3, #0
 800720c:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007214:	2300      	movs	r3, #0
 8007216:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	431a      	orrs	r2, r3
 8007222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	431a      	orrs	r2, r3
 8007228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	4313      	orrs	r3, r2
 800722e:	677b      	str	r3, [r7, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	49a4      	ldr	r1, [pc, #656]	; (80074c8 <UART_SetConfig+0x2c8>)
 8007238:	4019      	ands	r1, r3
 800723a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	430b      	orrs	r3, r1
 8007242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800724e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007250:	68d9      	ldr	r1, [r3, #12]
 8007252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	ea40 0301 	orr.w	r3, r0, r1
 800725a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b99      	ldr	r3, [pc, #612]	; (80074cc <UART_SetConfig+0x2cc>)
 8007268:	429a      	cmp	r2, r3
 800726a:	d004      	beq.n	8007276 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007272:	4313      	orrs	r3, r2
 8007274:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007286:	430b      	orrs	r3, r1
 8007288:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b90      	ldr	r3, [pc, #576]	; (80074d0 <UART_SetConfig+0x2d0>)
 8007290:	429a      	cmp	r2, r3
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0xe0>
 8007294:	4b8f      	ldr	r3, [pc, #572]	; (80074d4 <UART_SetConfig+0x2d4>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d81a      	bhi.n	80072d8 <UART_SetConfig+0xd8>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <UART_SetConfig+0xa8>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072be:	e116      	b.n	80074ee <UART_SetConfig+0x2ee>
 80072c0:	2302      	movs	r3, #2
 80072c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072c6:	e112      	b.n	80074ee <UART_SetConfig+0x2ee>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072ce:	e10e      	b.n	80074ee <UART_SetConfig+0x2ee>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072d6:	e10a      	b.n	80074ee <UART_SetConfig+0x2ee>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80072de:	e106      	b.n	80074ee <UART_SetConfig+0x2ee>
 80072e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4b7c      	ldr	r3, [pc, #496]	; (80074d8 <UART_SetConfig+0x2d8>)
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d138      	bne.n	800735c <UART_SetConfig+0x15c>
 80072ea:	4b7a      	ldr	r3, [pc, #488]	; (80074d4 <UART_SetConfig+0x2d4>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d82d      	bhi.n	8007354 <UART_SetConfig+0x154>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x100>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007335 	.word	0x08007335
 8007304:	08007355 	.word	0x08007355
 8007308:	08007355 	.word	0x08007355
 800730c:	08007355 	.word	0x08007355
 8007310:	08007345 	.word	0x08007345
 8007314:	08007355 	.word	0x08007355
 8007318:	08007355 	.word	0x08007355
 800731c:	08007355 	.word	0x08007355
 8007320:	0800733d 	.word	0x0800733d
 8007324:	08007355 	.word	0x08007355
 8007328:	08007355 	.word	0x08007355
 800732c:	08007355 	.word	0x08007355
 8007330:	0800734d 	.word	0x0800734d
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800733a:	e0d8      	b.n	80074ee <UART_SetConfig+0x2ee>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007342:	e0d4      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800734a:	e0d0      	b.n	80074ee <UART_SetConfig+0x2ee>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007352:	e0cc      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800735a:	e0c8      	b.n	80074ee <UART_SetConfig+0x2ee>
 800735c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4b5e      	ldr	r3, [pc, #376]	; (80074dc <UART_SetConfig+0x2dc>)
 8007362:	429a      	cmp	r2, r3
 8007364:	d125      	bne.n	80073b2 <UART_SetConfig+0x1b2>
 8007366:	4b5b      	ldr	r3, [pc, #364]	; (80074d4 <UART_SetConfig+0x2d4>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007370:	2b30      	cmp	r3, #48	; 0x30
 8007372:	d016      	beq.n	80073a2 <UART_SetConfig+0x1a2>
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d818      	bhi.n	80073aa <UART_SetConfig+0x1aa>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d00a      	beq.n	8007392 <UART_SetConfig+0x192>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d814      	bhi.n	80073aa <UART_SetConfig+0x1aa>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <UART_SetConfig+0x18a>
 8007384:	2b10      	cmp	r3, #16
 8007386:	d008      	beq.n	800739a <UART_SetConfig+0x19a>
 8007388:	e00f      	b.n	80073aa <UART_SetConfig+0x1aa>
 800738a:	2300      	movs	r3, #0
 800738c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007390:	e0ad      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007392:	2302      	movs	r3, #2
 8007394:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007398:	e0a9      	b.n	80074ee <UART_SetConfig+0x2ee>
 800739a:	2304      	movs	r3, #4
 800739c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073a0:	e0a5      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073a2:	2308      	movs	r3, #8
 80073a4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073a8:	e0a1      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073aa:	2310      	movs	r3, #16
 80073ac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073b0:	e09d      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b4a      	ldr	r3, [pc, #296]	; (80074e0 <UART_SetConfig+0x2e0>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x208>
 80073bc:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <UART_SetConfig+0x2d4>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073c6:	2bc0      	cmp	r3, #192	; 0xc0
 80073c8:	d016      	beq.n	80073f8 <UART_SetConfig+0x1f8>
 80073ca:	2bc0      	cmp	r3, #192	; 0xc0
 80073cc:	d818      	bhi.n	8007400 <UART_SetConfig+0x200>
 80073ce:	2b80      	cmp	r3, #128	; 0x80
 80073d0:	d00a      	beq.n	80073e8 <UART_SetConfig+0x1e8>
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d814      	bhi.n	8007400 <UART_SetConfig+0x200>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <UART_SetConfig+0x1e0>
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d008      	beq.n	80073f0 <UART_SetConfig+0x1f0>
 80073de:	e00f      	b.n	8007400 <UART_SetConfig+0x200>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073e6:	e082      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073e8:	2302      	movs	r3, #2
 80073ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073ee:	e07e      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073f6:	e07a      	b.n	80074ee <UART_SetConfig+0x2ee>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80073fe:	e076      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007406:	e072      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b35      	ldr	r3, [pc, #212]	; (80074e4 <UART_SetConfig+0x2e4>)
 800740e:	429a      	cmp	r2, r3
 8007410:	d12a      	bne.n	8007468 <UART_SetConfig+0x268>
 8007412:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <UART_SetConfig+0x2d4>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007420:	d01a      	beq.n	8007458 <UART_SetConfig+0x258>
 8007422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007426:	d81b      	bhi.n	8007460 <UART_SetConfig+0x260>
 8007428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742c:	d00c      	beq.n	8007448 <UART_SetConfig+0x248>
 800742e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007432:	d815      	bhi.n	8007460 <UART_SetConfig+0x260>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <UART_SetConfig+0x240>
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d008      	beq.n	8007450 <UART_SetConfig+0x250>
 800743e:	e00f      	b.n	8007460 <UART_SetConfig+0x260>
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007446:	e052      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800744e:	e04e      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007456:	e04a      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800745e:	e046      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007466:	e042      	b.n	80074ee <UART_SetConfig+0x2ee>
 8007468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4b17      	ldr	r3, [pc, #92]	; (80074cc <UART_SetConfig+0x2cc>)
 800746e:	429a      	cmp	r2, r3
 8007470:	d13a      	bne.n	80074e8 <UART_SetConfig+0x2e8>
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <UART_SetConfig+0x2d4>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800747c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007480:	d01a      	beq.n	80074b8 <UART_SetConfig+0x2b8>
 8007482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007486:	d81b      	bhi.n	80074c0 <UART_SetConfig+0x2c0>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748c:	d00c      	beq.n	80074a8 <UART_SetConfig+0x2a8>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007492:	d815      	bhi.n	80074c0 <UART_SetConfig+0x2c0>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x2a0>
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x2b0>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x2c0>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80074a6:	e022      	b.n	80074ee <UART_SetConfig+0x2ee>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80074ae:	e01e      	b.n	80074ee <UART_SetConfig+0x2ee>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80074b6:	e01a      	b.n	80074ee <UART_SetConfig+0x2ee>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x2ee>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x2ee>
 80074c8:	efff69f3 	.word	0xefff69f3
 80074cc:	40008000 	.word	0x40008000
 80074d0:	40013800 	.word	0x40013800
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40004400 	.word	0x40004400
 80074dc:	40004800 	.word	0x40004800
 80074e0:	40004c00 	.word	0x40004c00
 80074e4:	40005000 	.word	0x40005000
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4bba      	ldr	r3, [pc, #744]	; (80077dc <UART_SetConfig+0x5dc>)
 80074f4:	429a      	cmp	r2, r3
 80074f6:	f040 810a 	bne.w	800770e <UART_SetConfig+0x50e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d823      	bhi.n	800754a <UART_SetConfig+0x34a>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0x308>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800752d 	.word	0x0800752d
 800750c:	0800754b 	.word	0x0800754b
 8007510:	08007535 	.word	0x08007535
 8007514:	0800754b 	.word	0x0800754b
 8007518:	0800753b 	.word	0x0800753b
 800751c:	0800754b 	.word	0x0800754b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800754b 	.word	0x0800754b
 8007528:	08007543 	.word	0x08007543
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fb fea4 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8007530:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8007532:	e00e      	b.n	8007552 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007534:	4baa      	ldr	r3, [pc, #680]	; (80077e0 <UART_SetConfig+0x5e0>)
 8007536:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8007538:	e00b      	b.n	8007552 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800753a:	f7fb fe05 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 800753e:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8007540:	e007      	b.n	8007552 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8007548:	e003      	b.n	8007552 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8007550:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 81de 	beq.w	8007916 <UART_SetConfig+0x716>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800755a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	441a      	add	r2, r3
 8007564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007566:	4293      	cmp	r3, r2
 8007568:	d305      	bcc.n	8007576 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800756a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007572:	4293      	cmp	r3, r2
 8007574:	d903      	bls.n	800757e <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800757c:	e1cb      	b.n	8007916 <UART_SetConfig+0x716>
      }
      else
      {
        switch (clocksource)
 800757e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007582:	2b08      	cmp	r3, #8
 8007584:	f200 80ae 	bhi.w	80076e4 <UART_SetConfig+0x4e4>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x390>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075b5 	.word	0x080075b5
 8007594:	080076e5 	.word	0x080076e5
 8007598:	08007613 	.word	0x08007613
 800759c:	080076e5 	.word	0x080076e5
 80075a0:	08007653 	.word	0x08007653
 80075a4:	080076e5 	.word	0x080076e5
 80075a8:	080076e5 	.word	0x080076e5
 80075ac:	080076e5 	.word	0x080076e5
 80075b0:	080076ad 	.word	0x080076ad
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80075b4:	f7fb fe60 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2200      	movs	r2, #0
 80075bc:	4698      	mov	r8, r3
 80075be:	4691      	mov	r9, r2
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80075cc:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80075d0:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80075d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80075d6:	6849      	ldr	r1, [r1, #4]
 80075d8:	0849      	lsrs	r1, r1, #1
 80075da:	2000      	movs	r0, #0
 80075dc:	6539      	str	r1, [r7, #80]	; 0x50
 80075de:	6578      	str	r0, [r7, #84]	; 0x54
 80075e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80075e4:	4621      	mov	r1, r4
 80075e6:	1851      	adds	r1, r2, r1
 80075e8:	64b9      	str	r1, [r7, #72]	; 0x48
 80075ea:	4629      	mov	r1, r5
 80075ec:	eb43 0101 	adc.w	r1, r3, r1
 80075f0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80075f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	643b      	str	r3, [r7, #64]	; 0x40
 80075fa:	647a      	str	r2, [r7, #68]	; 0x44
 80075fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007600:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007604:	f7f8 fe4c 	bl	80002a0 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4613      	mov	r3, r2
 800760e:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8007610:	e06c      	b.n	80076ec <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	2200      	movs	r2, #0
 800761a:	63bb      	str	r3, [r7, #56]	; 0x38
 800761c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800761e:	4b71      	ldr	r3, [pc, #452]	; (80077e4 <UART_SetConfig+0x5e4>)
 8007620:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007624:	4602      	mov	r2, r0
 8007626:	18d3      	adds	r3, r2, r3
 8007628:	633b      	str	r3, [r7, #48]	; 0x30
 800762a:	460b      	mov	r3, r1
 800762c:	f143 0300 	adc.w	r3, r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
 8007632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28
 800763a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007640:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007644:	f7f8 fe2c 	bl	80002a0 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4613      	mov	r3, r2
 800764e:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8007650:	e04c      	b.n	80076ec <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007652:	f7fb fd79 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8007656:	4603      	mov	r3, r0
 8007658:	2200      	movs	r2, #0
 800765a:	461c      	mov	r4, r3
 800765c:	4615      	mov	r5, r2
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	022b      	lsls	r3, r5, #8
 8007668:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800766c:	0222      	lsls	r2, r4, #8
 800766e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007670:	6849      	ldr	r1, [r1, #4]
 8007672:	0849      	lsrs	r1, r1, #1
 8007674:	2000      	movs	r0, #0
 8007676:	6239      	str	r1, [r7, #32]
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
 800767a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800767e:	4621      	mov	r1, r4
 8007680:	1851      	adds	r1, r2, r1
 8007682:	61b9      	str	r1, [r7, #24]
 8007684:	4629      	mov	r1, r5
 8007686:	eb43 0101 	adc.w	r1, r3, r1
 800768a:	61f9      	str	r1, [r7, #28]
 800768c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	617a      	str	r2, [r7, #20]
 8007696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800769a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800769e:	f7f8 fdff 	bl	80002a0 <__aeabi_uldivmod>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4613      	mov	r3, r2
 80076a8:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 80076aa:	e01f      	b.n	80076ec <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80076ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	2200      	movs	r2, #0
 80076b4:	469a      	mov	sl, r3
 80076b6:	4693      	mov	fp, r2
 80076b8:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	f14b 0300 	adc.w	r3, fp, #0
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076d6:	f7f8 fde3 	bl	80002a0 <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4613      	mov	r3, r2
 80076e0:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 80076e2:	e003      	b.n	80076ec <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 80076ea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f2:	d308      	bcc.n	8007706 <UART_SetConfig+0x506>
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fa:	d204      	bcs.n	8007706 <UART_SetConfig+0x506>
        {
          huart->Instance->BRR = usartdiv;
 80076fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007702:	60da      	str	r2, [r3, #12]
 8007704:	e107      	b.n	8007916 <UART_SetConfig+0x716>
        }
        else
        {
          ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800770c:	e103      	b.n	8007916 <UART_SetConfig+0x716>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800770e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007716:	f040 808d 	bne.w	8007834 <UART_SetConfig+0x634>
  {
    switch (clocksource)
 800771a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800771e:	2b08      	cmp	r3, #8
 8007720:	d862      	bhi.n	80077e8 <UART_SetConfig+0x5e8>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0x528>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800774d 	.word	0x0800774d
 800772c:	0800776b 	.word	0x0800776b
 8007730:	08007789 	.word	0x08007789
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077a5 	.word	0x080077a5
 800773c:	080077e9 	.word	0x080077e9
 8007740:	080077e9 	.word	0x080077e9
 8007744:	080077e9 	.word	0x080077e9
 8007748:	080077c3 	.word	0x080077c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800774c:	f7fb fd94 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8007750:	4603      	mov	r3, r0
 8007752:	005a      	lsls	r2, r3, #1
 8007754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	441a      	add	r2, r3
 800775c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	b29b      	uxth	r3, r3
 8007766:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007768:	e042      	b.n	80077f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800776a:	f7fb fd9b 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 800776e:	4603      	mov	r3, r0
 8007770:	005a      	lsls	r2, r3, #1
 8007772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	441a      	add	r2, r3
 800777a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007786:	e033      	b.n	80077f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007792:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007798:	6852      	ldr	r2, [r2, #4]
 800779a:	fbb3 f3f2 	udiv	r3, r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80077a2:	e025      	b.n	80077f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80077a4:	f7fb fcd0 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80077a8:	4603      	mov	r3, r0
 80077aa:	005a      	lsls	r2, r3, #1
 80077ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	441a      	add	r2, r3
 80077b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	b29b      	uxth	r3, r3
 80077be:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80077c0:	e016      	b.n	80077f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80077c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80077cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80077d8:	e00a      	b.n	80077f0 <UART_SetConfig+0x5f0>
 80077da:	bf00      	nop
 80077dc:	40008000 	.word	0x40008000
 80077e0:	00f42400 	.word	0x00f42400
 80077e4:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 80077ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f2:	2b0f      	cmp	r3, #15
 80077f4:	d91a      	bls.n	800782c <UART_SetConfig+0x62c>
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fc:	d216      	bcs.n	800782c <UART_SetConfig+0x62c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	b29b      	uxth	r3, r3
 8007802:	f023 030f 	bic.w	r3, r3, #15
 8007806:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800781a:	4313      	orrs	r3, r2
 800781c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      huart->Instance->BRR = brrtemp;
 8007820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	e074      	b.n	8007916 <UART_SetConfig+0x716>
    }
    else
    {
      ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007832:	e070      	b.n	8007916 <UART_SetConfig+0x716>
    }
  }
  else
  {
    switch (clocksource)
 8007834:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007838:	2b08      	cmp	r3, #8
 800783a:	d859      	bhi.n	80078f0 <UART_SetConfig+0x6f0>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x644>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007869 	.word	0x08007869
 8007848:	08007885 	.word	0x08007885
 800784c:	080078a1 	.word	0x080078a1
 8007850:	080078f1 	.word	0x080078f1
 8007854:	080078bd 	.word	0x080078bd
 8007858:	080078f1 	.word	0x080078f1
 800785c:	080078f1 	.word	0x080078f1
 8007860:	080078f1 	.word	0x080078f1
 8007864:	080078d9 	.word	0x080078d9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007868:	f7fb fd06 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 800786c:	4602      	mov	r2, r0
 800786e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	441a      	add	r2, r3
 8007876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	fbb2 f3f3 	udiv	r3, r2, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007882:	e039      	b.n	80078f8 <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007884:	f7fb fd0e 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8007888:	4602      	mov	r2, r0
 800788a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	441a      	add	r2, r3
 8007892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	b29b      	uxth	r3, r3
 800789c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800789e:	e02b      	b.n	80078f8 <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80078a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	085b      	lsrs	r3, r3, #1
 80078a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80078aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80078ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078b0:	6852      	ldr	r2, [r2, #4]
 80078b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ba:	e01d      	b.n	80078f8 <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80078bc:	f7fb fc44 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	441a      	add	r2, r3
 80078ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80078d6:	e00f      	b.n	80078f8 <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80078d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80078e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ee:	e003      	b.n	80078f8 <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 80078f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d908      	bls.n	8007910 <UART_SetConfig+0x710>
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007904:	d204      	bcs.n	8007910 <UART_SetConfig+0x710>
    {
      huart->Instance->BRR = usartdiv;
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	e002      	b.n	8007916 <UART_SetConfig+0x716>
    }
    else
    {
      ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007918:	2200      	movs	r2, #0
 800791a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800791c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800791e:	2200      	movs	r2, #0
 8007920:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007922:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8007926:	4618      	mov	r0, r3
 8007928:	3778      	adds	r7, #120	; 0x78
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	d10a      	bne.n	8007a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a82:	f7f8 fdb9 	bl	80005f8 <HAL_GetTick>
 8007a86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d10e      	bne.n	8007ab4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f82a 	bl	8007afe <UART_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e020      	b.n	8007af6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d10e      	bne.n	8007ae0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f814 	bl	8007afe <UART_WaitOnFlagUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e00a      	b.n	8007af6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	603b      	str	r3, [r7, #0]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0e:	e02a      	b.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d026      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b18:	f7f8 fd6e 	bl	80005f8 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d302      	bcc.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d11b      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e00f      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	bf0c      	ite	eq
 8007b76:	2301      	moveq	r3, #1
 8007b78:	2300      	movne	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d0c5      	beq.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007ba4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d114      	bne.n	8007c3e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c2a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c3a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c3c:	e002      	b.n	8007c44 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f00e fab6 	bl	80161b0 <HAL_UART_TxCpltCallback>
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff fab2 	bl	80071c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11e      	bne.n	8007cc2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c9a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cba:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fa88 	bl	80071d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fa84 	bl	80071ec <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d10:	2b80      	cmp	r3, #128	; 0x80
 8007d12:	d109      	bne.n	8007d28 <UART_DMAError+0x3c>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b21      	cmp	r3, #33	; 0x21
 8007d18:	d106      	bne.n	8007d28 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007d22:	6978      	ldr	r0, [r7, #20]
 8007d24:	f7ff ff33 	bl	8007b8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d109      	bne.n	8007d4a <UART_DMAError+0x5e>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b22      	cmp	r3, #34	; 0x22
 8007d3a:	d106      	bne.n	8007d4a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007d44:	6978      	ldr	r0, [r7, #20]
 8007d46:	f7ff ff37 	bl	8007bb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4e:	f043 0210 	orr.w	r2, r3, #16
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d56:	6978      	ldr	r0, [r7, #20]
 8007d58:	f00e fa8e 	bl	8016278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d5c:	bf00      	nop
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f00e fa78 	bl	8016278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007da6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f00e f9fb 	bl	80161b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	f107 001c 	add.w	r0, r7, #28
 8007de4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007df4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007df8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007dfc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007e00:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007e04:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007e14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	b004      	add	sp, #16
 8007e2e:	4770      	bx	lr

08007e30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f7f8 fbc8 	bl	8000610 <HAL_Delay>

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0303 	and.w	r3, r3, #3
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ec4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007eca:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007ed0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ee0:	f023 030f 	bic.w	r3, r3, #15
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	b2db      	uxtb	r3, r3
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3314      	adds	r3, #20
 8007f22:	461a      	mov	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	4413      	add	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f60:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007f66:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007f6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0

}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b088      	sub	sp, #32
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fb2:	f107 0308 	add.w	r3, r7, #8
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff ff74 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc2:	2110      	movs	r1, #16
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa41 	bl	800844c <SDMMC_GetCmdResp1>
 8007fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b088      	sub	sp, #32
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007fe4:	2311      	movs	r3, #17
 8007fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff ff52 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	2111      	movs	r1, #17
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa1f 	bl	800844c <SDMMC_GetCmdResp1>
 800800e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008010:	69fb      	ldr	r3, [r7, #28]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b088      	sub	sp, #32
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008028:	2312      	movs	r3, #18
 800802a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800802c:	2340      	movs	r3, #64	; 0x40
 800802e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff30 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008046:	f241 3288 	movw	r2, #5000	; 0x1388
 800804a:	2112      	movs	r1, #18
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f9fd 	bl	800844c <SDMMC_GetCmdResp1>
 8008052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008054:	69fb      	ldr	r3, [r7, #28]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800806c:	2318      	movs	r3, #24
 800806e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008070:	2340      	movs	r3, #64	; 0x40
 8008072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff ff0e 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800808a:	f241 3288 	movw	r2, #5000	; 0x1388
 800808e:	2118      	movs	r1, #24
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9db 	bl	800844c <SDMMC_GetCmdResp1>
 8008096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008098:	69fb      	ldr	r3, [r7, #28]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3720      	adds	r7, #32
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b088      	sub	sp, #32
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80080b0:	2319      	movs	r3, #25
 80080b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff feec 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80080ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d2:	2119      	movs	r1, #25
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9b9 	bl	800844c <SDMMC_GetCmdResp1>
 80080da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080dc:	69fb      	ldr	r3, [r7, #28]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80080f4:	230c      	movs	r3, #12
 80080f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008104:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008106:	f107 0308 	add.w	r3, r7, #8
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff feca 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008112:	4a05      	ldr	r2, [pc, #20]	; (8008128 <SDMMC_CmdStopTransfer+0x40>)
 8008114:	210c      	movs	r1, #12
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f998 	bl	800844c <SDMMC_GetCmdResp1>
 800811c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800811e:	69fb      	ldr	r3, [r7, #28]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	05f5e100 	.word	0x05f5e100

0800812c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	; 0x28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800813c:	2307      	movs	r3, #7
 800813e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800814c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800814e:	f107 0310 	add.w	r3, r7, #16
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fea6 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	2107      	movs	r1, #7
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f973 	bl	800844c <SDMMC_GetCmdResp1>
 8008166:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800816a:	4618      	mov	r0, r3
 800816c:	3728      	adds	r7, #40	; 0x28
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800818a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800818e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe85 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f92d 	bl	80083fc <SDMMC_GetCmdError>
 80081a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081a4:	69fb      	ldr	r3, [r7, #28]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80081b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80081ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80081bc:	2308      	movs	r3, #8
 80081be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe66 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb16 	bl	800880c <SDMMC_GetCmdResp7>
 80081e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e2:	69fb      	ldr	r3, [r7, #28]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80081fa:	2337      	movs	r3, #55	; 0x37
 80081fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fe47 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008218:	f241 3288 	movw	r2, #5000	; 0x1388
 800821c:	2137      	movs	r1, #55	; 0x37
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f914 	bl	800844c <SDMMC_GetCmdResp1>
 8008224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008226:	69fb      	ldr	r3, [r7, #28]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008244:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008246:	2329      	movs	r3, #41	; 0x29
 8008248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800824a:	2340      	movs	r3, #64	; 0x40
 800824c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800824e:	2300      	movs	r3, #0
 8008250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008258:	f107 0308 	add.w	r3, r7, #8
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fe21 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa23 	bl	80086b0 <SDMMC_GetCmdResp3>
 800826a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800826c:	69fb      	ldr	r3, [r7, #28]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b088      	sub	sp, #32
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008284:	2306      	movs	r3, #6
 8008286:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008294:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff fe02 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	2106      	movs	r1, #6
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f8cf 	bl	800844c <SDMMC_GetCmdResp1>
 80082ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b0:	69fb      	ldr	r3, [r7, #28]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80082c6:	2333      	movs	r3, #51	; 0x33
 80082c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082d8:	f107 0308 	add.w	r3, r7, #8
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fde1 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80082e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e8:	2133      	movs	r1, #51	; 0x33
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8ae 	bl	800844c <SDMMC_GetCmdResp1>
 80082f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082f2:	69fb      	ldr	r3, [r7, #28]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008308:	2302      	movs	r3, #2
 800830a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800830c:	23c0      	movs	r3, #192	; 0xc0
 800830e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fdc0 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f97c 	bl	8008624 <SDMMC_GetCmdResp2>
 800832c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800832e:	69fb      	ldr	r3, [r7, #28]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008346:	2309      	movs	r3, #9
 8008348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800834a:	23c0      	movs	r3, #192	; 0xc0
 800834c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008358:	f107 0308 	add.w	r3, r7, #8
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fda1 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f95d 	bl	8008624 <SDMMC_GetCmdResp2>
 800836a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b088      	sub	sp, #32
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008384:	2303      	movs	r3, #3
 8008386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008388:	2340      	movs	r3, #64	; 0x40
 800838a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008396:	f107 0308 	add.w	r3, r7, #8
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fd82 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	2103      	movs	r1, #3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9bc 	bl	8008724 <SDMMC_GetCmdResp6>
 80083ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ae:	69fb      	ldr	r3, [r7, #28]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80083c6:	230d      	movs	r3, #13
 80083c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083ca:	2340      	movs	r3, #64	; 0x40
 80083cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083d8:	f107 0308 	add.w	r3, r7, #8
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fd61 	bl	8007ea6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80083e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e8:	210d      	movs	r1, #13
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f82e 	bl	800844c <SDMMC_GetCmdResp1>
 80083f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f2:	69fb      	ldr	r3, [r7, #28]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80083fc:	b490      	push	{r4, r7}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008404:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <SDMMC_GetCmdError+0x48>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <SDMMC_GetCmdError+0x4c>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	0a5b      	lsrs	r3, r3, #9
 8008410:	f241 3288 	movw	r2, #5000	; 0x1388
 8008414:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008418:	4623      	mov	r3, r4
 800841a:	1e5c      	subs	r4, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008424:	e009      	b.n	800843a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0f2      	beq.n	8008418 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	22c5      	movs	r2, #197	; 0xc5
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bc90      	pop	{r4, r7}
 8008442:	4770      	bx	lr
 8008444:	200000c0 	.word	0x200000c0
 8008448:	10624dd3 	.word	0x10624dd3

0800844c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	460b      	mov	r3, r1
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800845a:	4b6f      	ldr	r3, [pc, #444]	; (8008618 <SDMMC_GetCmdResp1+0x1cc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a6f      	ldr	r2, [pc, #444]	; (800861c <SDMMC_GetCmdResp1+0x1d0>)
 8008460:	fba2 2303 	umull	r2, r3, r2, r3
 8008464:	0a5b      	lsrs	r3, r3, #9
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800846c:	4623      	mov	r3, r4
 800846e:	1e5c      	subs	r4, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008478:	e0c9      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	617b      	str	r3, [r7, #20]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f0      	beq.n	800846c <SDMMC_GetCmdResp1+0x20>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1eb      	bne.n	800846c <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2204      	movs	r2, #4
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084a6:	2304      	movs	r3, #4
 80084a8:	e0b1      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084bc:	2301      	movs	r3, #1
 80084be:	e0a6      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	22c5      	movs	r2, #197	; 0xc5
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff fd17 	bl	8007efa <SDMMC_GetCommandResponse>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d001      	beq.n	80084da <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e099      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80084da:	2100      	movs	r1, #0
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fd19 	bl	8007f14 <SDMMC_GetResponse>
 80084e2:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4b4e      	ldr	r3, [pc, #312]	; (8008620 <SDMMC_GetCmdResp1+0x1d4>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e08d      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	da02      	bge.n	80084fe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80084f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084fc:	e087      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	e080      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008516:	2380      	movs	r3, #128	; 0x80
 8008518:	e079      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008528:	e071      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008538:	e069      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008548:	e061      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008558:	e059      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008568:	e051      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008578:	e049      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008588:	e041      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008598:	e039      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80085a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085a8:	e031      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80085b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80085b8:	e029      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80085c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085c8:	e021      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80085d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085d8:	e019      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085e8:	e011      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80085f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085f8:	e009      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008604:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008608:	e001      	b.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800860a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd90      	pop	{r4, r7, pc}
 8008616:	bf00      	nop
 8008618:	200000c0 	.word	0x200000c0
 800861c:	10624dd3 	.word	0x10624dd3
 8008620:	fdffe008 	.word	0xfdffe008

08008624 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008624:	b490      	push	{r4, r7}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800862c:	4b1e      	ldr	r3, [pc, #120]	; (80086a8 <SDMMC_GetCmdResp2+0x84>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <SDMMC_GetCmdResp2+0x88>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	0a5b      	lsrs	r3, r3, #9
 8008638:	f241 3288 	movw	r2, #5000	; 0x1388
 800863c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008640:	4623      	mov	r3, r4
 8008642:	1e5c      	subs	r4, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800864c:	e026      	b.n	800869c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <SDMMC_GetCmdResp2+0x1c>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1eb      	bne.n	8008640 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2204      	movs	r2, #4
 8008678:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800867a:	2304      	movs	r3, #4
 800867c:	e00e      	b.n	800869c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d004      	beq.n	8008694 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008690:	2301      	movs	r3, #1
 8008692:	e003      	b.n	800869c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	22c5      	movs	r2, #197	; 0xc5
 8008698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc90      	pop	{r4, r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	200000c0 	.word	0x200000c0
 80086ac:	10624dd3 	.word	0x10624dd3

080086b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80086b0:	b490      	push	{r4, r7}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086b8:	4b18      	ldr	r3, [pc, #96]	; (800871c <SDMMC_GetCmdResp3+0x6c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a18      	ldr	r2, [pc, #96]	; (8008720 <SDMMC_GetCmdResp3+0x70>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	0a5b      	lsrs	r3, r3, #9
 80086c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80086cc:	4623      	mov	r3, r4
 80086ce:	1e5c      	subs	r4, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086d8:	e01b      	b.n	8008712 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <SDMMC_GetCmdResp3+0x1c>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1eb      	bne.n	80086cc <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2204      	movs	r2, #4
 8008704:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008706:	2304      	movs	r3, #4
 8008708:	e003      	b.n	8008712 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	22c5      	movs	r2, #197	; 0xc5
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bc90      	pop	{r4, r7}
 800871a:	4770      	bx	lr
 800871c:	200000c0 	.word	0x200000c0
 8008720:	10624dd3 	.word	0x10624dd3

08008724 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	460b      	mov	r3, r1
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008732:	4b34      	ldr	r3, [pc, #208]	; (8008804 <SDMMC_GetCmdResp6+0xe0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a34      	ldr	r2, [pc, #208]	; (8008808 <SDMMC_GetCmdResp6+0xe4>)
 8008738:	fba2 2303 	umull	r2, r3, r2, r3
 800873c:	0a5b      	lsrs	r3, r3, #9
 800873e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008742:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008746:	4623      	mov	r3, r4
 8008748:	1e5c      	subs	r4, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800874e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008752:	e052      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0f0      	beq.n	8008746 <SDMMC_GetCmdResp6+0x22>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1eb      	bne.n	8008746 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2204      	movs	r2, #4
 800877e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008780:	2304      	movs	r3, #4
 8008782:	e03a      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008796:	2301      	movs	r3, #1
 8008798:	e02f      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fbad 	bl	8007efa <SDMMC_GetCommandResponse>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d001      	beq.n	80087ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e025      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	22c5      	movs	r2, #197	; 0xc5
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80087b4:	2100      	movs	r1, #0
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff fbac 	bl	8007f14 <SDMMC_GetResponse>
 80087bc:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e011      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087e4:	e009      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087f4:	e001      	b.n	80087fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd90      	pop	{r4, r7, pc}
 8008802:	bf00      	nop
 8008804:	200000c0 	.word	0x200000c0
 8008808:	10624dd3 	.word	0x10624dd3

0800880c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800880c:	b490      	push	{r4, r7}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <SDMMC_GetCmdResp7+0x90>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <SDMMC_GetCmdResp7+0x94>)
 800881a:	fba2 2303 	umull	r2, r3, r2, r3
 800881e:	0a5b      	lsrs	r3, r3, #9
 8008820:	f241 3288 	movw	r2, #5000	; 0x1388
 8008824:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8008828:	4623      	mov	r3, r4
 800882a:	1e5c      	subs	r4, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008834:	e02c      	b.n	8008890 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <SDMMC_GetCmdResp7+0x1c>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1eb      	bne.n	8008828 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2204      	movs	r2, #4
 8008860:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008862:	2304      	movs	r3, #4
 8008864:	e014      	b.n	8008890 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008878:	2301      	movs	r3, #1
 800887a:	e009      	b.n	8008890 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2240      	movs	r2, #64	; 0x40
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800888e:	2300      	movs	r3, #0

}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bc90      	pop	{r4, r7}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	200000c0 	.word	0x200000c0
 80088a0:	10624dd3 	.word	0x10624dd3

080088a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a4:	b084      	sub	sp, #16
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	f107 001c 	add.w	r0, r7, #28
 80088b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d122      	bne.n	8008902 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d105      	bne.n	80088f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f9c8 	bl	8009c8c <USB_CoreReset>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	e01a      	b.n	8008938 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f9bc 	bl	8009c8c <USB_CoreReset>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
 800892a:	e005      	b.n	8008938 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008944:	b004      	add	sp, #16
 8008946:	4770      	bx	lr

08008948 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d165      	bne.n	8008a28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4a3e      	ldr	r2, [pc, #248]	; (8008a58 <USB_SetTurnaroundTime+0x110>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d906      	bls.n	8008972 <USB_SetTurnaroundTime+0x2a>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <USB_SetTurnaroundTime+0x114>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d202      	bcs.n	8008972 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800896c:	230f      	movs	r3, #15
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e05c      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a39      	ldr	r2, [pc, #228]	; (8008a5c <USB_SetTurnaroundTime+0x114>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d306      	bcc.n	8008988 <USB_SetTurnaroundTime+0x40>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a38      	ldr	r2, [pc, #224]	; (8008a60 <USB_SetTurnaroundTime+0x118>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d202      	bcs.n	8008988 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008982:	230e      	movs	r3, #14
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e051      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a35      	ldr	r2, [pc, #212]	; (8008a60 <USB_SetTurnaroundTime+0x118>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d306      	bcc.n	800899e <USB_SetTurnaroundTime+0x56>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a34      	ldr	r2, [pc, #208]	; (8008a64 <USB_SetTurnaroundTime+0x11c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d202      	bcs.n	800899e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008998:	230d      	movs	r3, #13
 800899a:	617b      	str	r3, [r7, #20]
 800899c:	e046      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4a30      	ldr	r2, [pc, #192]	; (8008a64 <USB_SetTurnaroundTime+0x11c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d306      	bcc.n	80089b4 <USB_SetTurnaroundTime+0x6c>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a2f      	ldr	r2, [pc, #188]	; (8008a68 <USB_SetTurnaroundTime+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d802      	bhi.n	80089b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089ae:	230c      	movs	r3, #12
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	e03b      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4a2c      	ldr	r2, [pc, #176]	; (8008a68 <USB_SetTurnaroundTime+0x120>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d906      	bls.n	80089ca <USB_SetTurnaroundTime+0x82>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4a2b      	ldr	r2, [pc, #172]	; (8008a6c <USB_SetTurnaroundTime+0x124>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d802      	bhi.n	80089ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089c4:	230b      	movs	r3, #11
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e030      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	4a27      	ldr	r2, [pc, #156]	; (8008a6c <USB_SetTurnaroundTime+0x124>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d906      	bls.n	80089e0 <USB_SetTurnaroundTime+0x98>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <USB_SetTurnaroundTime+0x128>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d802      	bhi.n	80089e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089da:	230a      	movs	r3, #10
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e025      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4a23      	ldr	r2, [pc, #140]	; (8008a70 <USB_SetTurnaroundTime+0x128>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d906      	bls.n	80089f6 <USB_SetTurnaroundTime+0xae>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4a22      	ldr	r2, [pc, #136]	; (8008a74 <USB_SetTurnaroundTime+0x12c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d202      	bcs.n	80089f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089f0:	2309      	movs	r3, #9
 80089f2:	617b      	str	r3, [r7, #20]
 80089f4:	e01a      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <USB_SetTurnaroundTime+0x12c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d306      	bcc.n	8008a0c <USB_SetTurnaroundTime+0xc4>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <USB_SetTurnaroundTime+0x130>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d802      	bhi.n	8008a0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a06:	2308      	movs	r3, #8
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e00f      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <USB_SetTurnaroundTime+0x130>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d906      	bls.n	8008a22 <USB_SetTurnaroundTime+0xda>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <USB_SetTurnaroundTime+0x134>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d202      	bcs.n	8008a22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a1c:	2307      	movs	r3, #7
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e004      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a22:	2306      	movs	r3, #6
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	e001      	b.n	8008a2c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a28:	2309      	movs	r3, #9
 8008a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	029b      	lsls	r3, r3, #10
 8008a40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a44:	431a      	orrs	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	00d8acbf 	.word	0x00d8acbf
 8008a5c:	00e4e1c0 	.word	0x00e4e1c0
 8008a60:	00f42400 	.word	0x00f42400
 8008a64:	01067380 	.word	0x01067380
 8008a68:	011a499f 	.word	0x011a499f
 8008a6c:	01312cff 	.word	0x01312cff
 8008a70:	014ca43f 	.word	0x014ca43f
 8008a74:	016e3600 	.word	0x016e3600
 8008a78:	01a6ab1f 	.word	0x01a6ab1f
 8008a7c:	01e84800 	.word	0x01e84800

08008a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f023 0201 	bic.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d106      	bne.n	8008af0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e00b      	b.n	8008b08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60da      	str	r2, [r3, #12]
 8008b02:	e001      	b.n	8008b08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e003      	b.n	8008b10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008b08:	2032      	movs	r0, #50	; 0x32
 8008b0a:	f7f7 fd81 	bl	8000610 <HAL_Delay>

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b18:	b084      	sub	sp, #16
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	e009      	b.n	8008b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	3340      	adds	r3, #64	; 0x40
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b0e      	cmp	r3, #14
 8008b50:	d9f2      	bls.n	8008b38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d112      	bne.n	8008b7e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	e005      	b.n	8008b8a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b90:	461a      	mov	r2, r3
 8008b92:	2300      	movs	r3, #0
 8008b94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	680b      	ldr	r3, [r1, #0]
 8008ba8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008baa:	2103      	movs	r1, #3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f93d 	bl	8008e2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bb2:	2110      	movs	r1, #16
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8f1 	bl	8008d9c <USB_FlushTxFifo>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f90f 	bl	8008de8 <USB_FlushRxFifo>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	461a      	mov	r2, r3
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	461a      	mov	r2, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	e043      	b.n	8008c86 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c14:	d118      	bne.n	8008c48 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	e013      	b.n	8008c5a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	e008      	b.n	8008c5a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	461a      	mov	r2, r3
 8008c56:	2300      	movs	r3, #0
 8008c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	461a      	mov	r2, r3
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	3301      	adds	r3, #1
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3b7      	bcc.n	8008bfe <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	e043      	b.n	8008d1c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008caa:	d118      	bne.n	8008cde <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	e013      	b.n	8008cf0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	e008      	b.n	8008cf0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cea:	461a      	mov	r2, r3
 8008cec:	2300      	movs	r3, #0
 8008cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d3b7      	bcc.n	8008c94 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f043 0210 	orr.w	r2, r3, #16
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <USB_DevInit+0x280>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f043 0208 	orr.w	r2, r3, #8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d107      	bne.n	8008d86 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d7e:	f043 0304 	orr.w	r3, r3, #4
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d92:	b004      	add	sp, #16
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	803c3800 	.word	0x803c3800

08008d9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	019b      	lsls	r3, r3, #6
 8008dae:	f043 0220 	orr.w	r2, r3, #32
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <USB_FlushTxFifo+0x48>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d901      	bls.n	8008dc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e006      	b.n	8008dd6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d0f0      	beq.n	8008db6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	00030d40 	.word	0x00030d40

08008de8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2210      	movs	r2, #16
 8008df8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4a09      	ldr	r2, [pc, #36]	; (8008e28 <USB_FlushRxFifo+0x40>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d901      	bls.n	8008e0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e006      	b.n	8008e1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d0f0      	beq.n	8008dfa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	00030d40 	.word	0x00030d40

08008e2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b087      	sub	sp, #28
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0306 	and.w	r3, r3, #6
 8008e76:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d002      	beq.n	8008e84 <USB_GetDevSpeed+0x26>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b06      	cmp	r3, #6
 8008e82:	d102      	bne.n	8008e8a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e84:	2302      	movs	r3, #2
 8008e86:	75fb      	strb	r3, [r7, #23]
 8008e88:	e001      	b.n	8008e8e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008e8a:	230f      	movs	r3, #15
 8008e8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d13a      	bne.n	8008f2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 030f 	and.w	r3, r3, #15
 8008ec8:	2101      	movs	r1, #1
 8008eca:	fa01 f303 	lsl.w	r3, r1, r3
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	68f9      	ldr	r1, [r7, #12]
 8008ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d155      	bne.n	8008f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	78db      	ldrb	r3, [r3, #3]
 8008f0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	059b      	lsls	r3, r3, #22
 8008f12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f14:	4313      	orrs	r3, r2
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e036      	b.n	8008f9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	2101      	movs	r1, #1
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	68f9      	ldr	r1, [r7, #12]
 8008f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11a      	bne.n	8008f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f82:	430b      	orrs	r3, r1
 8008f84:	4313      	orrs	r3, r2
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	0151      	lsls	r1, r2, #5
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d135      	bne.n	8009034 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fe8:	4013      	ands	r3, r2
 8008fea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	b29b      	uxth	r3, r3
 8009004:	43db      	mvns	r3, r3
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800900c:	4013      	ands	r3, r2
 800900e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	0159      	lsls	r1, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	440b      	add	r3, r1
 8009026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902a:	4619      	mov	r1, r3
 800902c:	4b1f      	ldr	r3, [pc, #124]	; (80090ac <USB_DeactivateEndpoint+0x100>)
 800902e:	4013      	ands	r3, r2
 8009030:	600b      	str	r3, [r1, #0]
 8009032:	e034      	b.n	800909e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	2101      	movs	r1, #1
 8009046:	fa01 f303 	lsl.w	r3, r1, r3
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	43db      	mvns	r3, r3
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009054:	4013      	ands	r3, r2
 8009056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2101      	movs	r1, #1
 800906a:	fa01 f303 	lsl.w	r3, r1, r3
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	43db      	mvns	r3, r3
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009078:	4013      	ands	r3, r2
 800907a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	0159      	lsls	r1, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	440b      	add	r3, r1
 8009092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009096:	4619      	mov	r1, r3
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <USB_DeactivateEndpoint+0x104>)
 800909a:	4013      	ands	r3, r2
 800909c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	ec337800 	.word	0xec337800
 80090b0:	eff37800 	.word	0xeff37800

080090b4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	785b      	ldrb	r3, [r3, #1]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	f040 810a 	bne.w	80092e6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d132      	bne.n	8009140 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	0151      	lsls	r1, r2, #5
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	440a      	add	r2, r1
 8009114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800911c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009138:	0cdb      	lsrs	r3, r3, #19
 800913a:	04db      	lsls	r3, r3, #19
 800913c:	6113      	str	r3, [r2, #16]
 800913e:	e074      	b.n	800922a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915a:	0cdb      	lsrs	r3, r3, #19
 800915c:	04db      	lsls	r3, r3, #19
 800915e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800917e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6959      	ldr	r1, [r3, #20]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	440b      	add	r3, r1
 800919c:	1e59      	subs	r1, r3, #1
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091a6:	04d9      	lsls	r1, r3, #19
 80091a8:	4baf      	ldr	r3, [pc, #700]	; (8009468 <USB_EPStartXfer+0x3b4>)
 80091aa:	400b      	ands	r3, r1
 80091ac:	6939      	ldr	r1, [r7, #16]
 80091ae:	0148      	lsls	r0, r1, #5
 80091b0:	6979      	ldr	r1, [r7, #20]
 80091b2:	4401      	add	r1, r0
 80091b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091b8:	4313      	orrs	r3, r2
 80091ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	691a      	ldr	r2, [r3, #16]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091d2:	6939      	ldr	r1, [r7, #16]
 80091d4:	0148      	lsls	r0, r1, #5
 80091d6:	6979      	ldr	r1, [r7, #20]
 80091d8:	4401      	add	r1, r0
 80091da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091de:	4313      	orrs	r3, r2
 80091e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d11f      	bne.n	800922a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009208:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009228:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009248:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d015      	beq.n	800927e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 8100 	beq.w	800945c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	2101      	movs	r1, #1
 800926e:	fa01 f303 	lsl.w	r3, r1, r3
 8009272:	6979      	ldr	r1, [r7, #20]
 8009274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009278:	4313      	orrs	r3, r2
 800927a:	634b      	str	r3, [r1, #52]	; 0x34
 800927c:	e0ee      	b.n	800945c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928a:	2b00      	cmp	r3, #0
 800928c:	d110      	bne.n	80092b0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	e00f      	b.n	80092d0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68d9      	ldr	r1, [r3, #12]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f9e2 	bl	80096a8 <USB_WritePacket>
 80092e4:	e0ba      	b.n	800945c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009300:	0cdb      	lsrs	r3, r3, #19
 8009302:	04db      	lsls	r3, r3, #19
 8009304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009320:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009324:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009328:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d123      	bne.n	800937a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009348:	6939      	ldr	r1, [r7, #16]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	6979      	ldr	r1, [r7, #20]
 800934e:	4401      	add	r1, r0
 8009350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009354:	4313      	orrs	r3, r2
 8009356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	0151      	lsls	r1, r2, #5
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	440a      	add	r2, r1
 800936e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009376:	6113      	str	r3, [r2, #16]
 8009378:	e033      	b.n	80093e2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	695a      	ldr	r2, [r3, #20]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	4413      	add	r3, r2
 8009384:	1e5a      	subs	r2, r3, #1
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	fbb2 f3f3 	udiv	r3, r2, r3
 800938e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939c:	691a      	ldr	r2, [r3, #16]
 800939e:	89fb      	ldrh	r3, [r7, #14]
 80093a0:	04d9      	lsls	r1, r3, #19
 80093a2:	4b31      	ldr	r3, [pc, #196]	; (8009468 <USB_EPStartXfer+0x3b4>)
 80093a4:	400b      	ands	r3, r1
 80093a6:	6939      	ldr	r1, [r7, #16]
 80093a8:	0148      	lsls	r0, r1, #5
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	4401      	add	r1, r0
 80093ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093b2:	4313      	orrs	r3, r2
 80093b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	89f9      	ldrh	r1, [r7, #14]
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d2:	6939      	ldr	r1, [r7, #16]
 80093d4:	0148      	lsls	r0, r1, #5
 80093d6:	6979      	ldr	r1, [r7, #20]
 80093d8:	4401      	add	r1, r0
 80093da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093de:	4313      	orrs	r3, r2
 80093e0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	78db      	ldrb	r3, [r3, #3]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d128      	bne.n	800943c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d110      	bne.n	800941c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	e00f      	b.n	800943c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800945a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	1ff80000 	.word	0x1ff80000

0800946c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	2b01      	cmp	r3, #1
 8009486:	f040 80ab 	bne.w	80095e0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d132      	bne.n	80094f8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f0:	0cdb      	lsrs	r3, r3, #19
 80094f2:	04db      	lsls	r3, r3, #19
 80094f4:	6113      	str	r3, [r2, #16]
 80094f6:	e04e      	b.n	8009596 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009512:	0cdb      	lsrs	r3, r3, #19
 8009514:	04db      	lsls	r3, r3, #19
 8009516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009532:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009536:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800953a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	695a      	ldr	r2, [r3, #20]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	429a      	cmp	r2, r3
 8009546:	d903      	bls.n	8009550 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	440a      	add	r2, r1
 8009566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800956e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	691a      	ldr	r2, [r3, #16]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	0148      	lsls	r0, r1, #5
 800958a:	68f9      	ldr	r1, [r7, #12]
 800958c:	4401      	add	r1, r0
 800958e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009592:	4313      	orrs	r3, r2
 8009594:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	0151      	lsls	r1, r2, #5
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	440a      	add	r2, r1
 80095ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095b4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d06d      	beq.n	800969a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	2101      	movs	r1, #1
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095da:	4313      	orrs	r3, r2
 80095dc:	634b      	str	r3, [r1, #52]	; 0x34
 80095de:	e05c      	b.n	800969a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fa:	0cdb      	lsrs	r3, r3, #19
 80095fc:	04db      	lsls	r3, r3, #19
 80095fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	440a      	add	r2, r1
 8009616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800961e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009622:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800964e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	0148      	lsls	r0, r1, #5
 800966e:	68f9      	ldr	r1, [r7, #12]
 8009670:	4401      	add	r1, r0
 8009672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009676:	4313      	orrs	r3, r2
 8009678:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	0151      	lsls	r1, r2, #5
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	440a      	add	r2, r1
 8009690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009698:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b089      	sub	sp, #36	; 0x24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	460b      	mov	r3, r1
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80096c6:	88bb      	ldrh	r3, [r7, #4]
 80096c8:	3303      	adds	r3, #3
 80096ca:	089b      	lsrs	r3, r3, #2
 80096cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	e00f      	b.n	80096f4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	031a      	lsls	r2, r3, #12
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e0:	461a      	mov	r2, r3
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3304      	adds	r3, #4
 80096ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	3301      	adds	r3, #1
 80096f2:	61bb      	str	r3, [r7, #24]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3eb      	bcc.n	80096d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3724      	adds	r7, #36	; 0x24
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800970a:	b480      	push	{r7}
 800970c:	b089      	sub	sp, #36	; 0x24
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	4613      	mov	r3, r2
 8009716:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009720:	88fb      	ldrh	r3, [r7, #6]
 8009722:	3303      	adds	r3, #3
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009728:	2300      	movs	r3, #0
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	e00b      	b.n	8009746 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	601a      	str	r2, [r3, #0]
    pDest++;
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3304      	adds	r3, #4
 800973e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	3301      	adds	r3, #1
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	429a      	cmp	r2, r3
 800974c:	d3ef      	bcc.n	800972e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800974e:	69fb      	ldr	r3, [r7, #28]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3724      	adds	r7, #36	; 0x24
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d12c      	bne.n	80097d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	db12      	blt.n	80097b0 <USB_EPSetStall+0x54>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00f      	beq.n	80097b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	e02b      	b.n	800982a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	db12      	blt.n	800980a <USB_EPSetStall+0xae>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00f      	beq.n	800980a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4413      	add	r3, r2
 8009812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	0151      	lsls	r1, r2, #5
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	440a      	add	r2, r1
 8009820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d128      	bne.n	80098a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	78db      	ldrb	r3, [r3, #3]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d003      	beq.n	8009884 <USB_EPClearStall+0x4c>
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	78db      	ldrb	r3, [r3, #3]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d138      	bne.n	80098f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	0151      	lsls	r1, r2, #5
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	440a      	add	r2, r1
 800989a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	e027      	b.n	80098f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	78db      	ldrb	r3, [r3, #3]
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d003      	beq.n	80098d6 <USB_EPClearStall+0x9e>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d10f      	bne.n	80098f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8009910:	2300      	movs	r3, #0
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	e016      	b.n	8009944 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	461a      	mov	r2, r3
 8009924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009928:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009936:	461a      	mov	r2, r3
 8009938:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800993c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	3301      	adds	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b0e      	cmp	r3, #14
 8009948:	d9e5      	bls.n	8009916 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995c:	461a      	mov	r2, r3
 800995e:	2300      	movs	r3, #0
 8009960:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009968:	461a      	mov	r2, r3
 800996a:	2300      	movs	r3, #0
 800996c:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fa3a 	bl	8008de8 <USB_FlushRxFifo>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <USB_StopDevice+0x7e>
  {
    return ret;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	e00b      	b.n	800999a <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8009982:	2110      	movs	r1, #16
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff fa09 	bl	8008d9c <USB_FlushTxFifo>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <USB_StopDevice+0x94>
  {
    return ret;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	e000      	b.n	800999a <USB_StopDevice+0x96>
  }

  return ret;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099dc:	4313      	orrs	r3, r2
 80099de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a08:	f023 0302 	bic.w	r3, r3, #2
 8009a0c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009a0e:	2003      	movs	r0, #3
 8009a10:	f7f6 fdfe 	bl	8000610 <HAL_Delay>

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009a3e:	2003      	movs	r0, #3
 8009a40:	f7f6 fde6 	bl	8000610 <HAL_Delay>

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4013      	ands	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a66:	68fb      	ldr	r3, [r7, #12]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4013      	ands	r3, r2
 8009a96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	0c1b      	lsrs	r3, r3, #16
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	b29b      	uxth	r3, r3
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	4013      	ands	r3, r2
 8009b08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	f003 030f 	and.w	r3, r3, #15
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	fa22 f303 	lsr.w	r3, r2, r3
 8009b48:	01db      	lsls	r3, r3, #7
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	4013      	ands	r3, r2
 8009b64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b66:	68bb      	ldr	r3, [r7, #8]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	371c      	adds	r7, #28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	f003 0301 	and.w	r3, r3, #1
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009baa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009bae:	f023 0307 	bic.w	r3, r3, #7
 8009bb2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 0306 	and.w	r3, r3, #6
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d109      	bne.n	8009bd8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd2:	f043 0303 	orr.w	r3, r3, #3
 8009bd6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	333c      	adds	r3, #60	; 0x3c
 8009c0e:	3304      	adds	r3, #4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4a1c      	ldr	r2, [pc, #112]	; (8009c88 <USB_EP0_OutStart+0x8c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d90a      	bls.n	8009c32 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c2c:	d101      	bne.n	8009c32 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e024      	b.n	8009c7c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c38:	461a      	mov	r2, r3
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c60:	f043 0318 	orr.w	r3, r3, #24
 8009c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c78:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	4f54300a 	.word	0x4f54300a

08009c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a13      	ldr	r2, [pc, #76]	; (8009cf0 <USB_CoreReset+0x64>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d901      	bls.n	8009caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e01b      	b.n	8009ce2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	daf2      	bge.n	8009c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f043 0201 	orr.w	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <USB_CoreReset+0x64>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d901      	bls.n	8009cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e006      	b.n	8009ce2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d0f0      	beq.n	8009cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	00030d40 	.word	0x00030d40

08009cf4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7c1b      	ldrb	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d115      	bne.n	8009d34 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	2101      	movs	r1, #1
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f00d fa1f 	bl	8017154 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d22:	2202      	movs	r2, #2
 8009d24:	2181      	movs	r1, #129	; 0x81
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f00d fa14 	bl	8017154 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d32:	e012      	b.n	8009d5a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009d34:	2340      	movs	r3, #64	; 0x40
 8009d36:	2202      	movs	r2, #2
 8009d38:	2101      	movs	r1, #1
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f00d fa0a 	bl	8017154 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009d48:	2340      	movs	r3, #64	; 0x40
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	2181      	movs	r1, #129	; 0x81
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f00d fa00 	bl	8017154 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8009d5a:	f248 006c 	movw	r0, #32876	; 0x806c
 8009d5e:	f00d fc47 	bl	80175f0 <USBD_static_malloc>
 8009d62:	4602      	mov	r2, r0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8009d74:	2302      	movs	r3, #2
 8009d76:	e003      	b.n	8009d80 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f9da 	bl	800a132 <MSC_BOT_Init>

  return USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8009d94:	2101      	movs	r1, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f00d fa1a 	bl	80171d0 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8009da4:	2181      	movs	r1, #129	; 0x81
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f00d fa12 	bl	80171d0 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa0d 	bl	800a1d2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f00d fc1f 	bl	801760c <USBD_static_free>
    pdev->pClassData  = NULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009df0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d04d      	beq.n	8009ea2 <USBD_MSC_Setup+0xc2>
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	f040 8113 	bne.w	800a032 <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2bfe      	cmp	r3, #254	; 0xfe
 8009e12:	d002      	beq.n	8009e1a <USBD_MSC_Setup+0x3a>
 8009e14:	2bff      	cmp	r3, #255	; 0xff
 8009e16:	d024      	beq.n	8009e62 <USBD_MSC_Setup+0x82>
 8009e18:	e03b      	b.n	8009e92 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d118      	bne.n	8009e54 <USBD_MSC_Setup+0x74>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d114      	bne.n	8009e54 <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da0f      	bge.n	8009e54 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	4798      	blx	r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	461a      	mov	r2, r3
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 fa3a 	bl	800c2c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009e52:	e025      	b.n	8009ea0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f002 f9ca 	bl	800c1f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e60:	e01e      	b.n	8009ea0 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	885b      	ldrh	r3, [r3, #2]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10c      	bne.n	8009e84 <USBD_MSC_Setup+0xa4>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	88db      	ldrh	r3, [r3, #6]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d108      	bne.n	8009e84 <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	db03      	blt.n	8009e84 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f98d 	bl	800a19c <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 8009e82:	e00d      	b.n	8009ea0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f002 f9b2 	bl	800c1f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	e006      	b.n	8009ea0 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f002 f9ab 	bl	800c1f0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e9e:	bf00      	nop
    }
    break;
 8009ea0:	e0ce      	b.n	800a040 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b0b      	cmp	r3, #11
 8009ea8:	f200 80bb 	bhi.w	800a022 <USBD_MSC_Setup+0x242>
 8009eac:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <USBD_MSC_Setup+0xd4>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ee5 	.word	0x08009ee5
 8009eb8:	08009f5b 	.word	0x08009f5b
 8009ebc:	0800a023 	.word	0x0800a023
 8009ec0:	0800a023 	.word	0x0800a023
 8009ec4:	0800a023 	.word	0x0800a023
 8009ec8:	0800a023 	.word	0x0800a023
 8009ecc:	0800a023 	.word	0x0800a023
 8009ed0:	0800a023 	.word	0x0800a023
 8009ed4:	0800a023 	.word	0x0800a023
 8009ed8:	0800a023 	.word	0x0800a023
 8009edc:	08009f0d 	.word	0x08009f0d
 8009ee0:	08009f35 	.word	0x08009f35
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d107      	bne.n	8009efe <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009eee:	f107 030e 	add.w	r3, r7, #14
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f002 f9e5 	bl	800c2c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009efc:	e098      	b.n	800a030 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f002 f975 	bl	800c1f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f06:	2302      	movs	r3, #2
 8009f08:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0a:	e091      	b.n	800a030 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d107      	bne.n	8009f26 <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f002 f9d1 	bl	800c2c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009f24:	e084      	b.n	800a030 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f002 f961 	bl	800c1f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	75fb      	strb	r3, [r7, #23]
      break;
 8009f32:	e07d      	b.n	800a030 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d106      	bne.n	8009f4c <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009f4a:	e071      	b.n	800a030 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f002 f94e 	bl	800c1f0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009f54:	2302      	movs	r3, #2
 8009f56:	75fb      	strb	r3, [r7, #23]
      break;
 8009f58:	e06a      	b.n	800a030 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	889b      	ldrh	r3, [r3, #4]
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f00d f96a 	bl	801723c <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	889b      	ldrh	r3, [r3, #4]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f00d f92d 	bl	80171d0 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	889b      	ldrh	r3, [r3, #4]
 8009f7a:	b25b      	sxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	da23      	bge.n	8009fc8 <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	889b      	ldrh	r3, [r3, #4]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f003 020f 	and.w	r2, r3, #15
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	440b      	add	r3, r1
 8009f96:	3318      	adds	r3, #24
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7c1b      	ldrb	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8009fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa8:	2202      	movs	r2, #2
 8009faa:	2181      	movs	r1, #129	; 0x81
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f00d f8d1 	bl	8017154 <USBD_LL_OpenEP>
 8009fb2:	e005      	b.n	8009fc0 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	2181      	movs	r1, #129	; 0x81
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f00d f8ca 	bl	8017154 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009fc6:	e024      	b.n	800a012 <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	889b      	ldrh	r3, [r3, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 020f 	and.w	r2, r3, #15
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7c1b      	ldrb	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d107      	bne.n	8009ffe <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8009fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f00d f8ac 	bl	8017154 <USBD_LL_OpenEP>
 8009ffc:	e005      	b.n	800a00a <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8009ffe:	2340      	movs	r3, #64	; 0x40
 800a000:	2202      	movs	r2, #2
 800a002:	2101      	movs	r1, #1
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f00d f8a5 	bl	8017154 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	889b      	ldrh	r3, [r3, #4]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa79 	bl	800a512 <MSC_BOT_CplClrFeature>
      break;
 800a020:	e006      	b.n	800a030 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f002 f8e3 	bl	800c1f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a02a:	2302      	movs	r3, #2
 800a02c:	75fb      	strb	r3, [r7, #23]
      break;
 800a02e:	bf00      	nop
    }
    break;
 800a030:	e006      	b.n	800a040 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f002 f8db 	bl	800c1f0 <USBD_CtlError>
    ret = USBD_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	75fb      	strb	r3, [r7, #23]
    break;
 800a03e:	bf00      	nop
  }

  return ret;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop

0800a04c <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f8c9 	bl	800a1f4 <MSC_BOT_DataIn>
  return USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f8ed 	bl	800a25c <MSC_BOT_DataOut>
  return USBD_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	20000040 	.word	0x20000040

0800a0ac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	20000060 	.word	0x20000060

0800a0cc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800a0da:	4b03      	ldr	r3, [pc, #12]	; (800a0e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	20000080 	.word	0x20000080

0800a0ec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	220a      	movs	r2, #10
 800a0f8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800a0fa:	4b03      	ldr	r3, [pc, #12]	; (800a108 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	200000a0 	.word	0x200000a0

0800a10c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a140:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a154:	2200      	movs	r2, #0
 800a156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hmsc->scsi_sense_head = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a160:	2200      	movs	r2, #0
 800a162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2000      	movs	r0, #0
 800a170:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800a172:	2101      	movs	r1, #1
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f00d f861 	bl	801723c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800a17a:	2181      	movs	r1, #129	; 0x81
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f00d f85d 	bl	801723c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a188:	320c      	adds	r2, #12
 800a18a:	231f      	movs	r3, #31
 800a18c:	2101      	movs	r1, #1
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f00d f992 	bl	80174b8 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1aa:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a1be:	320c      	adds	r2, #12
 800a1c0:	231f      	movs	r3, #31
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f00d f977 	bl	80174b8 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1e0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	721a      	strb	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a206:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	7a1b      	ldrb	r3, [r3, #8]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d005      	beq.n	800a21c <MSC_BOT_DataIn+0x28>
 800a210:	2b02      	cmp	r3, #2
 800a212:	db1c      	blt.n	800a24e <MSC_BOT_DataIn+0x5a>
 800a214:	3b03      	subs	r3, #3
 800a216:	2b01      	cmp	r3, #1
 800a218:	d819      	bhi.n	800a24e <MSC_BOT_DataIn+0x5a>
 800a21a:	e013      	b.n	800a244 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a222:	7e59      	ldrb	r1, [r3, #25]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a22a:	331b      	adds	r3, #27
 800a22c:	461a      	mov	r2, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f996 	bl	800a560 <SCSI_ProcessCmd>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	da0b      	bge.n	800a252 <MSC_BOT_DataIn+0x5e>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800a23a:	2101      	movs	r1, #1
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f905 	bl	800a44c <MSC_BOT_SendCSW>
    }
    break;
 800a242:	e006      	b.n	800a252 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800a244:	2100      	movs	r1, #0
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f900 	bl	800a44c <MSC_BOT_SendCSW>

    break;
 800a24c:	e002      	b.n	800a254 <MSC_BOT_DataIn+0x60>

  default:
    break;
 800a24e:	bf00      	nop
 800a250:	e000      	b.n	800a254 <MSC_BOT_DataIn+0x60>
    break;
 800a252:	bf00      	nop
  }
}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a26e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	7a1b      	ldrb	r3, [r3, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <MSC_BOT_DataOut+0x22>
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d004      	beq.n	800a286 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800a27c:	e017      	b.n	800a2ae <MSC_BOT_DataOut+0x52>
    MSC_BOT_CBW_Decode(pdev);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f81a 	bl	800a2b8 <MSC_BOT_CBW_Decode>
    break;
 800a284:	e013      	b.n	800a2ae <MSC_BOT_DataOut+0x52>
    if(SCSI_ProcessCmd(pdev,
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a28c:	7e59      	ldrb	r1, [r3, #25]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a294:	331b      	adds	r3, #27
 800a296:	461a      	mov	r2, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f961 	bl	800a560 <SCSI_ProcessCmd>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da03      	bge.n	800a2ac <MSC_BOT_DataOut+0x50>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f8d0 	bl	800a44c <MSC_BOT_SendCSW>
    break;
 800a2ac:	bf00      	nop
  }
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2c6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800a2d6:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800a2e6:	6353      	str	r3, [r2, #52]	; 0x34

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f00d f91e 	bl	801752c <USBD_LL_GetRxDataSize>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b1f      	cmp	r3, #31
 800a2f4:	d118      	bne.n	800a328 <MSC_BOT_CBW_Decode+0x70>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2fc:	68db      	ldr	r3, [r3, #12]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800a2fe:	4a36      	ldr	r2, [pc, #216]	; (800a3d8 <MSC_BOT_CBW_Decode+0x120>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d111      	bne.n	800a328 <MSC_BOT_CBW_Decode+0x70>
        (hmsc->cbw.bLUN > 1U) ||
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a30a:	7e5b      	ldrb	r3, [r3, #25]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d80b      	bhi.n	800a328 <MSC_BOT_CBW_Decode+0x70>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a316:	7e9b      	ldrb	r3, [r3, #26]
        (hmsc->cbw.bLUN > 1U) ||
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <MSC_BOT_CBW_Decode+0x70>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a322:	7e9b      	ldrb	r3, [r3, #26]
 800a324:	2b10      	cmp	r3, #16
 800a326:	d90f      	bls.n	800a348 <MSC_BOT_CBW_Decode+0x90>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a32e:	7e59      	ldrb	r1, [r3, #25]
 800a330:	2320      	movs	r3, #32
 800a332:	2205      	movs	r2, #5
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fc84 	bl	800ac42 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2202      	movs	r2, #2
 800a33e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f8b5 	bl	800a4b0 <MSC_BOT_Abort>
 800a346:	e043      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a34e:	7e59      	ldrb	r1, [r3, #25]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a356:	331b      	adds	r3, #27
 800a358:	461a      	mov	r2, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f900 	bl	800a560 <SCSI_ProcessCmd>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	da0c      	bge.n	800a380 <MSC_BOT_CBW_Decode+0xc8>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	7a1b      	ldrb	r3, [r3, #8]
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	d104      	bne.n	800a378 <MSC_BOT_CBW_Decode+0xc0>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800a36e:	2101      	movs	r1, #1
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f86b 	bl	800a44c <MSC_BOT_SendCSW>
 800a376:	e02b      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f899 	bl	800a4b0 <MSC_BOT_Abort>
 800a37e:	e027      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	7a1b      	ldrb	r3, [r3, #8]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d022      	beq.n	800a3ce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d01e      	beq.n	800a3ce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a394:	2b03      	cmp	r3, #3
 800a396:	d01a      	beq.n	800a3ce <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	895b      	ldrh	r3, [r3, #10]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <MSC_BOT_CBW_Decode+0xfc>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f103 010c 	add.w	r1, r3, #12
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	895b      	ldrh	r3, [r3, #10]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f815 	bl	800a3dc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800a3b2:	e00d      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	895b      	ldrh	r3, [r3, #10]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <MSC_BOT_CBW_Decode+0x10e>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f844 	bl	800a44c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800a3c4:	e004      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f872 	bl	800a4b0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800a3cc:	e000      	b.n	800a3d0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800a3ce:	bf00      	nop
    }
  }
}
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	43425355 	.word	0x43425355

0800a3dc <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a3f0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a3f8:	695a      	ldr	r2, [r3, #20]
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d205      	bcs.n	800a40c <MSC_BOT_SendData+0x30>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	e000      	b.n	800a40e <MSC_BOT_SendData+0x32>
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800a422:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2204      	movs	r2, #4
 800a434:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800a436:	8a7b      	ldrh	r3, [r7, #18]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	2181      	movs	r1, #129	; 0x81
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f00d f801 	bl	8017444 <USBD_LL_Transmit>
}
 800a442:	bf00      	nop
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a45e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a466:	461a      	mov	r2, r3
 800a468:	4b10      	ldr	r3, [pc, #64]	; (800a4ac <MSC_BOT_SendCSW+0x60>)
 800a46a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hmsc->csw.bStatus = CSW_Status;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a472:	461a      	mov	r2, r3
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  hmsc->bot_state = USBD_BOT_IDLE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a486:	322c      	adds	r2, #44	; 0x2c
 800a488:	230d      	movs	r3, #13
 800a48a:	2181      	movs	r1, #129	; 0x81
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f00c ffd9 	bl	8017444 <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a498:	320c      	adds	r2, #12
 800a49a:	231f      	movs	r3, #31
 800a49c:	2101      	movs	r1, #1
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f00d f80a 	bl	80174b8 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	53425355 	.word	0x53425355

0800a4b0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4be:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4c6:	7e1b      	ldrb	r3, [r3, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10d      	bne.n	800a4e8 <MSC_BOT_Abort+0x38>
      (hmsc->cbw.dDataLength != 0U) &&
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4d2:	695b      	ldr	r3, [r3, #20]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d007      	beq.n	800a4e8 <MSC_BOT_Abort+0x38>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <MSC_BOT_Abort+0x38>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f00c fee0 	bl	80172a8 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800a4e8:	2181      	movs	r1, #129	; 0x81
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f00c fedc 	bl	80172a8 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	7a5b      	ldrb	r3, [r3, #9]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d108      	bne.n	800a50a <MSC_BOT_Abort+0x5a>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a4fe:	320c      	adds	r2, #12
 800a500:	231f      	movs	r3, #31
 800a502:	2101      	movs	r1, #1
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f00c ffd7 	bl	80174b8 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a524:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	7a5b      	ldrb	r3, [r3, #9]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d107      	bne.n	800a53e <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800a52e:	2181      	movs	r1, #129	; 0x81
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f00c feb9 	bl	80172a8 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	725a      	strb	r2, [r3, #9]
 800a53c:	e00d      	b.n	800a55a <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800a53e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a542:	2b00      	cmp	r3, #0
 800a544:	da08      	bge.n	800a558 <MSC_BOT_CplClrFeature+0x46>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	7a5b      	ldrb	r3, [r3, #9]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d004      	beq.n	800a558 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800a54e:	2101      	movs	r1, #1
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff ff7b 	bl	800a44c <MSC_BOT_SendCSW>
 800a556:	e000      	b.n	800a55a <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800a558:	bf00      	nop
  }
}
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	460b      	mov	r3, r1
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b5a      	cmp	r3, #90	; 0x5a
 800a574:	f200 810e 	bhi.w	800a794 <SCSI_ProcessCmd+0x234>
 800a578:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <SCSI_ProcessCmd+0x20>)
 800a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a6ed 	.word	0x0800a6ed
 800a584:	0800a795 	.word	0x0800a795
 800a588:	0800a795 	.word	0x0800a795
 800a58c:	0800a6fb 	.word	0x0800a6fb
 800a590:	0800a795 	.word	0x0800a795
 800a594:	0800a795 	.word	0x0800a795
 800a598:	0800a795 	.word	0x0800a795
 800a59c:	0800a795 	.word	0x0800a795
 800a5a0:	0800a795 	.word	0x0800a795
 800a5a4:	0800a795 	.word	0x0800a795
 800a5a8:	0800a795 	.word	0x0800a795
 800a5ac:	0800a795 	.word	0x0800a795
 800a5b0:	0800a795 	.word	0x0800a795
 800a5b4:	0800a795 	.word	0x0800a795
 800a5b8:	0800a795 	.word	0x0800a795
 800a5bc:	0800a795 	.word	0x0800a795
 800a5c0:	0800a795 	.word	0x0800a795
 800a5c4:	0800a795 	.word	0x0800a795
 800a5c8:	0800a709 	.word	0x0800a709
 800a5cc:	0800a795 	.word	0x0800a795
 800a5d0:	0800a795 	.word	0x0800a795
 800a5d4:	0800a795 	.word	0x0800a795
 800a5d8:	0800a795 	.word	0x0800a795
 800a5dc:	0800a795 	.word	0x0800a795
 800a5e0:	0800a795 	.word	0x0800a795
 800a5e4:	0800a795 	.word	0x0800a795
 800a5e8:	0800a733 	.word	0x0800a733
 800a5ec:	0800a717 	.word	0x0800a717
 800a5f0:	0800a795 	.word	0x0800a795
 800a5f4:	0800a795 	.word	0x0800a795
 800a5f8:	0800a725 	.word	0x0800a725
 800a5fc:	0800a795 	.word	0x0800a795
 800a600:	0800a795 	.word	0x0800a795
 800a604:	0800a795 	.word	0x0800a795
 800a608:	0800a795 	.word	0x0800a795
 800a60c:	0800a74f 	.word	0x0800a74f
 800a610:	0800a795 	.word	0x0800a795
 800a614:	0800a75d 	.word	0x0800a75d
 800a618:	0800a795 	.word	0x0800a795
 800a61c:	0800a795 	.word	0x0800a795
 800a620:	0800a76b 	.word	0x0800a76b
 800a624:	0800a795 	.word	0x0800a795
 800a628:	0800a779 	.word	0x0800a779
 800a62c:	0800a795 	.word	0x0800a795
 800a630:	0800a795 	.word	0x0800a795
 800a634:	0800a795 	.word	0x0800a795
 800a638:	0800a795 	.word	0x0800a795
 800a63c:	0800a787 	.word	0x0800a787
 800a640:	0800a795 	.word	0x0800a795
 800a644:	0800a795 	.word	0x0800a795
 800a648:	0800a795 	.word	0x0800a795
 800a64c:	0800a795 	.word	0x0800a795
 800a650:	0800a795 	.word	0x0800a795
 800a654:	0800a795 	.word	0x0800a795
 800a658:	0800a795 	.word	0x0800a795
 800a65c:	0800a795 	.word	0x0800a795
 800a660:	0800a795 	.word	0x0800a795
 800a664:	0800a795 	.word	0x0800a795
 800a668:	0800a795 	.word	0x0800a795
 800a66c:	0800a795 	.word	0x0800a795
 800a670:	0800a795 	.word	0x0800a795
 800a674:	0800a795 	.word	0x0800a795
 800a678:	0800a795 	.word	0x0800a795
 800a67c:	0800a795 	.word	0x0800a795
 800a680:	0800a795 	.word	0x0800a795
 800a684:	0800a795 	.word	0x0800a795
 800a688:	0800a795 	.word	0x0800a795
 800a68c:	0800a795 	.word	0x0800a795
 800a690:	0800a795 	.word	0x0800a795
 800a694:	0800a795 	.word	0x0800a795
 800a698:	0800a795 	.word	0x0800a795
 800a69c:	0800a795 	.word	0x0800a795
 800a6a0:	0800a795 	.word	0x0800a795
 800a6a4:	0800a795 	.word	0x0800a795
 800a6a8:	0800a795 	.word	0x0800a795
 800a6ac:	0800a795 	.word	0x0800a795
 800a6b0:	0800a795 	.word	0x0800a795
 800a6b4:	0800a795 	.word	0x0800a795
 800a6b8:	0800a795 	.word	0x0800a795
 800a6bc:	0800a795 	.word	0x0800a795
 800a6c0:	0800a795 	.word	0x0800a795
 800a6c4:	0800a795 	.word	0x0800a795
 800a6c8:	0800a795 	.word	0x0800a795
 800a6cc:	0800a795 	.word	0x0800a795
 800a6d0:	0800a795 	.word	0x0800a795
 800a6d4:	0800a795 	.word	0x0800a795
 800a6d8:	0800a795 	.word	0x0800a795
 800a6dc:	0800a795 	.word	0x0800a795
 800a6e0:	0800a795 	.word	0x0800a795
 800a6e4:	0800a795 	.word	0x0800a795
 800a6e8:	0800a741 	.word	0x0800a741
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 f85c 	bl	800a7b0 <SCSI_TestUnitReady>
    break;
 800a6f8:	e055      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800a6fa:	7afb      	ldrb	r3, [r7, #11]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4619      	mov	r1, r3
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fa1b 	bl	800ab3c <SCSI_RequestSense>
    break;
 800a706:	e04e      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	4619      	mov	r1, r3
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 f88a 	bl	800a828 <SCSI_Inquiry>
    break;
 800a714:	e047      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800a716:	7afb      	ldrb	r3, [r7, #11]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 fada 	bl	800acd6 <SCSI_StartStopUnit>
    break;
 800a722:	e040      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	4619      	mov	r1, r3
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fad3 	bl	800acd6 <SCSI_StartStopUnit>
    break;
 800a730:	e039      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	4619      	mov	r1, r3
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f9af 	bl	800aa9c <SCSI_ModeSense6>
    break;
 800a73e:	e032      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800a740:	7afb      	ldrb	r3, [r7, #11]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4619      	mov	r1, r3
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f9d0 	bl	800aaec <SCSI_ModeSense10>
    break;
 800a74c:	e02b      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a74e:	7afb      	ldrb	r3, [r7, #11]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	4619      	mov	r1, r3
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f93d 	bl	800a9d4 <SCSI_ReadFormatCapacity>
    break;
 800a75a:	e024      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4619      	mov	r1, r3
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f8c0 	bl	800a8e8 <SCSI_ReadCapacity10>
    break;
 800a768:	e01d      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800a76a:	7afb      	ldrb	r3, [r7, #11]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	4619      	mov	r1, r3
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fac5 	bl	800ad00 <SCSI_Read10>
    break;
 800a776:	e016      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800a778:	7afb      	ldrb	r3, [r7, #11]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4619      	mov	r1, r3
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fb55 	bl	800ae2e <SCSI_Write10>
    break;
 800a784:	e00f      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800a786:	7afb      	ldrb	r3, [r7, #11]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	4619      	mov	r1, r3
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fc09 	bl	800afa4 <SCSI_Verify10>
    break;
 800a792:	e008      	b.n	800a7a6 <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a794:	7af9      	ldrb	r1, [r7, #11]
 800a796:	2320      	movs	r3, #32
 800a798:	2205      	movs	r2, #5
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 fa51 	bl	800ac42 <SCSI_SenseCode>
    return -1;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	e000      	b.n	800a7a8 <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a7c4:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <SCSI_TestUnitReady+0x3a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a7d8:	7e59      	ldrb	r1, [r3, #25]
 800a7da:	2320      	movs	r3, #32
 800a7dc:	2205      	movs	r2, #5
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fa2f 	bl	800ac42 <SCSI_SenseCode>

    return -1;
 800a7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e8:	e019      	b.n	800a81e <SCSI_TestUnitReady+0x6e>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	7afa      	ldrb	r2, [r7, #11]
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <SCSI_TestUnitReady+0x66>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7fe:	7af9      	ldrb	r1, [r7, #11]
 800a800:	233a      	movs	r3, #58	; 0x3a
 800a802:	2202      	movs	r2, #2
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fa1c 	bl	800ac42 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2205      	movs	r2, #5
 800a80e:	721a      	strb	r2, [r3, #8]

    return -1;
 800a810:	f04f 33ff 	mov.w	r3, #4294967295
 800a814:	e003      	b.n	800a81e <SCSI_TestUnitReady+0x6e>
  }
  hmsc->bot_data_length = 0U;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	815a      	strh	r2, [r3, #10]

  return 0;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800a828:	b480      	push	{r7}
 800a82a:	b089      	sub	sp, #36	; 0x24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	460b      	mov	r3, r1
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a83c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3301      	adds	r3, #1
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d014      	beq.n	800a876 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800a84c:	2307      	movs	r3, #7
 800a84e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	8bfa      	ldrh	r2, [r7, #30]
 800a854:	815a      	strh	r2, [r3, #10]

    while (len)
 800a856:	e00a      	b.n	800a86e <SCSI_Inquiry+0x46>
    {
      len--;
 800a858:	8bfb      	ldrh	r3, [r7, #30]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800a85e:	8bfa      	ldrh	r2, [r7, #30]
 800a860:	8bfb      	ldrh	r3, [r7, #30]
 800a862:	4920      	ldr	r1, [pc, #128]	; (800a8e4 <SCSI_Inquiry+0xbc>)
 800a864:	5c89      	ldrb	r1, [r1, r2]
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	4413      	add	r3, r2
 800a86a:	460a      	mov	r2, r1
 800a86c:	731a      	strb	r2, [r3, #12]
    while (len)
 800a86e:	8bfb      	ldrh	r3, [r7, #30]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1f1      	bne.n	800a858 <SCSI_Inquiry+0x30>
 800a874:	e02e      	b.n	800a8d4 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a87c:	69d9      	ldr	r1, [r3, #28]
 800a87e:	7afa      	ldrb	r2, [r7, #11]
 800a880:	4613      	mov	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	3304      	adds	r3, #4
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b29b      	uxth	r3, r3
 800a894:	3305      	adds	r3, #5
 800a896:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3304      	adds	r3, #4
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	8bfa      	ldrh	r2, [r7, #30]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d303      	bcc.n	800a8ae <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	8bfa      	ldrh	r2, [r7, #30]
 800a8b2:	815a      	strh	r2, [r3, #10]

    while (len)
 800a8b4:	e00b      	b.n	800a8ce <SCSI_Inquiry+0xa6>
    {
      len--;
 800a8b6:	8bfb      	ldrh	r3, [r7, #30]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800a8bc:	8bfb      	ldrh	r3, [r7, #30]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	441a      	add	r2, r3
 800a8c2:	8bfb      	ldrh	r3, [r7, #30]
 800a8c4:	7811      	ldrb	r1, [r2, #0]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	460a      	mov	r2, r1
 800a8cc:	731a      	strb	r2, [r3, #12]
    while (len)
 800a8ce:	8bfb      	ldrh	r3, [r7, #30]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1f0      	bne.n	800a8b6 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3724      	adds	r7, #36	; 0x24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	0801a71c 	.word	0x0801a71c

0800a8e8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800a8e8:	b590      	push	{r4, r7, lr}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a8fc:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a904:	685c      	ldr	r4, [r3, #4]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a90c:	3360      	adds	r3, #96	; 0x60
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800a914:	325e      	adds	r2, #94	; 0x5e
 800a916:	7af8      	ldrb	r0, [r7, #11]
 800a918:	4619      	mov	r1, r3
 800a91a:	47a0      	blx	r4
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d008      	beq.n	800a934 <SCSI_ReadCapacity10+0x4c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a922:	7af9      	ldrb	r1, [r7, #11]
 800a924:	233a      	movs	r3, #58	; 0x3a
 800a926:	2202      	movs	r2, #2
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f98a 	bl	800ac42 <SCSI_SenseCode>
    return -1;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	e04b      	b.n	800a9cc <SCSI_ReadCapacity10+0xe4>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a93a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93c:	3b01      	subs	r3, #1
 800a93e:	0e1b      	lsrs	r3, r3, #24
 800a940:	b2da      	uxtb	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a94c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94e:	3b01      	subs	r3, #1
 800a950:	0c1b      	lsrs	r3, r3, #16
 800a952:	b2da      	uxtb	r2, r3
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a95e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a960:	3b01      	subs	r3, #1
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	b2da      	uxtb	r2, r3
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a972:	b2db      	uxtb	r3, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a986:	161b      	asrs	r3, r3, #24
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a998:	141b      	asrs	r3, r3, #16
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2208      	movs	r2, #8
 800a9c8:	815a      	strh	r2, [r3, #10]
    return 0;
 800a9ca:	2300      	movs	r3, #0
  }
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd90      	pop	{r4, r7, pc}

0800a9d4 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a9e8:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	83fb      	strh	r3, [r7, #30]
 800a9ee:	e007      	b.n	800aa00 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800a9f0:	8bfb      	ldrh	r3, [r7, #30]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800a9fa:	8bfb      	ldrh	r3, [r7, #30]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	83fb      	strh	r3, [r7, #30]
 800aa00:	8bfb      	ldrh	r3, [r7, #30]
 800aa02:	2b0b      	cmp	r3, #11
 800aa04:	d9f4      	bls.n	800a9f0 <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f107 0216 	add.w	r2, r7, #22
 800aa12:	f107 0110 	add.w	r1, r7, #16
 800aa16:	7af8      	ldrb	r0, [r7, #11]
 800aa18:	4798      	blx	r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d008      	beq.n	800aa32 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aa20:	7af9      	ldrb	r1, [r7, #11]
 800aa22:	233a      	movs	r3, #58	; 0x3a
 800aa24:	2202      	movs	r2, #2
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f90b 	bl	800ac42 <SCSI_SenseCode>
    return -1;
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa30:	e030      	b.n	800aa94 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2208      	movs	r2, #8
 800aa36:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	0e1b      	lsrs	r3, r3, #24
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	0c1b      	lsrs	r3, r3, #16
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	0a1b      	lsrs	r3, r3, #8
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	3b01      	subs	r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800aa6e:	8afb      	ldrh	r3, [r7, #22]
 800aa70:	141b      	asrs	r3, r3, #16
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800aa78:	8afb      	ldrh	r3, [r7, #22]
 800aa7a:	0a1b      	lsrs	r3, r3, #8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800aa84:	8afb      	ldrh	r3, [r7, #22]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	220c      	movs	r2, #12
 800aa90:	815a      	strh	r2, [r3, #10]
    return 0;
 800aa92:	2300      	movs	r3, #0
  }
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800aab0:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800aab2:	2308      	movs	r3, #8
 800aab4:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	8afa      	ldrh	r2, [r7, #22]
 800aaba:	815a      	strh	r2, [r3, #10]

  while (len)
 800aabc:	e00a      	b.n	800aad4 <SCSI_ModeSense6+0x38>
  {
    len--;
 800aabe:	8afb      	ldrh	r3, [r7, #22]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800aac4:	8afa      	ldrh	r2, [r7, #22]
 800aac6:	8afb      	ldrh	r3, [r7, #22]
 800aac8:	4907      	ldr	r1, [pc, #28]	; (800aae8 <SCSI_ModeSense6+0x4c>)
 800aaca:	5c89      	ldrb	r1, [r1, r2]
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4413      	add	r3, r2
 800aad0:	460a      	mov	r2, r1
 800aad2:	731a      	strb	r2, [r3, #12]
  while (len)
 800aad4:	8afb      	ldrh	r3, [r7, #22]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f1      	bne.n	800aabe <SCSI_ModeSense6+0x22>
  }
  return 0;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	371c      	adds	r7, #28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	0801a724 	.word	0x0801a724

0800aaec <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800aafa:	2308      	movs	r3, #8
 800aafc:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ab04:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	8afa      	ldrh	r2, [r7, #22]
 800ab0a:	815a      	strh	r2, [r3, #10]

  while (len)
 800ab0c:	e00a      	b.n	800ab24 <SCSI_ModeSense10+0x38>
  {
    len--;
 800ab0e:	8afb      	ldrh	r3, [r7, #22]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800ab14:	8afa      	ldrh	r2, [r7, #22]
 800ab16:	8afb      	ldrh	r3, [r7, #22]
 800ab18:	4907      	ldr	r1, [pc, #28]	; (800ab38 <SCSI_ModeSense10+0x4c>)
 800ab1a:	5c89      	ldrb	r1, [r1, r2]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	4413      	add	r3, r2
 800ab20:	460a      	mov	r2, r1
 800ab22:	731a      	strb	r2, [r3, #12]
  while (len)
 800ab24:	8afb      	ldrh	r3, [r7, #22]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1f1      	bne.n	800ab0e <SCSI_ModeSense10+0x22>
  }

  return 0;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	0801a72c 	.word	0x0801a72c

0800ab3c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	460b      	mov	r3, r1
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ab50:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]
 800ab56:	e007      	b.n	800ab68 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	3301      	adds	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b11      	cmp	r3, #17
 800ab6c:	d9f4      	bls.n	800ab58 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2270      	movs	r2, #112	; 0x70
 800ab72:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	220c      	movs	r2, #12
 800ab78:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab80:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d042      	beq.n	800ac18 <SCSI_RequestSense+0xdc>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba2:	3307      	adds	r3, #7
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	4413      	add	r3, r2
 800aba8:	791a      	ldrb	r2, [r3, #4]
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbe:	3307      	adds	r3, #7
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4413      	add	r3, r2
 800abc4:	7a5a      	ldrb	r2, [r3, #9]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abda:	3307      	adds	r3, #7
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	4413      	add	r3, r2
 800abe0:	7a1a      	ldrb	r2, [r3, #8]
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800abf0:	3301      	adds	r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800abfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d105      	bne.n	800ac18 <SCSI_RequestSense+0xdc>
    {
      hmsc->scsi_sense_head = 0U;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2212      	movs	r2, #18
 800ac1c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3304      	adds	r3, #4
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	2b12      	cmp	r3, #18
 800ac26:	d805      	bhi.n	800ac34 <SCSI_RequestSense+0xf8>
  {
    hmsc->bot_data_length = params[4];
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4603      	mov	r3, r0
 800ac52:	70fb      	strb	r3, [r7, #3]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70bb      	strb	r3, [r7, #2]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ac62:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac74:	3307      	adds	r3, #7
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	78ba      	ldrb	r2, [r7, #2]
 800ac7c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac8e:	3307      	adds	r3, #7
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	4413      	add	r3, r2
 800ac94:	2200      	movs	r2, #0
 800ac96:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ac9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aca2:	3301      	adds	r3, #1
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d105      	bne.n	800acca <SCSI_SenseCode+0x88>
  {
    hmsc->scsi_sense_tail = 0U;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b087      	sub	sp, #28
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	460b      	mov	r3, r1
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800acea:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2200      	movs	r2, #0
 800acf0:	815a      	strh	r2, [r3, #10]
  return 0;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	371c      	adds	r7, #28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad14:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	7a1b      	ldrb	r3, [r3, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d179      	bne.n	800ae12 <SCSI_Read10+0x112>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad24:	7e1b      	ldrb	r3, [r3, #24]
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	db0b      	blt.n	800ad44 <SCSI_Read10+0x44>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad32:	7e59      	ldrb	r1, [r3, #25]
 800ad34:	2320      	movs	r3, #32
 800ad36:	2205      	movs	r2, #5
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7ff ff82 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad42:	e070      	b.n	800ae26 <SCSI_Read10+0x126>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	7afa      	ldrb	r2, [r7, #11]
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d008      	beq.n	800ad6a <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad58:	7af9      	ldrb	r1, [r7, #11]
 800ad5a:	233a      	movs	r3, #58	; 0x3a
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7ff ff6f 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295
 800ad68:	e05d      	b.n	800ae26 <SCSI_Read10+0x126>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3303      	adds	r3, #3
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad7a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ad84:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	3205      	adds	r2, #5
 800ad8a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ad8c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800ad94:	6653      	str	r3, [r2, #100]	; 0x64

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3307      	adds	r3, #7
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	3208      	adds	r2, #8
 800ada2:	7812      	ldrb	r2, [r2, #0]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800adac:	6693      	str	r3, [r2, #104]	; 0x68

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800adb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800adbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbe:	7af9      	ldrb	r1, [r7, #11]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f924 	bl	800b00e <SCSI_CheckAddressRange>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da02      	bge.n	800add2 <SCSI_Read10+0xd2>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e029      	b.n	800ae26 <SCSI_Read10+0x126>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2202      	movs	r2, #2
 800add6:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800adde:	695a      	ldr	r2, [r3, #20]
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ade6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade8:	6979      	ldr	r1, [r7, #20]
 800adea:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800adee:	f8b1 105e 	ldrh.w	r1, [r1, #94]	; 0x5e
 800adf2:	fb01 f303 	mul.w	r3, r1, r3
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d00b      	beq.n	800ae12 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae00:	7e59      	ldrb	r1, [r3, #25]
 800ae02:	2320      	movs	r3, #32
 800ae04:	2205      	movs	r2, #5
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff ff1b 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	e009      	b.n	800ae26 <SCSI_Read10+0x126>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ae18:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f918 	bl	800b054 <SCSI_ProcessRead>
 800ae24:	4603      	mov	r3, r0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b086      	sub	sp, #24
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	460b      	mov	r3, r1
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ae42:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	7a1b      	ldrb	r3, [r3, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 80a1 	bne.w	800af90 <SCSI_Write10+0x162>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae54:	7e1b      	ldrb	r3, [r3, #24]
 800ae56:	b25b      	sxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da0b      	bge.n	800ae74 <SCSI_Write10+0x46>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae62:	7e59      	ldrb	r1, [r3, #25]
 800ae64:	2320      	movs	r3, #32
 800ae66:	2205      	movs	r2, #5
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff feea 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae72:	e093      	b.n	800af9c <SCSI_Write10+0x16e>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	7afa      	ldrb	r2, [r7, #11]
 800ae7e:	4610      	mov	r0, r2
 800ae80:	4798      	blx	r3
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d008      	beq.n	800ae9a <SCSI_Write10+0x6c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae88:	7af9      	ldrb	r1, [r7, #11]
 800ae8a:	233a      	movs	r3, #58	; 0x3a
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff fed7 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295
 800ae98:	e080      	b.n	800af9c <SCSI_Write10+0x16e>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	7afa      	ldrb	r2, [r7, #11]
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d008      	beq.n	800aec0 <SCSI_Write10+0x92>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aeae:	7af9      	ldrb	r1, [r7, #11]
 800aeb0:	2327      	movs	r3, #39	; 0x27
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f7ff fec4 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295
 800aebe:	e06d      	b.n	800af9c <SCSI_Write10+0x16e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3302      	adds	r3, #2
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3303      	adds	r3, #3
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aed0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3304      	adds	r3, #4
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aeda:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	3205      	adds	r2, #5
 800aee0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aee2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800aeea:	6653      	str	r3, [r2, #100]	; 0x64

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3307      	adds	r3, #7
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	3208      	adds	r2, #8
 800aef8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aefa:	4313      	orrs	r3, r2
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800af02:	6693      	str	r3, [r2, #104]	; 0x68

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af14:	7af9      	ldrb	r1, [r7, #11]
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 f879 	bl	800b00e <SCSI_CheckAddressRange>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da02      	bge.n	800af28 <SCSI_Write10+0xfa>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	e039      	b.n	800af9c <SCSI_Write10+0x16e>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800af36:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800af3a:	fb02 f303 	mul.w	r3, r2, r3
 800af3e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d00b      	beq.n	800af66 <SCSI_Write10+0x138>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af54:	7e59      	ldrb	r1, [r3, #25]
 800af56:	2320      	movs	r3, #32
 800af58:	2205      	movs	r2, #5
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fe71 	bl	800ac42 <SCSI_SenseCode>
      return -1;
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	e01a      	b.n	800af9c <SCSI_Write10+0x16e>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af6c:	bf28      	it	cs
 800af6e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800af72:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2201      	movs	r2, #1
 800af78:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f103 020c 	add.w	r2, r3, #12
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	b29b      	uxth	r3, r3
 800af84:	2101      	movs	r1, #1
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f00c fa96 	bl	80174b8 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	e005      	b.n	800af9c <SCSI_Write10+0x16e>
    return SCSI_ProcessWrite(pdev, lun);
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f8e2 	bl	800b15e <SCSI_ProcessWrite>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	460b      	mov	r3, r1
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800afb8:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3301      	adds	r3, #1
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800afc8:	7af9      	ldrb	r1, [r7, #11]
 800afca:	2324      	movs	r3, #36	; 0x24
 800afcc:	2205      	movs	r2, #5
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff fe37 	bl	800ac42 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295
 800afd8:	e015      	b.n	800b006 <SCSI_Verify10+0x62>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afe0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afea:	7af9      	ldrb	r1, [r7, #11]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f80e 	bl	800b00e <SCSI_CheckAddressRange>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da02      	bge.n	800affe <SCSI_Verify10+0x5a>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800aff8:	f04f 33ff 	mov.w	r3, #4294967295
 800affc:	e003      	b.n	800b006 <SCSI_Verify10+0x62>
  }
  hmsc->bot_data_length = 0U;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2200      	movs	r2, #0
 800b002:	815a      	strh	r2, [r3, #10]
  return 0;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	460b      	mov	r3, r1
 800b01c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b024:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	441a      	add	r2, r3
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b034:	429a      	cmp	r2, r3
 800b036:	d908      	bls.n	800b04a <SCSI_CheckAddressRange+0x3c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b038:	7af9      	ldrb	r1, [r7, #11]
 800b03a:	2321      	movs	r3, #33	; 0x21
 800b03c:	2205      	movs	r2, #5
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fdff 	bl	800ac42 <SCSI_SenseCode>
    return -1;
 800b044:	f04f 33ff 	mov.w	r3, #4294967295
 800b048:	e000      	b.n	800b04c <SCSI_CheckAddressRange+0x3e>
  }
  return 0;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b066:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b076:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800b07a:	fb02 f303 	mul.w	r3, r2, r3
 800b07e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b086:	bf28      	it	cs
 800b088:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800b08c:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b094:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	78f8      	ldrb	r0, [r7, #3]
 800b0ba:	47a0      	blx	r4
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da08      	bge.n	800b0d4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b0c2:	78f9      	ldrb	r1, [r7, #3]
 800b0c4:	2311      	movs	r3, #17
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff fdba 	bl	800ac42 <SCSI_SenseCode>
    return -1;
 800b0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d2:	e040      	b.n	800b156 <SCSI_ProcessRead+0x102>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f103 020c 	add.w	r2, r3, #12
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2181      	movs	r1, #129	; 0x81
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f00c f9af 	bl	8017444 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b100:	4413      	add	r3, r2
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b108:	6653      	str	r3, [r2, #100]	; 0x64
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b110:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b11c:	4619      	mov	r1, r3
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	fbb3 f3f1 	udiv	r3, r3, r1
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b12c:	6693      	str	r3, [r2, #104]	; 0x68

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b140:	6353      	str	r3, [r2, #52]	; 0x34

  if (hmsc->scsi_blk_len == 0U)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <SCSI_ProcessRead+0x100>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2203      	movs	r2, #3
 800b152:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd90      	pop	{r4, r7, pc}

0800b15e <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800b15e:	b590      	push	{r4, r7, lr}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b170:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b180:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800b184:	fb02 f303 	mul.w	r3, r2, r3
 800b188:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b190:	bf28      	it	cs
 800b192:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800b196:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b19e:	695c      	ldr	r4, [r3, #20]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f103 010c 	add.w	r1, r3, #12
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	78f8      	ldrb	r0, [r7, #3]
 800b1c4:	47a0      	blx	r4
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	da08      	bge.n	800b1de <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b1cc:	78f9      	ldrb	r1, [r7, #3]
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fd35 	bl	800ac42 <SCSI_SenseCode>

    return -1;
 800b1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1dc:	e053      	b.n	800b286 <SCSI_ProcessWrite+0x128>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1f8:	4413      	add	r3, r2
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b200:	6653      	str	r3, [r2, #100]	; 0x64
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b208:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b214:	4619      	mov	r1, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	fbb3 f3f1 	udiv	r3, r3, r1
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b224:	6693      	str	r3, [r2, #104]	; 0x68

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b22c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b238:	6353      	str	r3, [r2, #52]	; 0x34

  if (hmsc->scsi_blk_len == 0U)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <SCSI_ProcessWrite+0xf2>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800b246:	2100      	movs	r1, #0
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff f8ff 	bl	800a44c <MSC_BOT_SendCSW>
 800b24e:	e019      	b.n	800b284 <SCSI_ProcessWrite+0x126>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b25e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800b262:	fb02 f303 	mul.w	r3, r2, r3
 800b266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b26a:	bf28      	it	cs
 800b26c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800b270:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f103 020c 	add.w	r2, r3, #12
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	2101      	movs	r1, #1
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f00c f91a 	bl	80174b8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd90      	pop	{r4, r7, pc}

0800b28e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	4613      	mov	r3, r2
 800b29a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e01a      	b.n	800b2dc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	79fa      	ldrb	r2, [r7, #7]
 800b2d2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f00b fe5b 	bl	8016f90 <USBD_LL_Init>

  return USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6852      	ldr	r2, [r2, #4]
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	4611      	mov	r1, r2
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	4798      	blx	r3

    /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f00b fef1 	bl	80170f0 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f00b fe8a 	bl	8017028 <USBD_LL_DeInit>

  return USBD_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b31e:	b480      	push	{r7}
 800b320:	b085      	sub	sp, #20
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d006      	beq.n	800b340 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]
 800b33e:	e001      	b.n	800b344 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b340:	2302      	movs	r3, #2
 800b342:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f00b fe96 	bl	801708c <USBD_LL_Start>

  return USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b083      	sub	sp, #12
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b38c:	2302      	movs	r3, #2
 800b38e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00c      	beq.n	800b3b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	78fa      	ldrb	r2, [r7, #3]
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
  return USBD_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 febd 	bl	800c176 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800b418:	f003 031f 	and.w	r3, r3, #31
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d016      	beq.n	800b44e <USBD_LL_SetupStage+0x6a>
 800b420:	2b02      	cmp	r3, #2
 800b422:	d81c      	bhi.n	800b45e <USBD_LL_SetupStage+0x7a>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <USBD_LL_SetupStage+0x4a>
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d008      	beq.n	800b43e <USBD_LL_SetupStage+0x5a>
 800b42c:	e017      	b.n	800b45e <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa04 	bl	800b844 <USBD_StdDevReq>
    break;
 800b43c:	e01a      	b.n	800b474 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa66 	bl	800b918 <USBD_StdItfReq>
    break;
 800b44c:	e012      	b.n	800b474 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 faa6 	bl	800b9a8 <USBD_StdEPReq>
    break;
 800b45c:	e00a      	b.n	800b474 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800b464:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f00b ff1b 	bl	80172a8 <USBD_LL_StallEP>
    break;
 800b472:	bf00      	nop
  }

  return USBD_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b086      	sub	sp, #24
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	460b      	mov	r3, r1
 800b488:	607a      	str	r2, [r7, #4]
 800b48a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d14b      	bne.n	800b52a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b498:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d134      	bne.n	800b50e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d919      	bls.n	800b4e4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	68da      	ldr	r2, [r3, #12]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	1ad2      	subs	r2, r2, r3
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d203      	bcs.n	800b4d2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	e002      	b.n	800b4d8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 ff20 	bl	800c322 <USBD_CtlContinueRx>
 800b4e2:	e038      	b.n	800b556 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d105      	bne.n	800b506 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 ff1d 	bl	800c346 <USBD_CtlSendStatus>
 800b50c:	e023      	b.n	800b556 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b514:	2b05      	cmp	r3, #5
 800b516:	d11e      	bne.n	800b556 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b520:	2100      	movs	r1, #0
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f00b fec0 	bl	80172a8 <USBD_LL_StallEP>
 800b528:	e015      	b.n	800b556 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00d      	beq.n	800b552 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d108      	bne.n	800b552 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	7afa      	ldrb	r2, [r7, #11]
 800b54a:	4611      	mov	r1, r2
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	4798      	blx	r3
 800b550:	e001      	b.n	800b556 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b552:	2302      	movs	r3, #2
 800b554:	e000      	b.n	800b558 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	460b      	mov	r3, r1
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b56e:	7afb      	ldrb	r3, [r7, #11]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d17f      	bne.n	800b674 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3314      	adds	r3, #20
 800b578:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b580:	2b02      	cmp	r3, #2
 800b582:	d15c      	bne.n	800b63e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d915      	bls.n	800b5bc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	1ad2      	subs	r2, r2, r3
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 fea8 	bl	800c2fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f00b ff7f 	bl	80174b8 <USBD_LL_PrepareReceive>
 800b5ba:	e04e      	b.n	800b65a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	6912      	ldr	r2, [r2, #16]
 800b5c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c8:	fb01 f202 	mul.w	r2, r1, r2
 800b5cc:	1a9b      	subs	r3, r3, r2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d11c      	bne.n	800b60c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	689a      	ldr	r2, [r3, #8]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d316      	bcc.n	800b60c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d20f      	bcs.n	800b60c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fe84 	bl	800c2fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b5fe:	2300      	movs	r3, #0
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f00b ff57 	bl	80174b8 <USBD_LL_PrepareReceive>
 800b60a:	e026      	b.n	800b65a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00a      	beq.n	800b62e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d105      	bne.n	800b62e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b62e:	2180      	movs	r1, #128	; 0x80
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f00b fe39 	bl	80172a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fe98 	bl	800c36c <USBD_CtlReceiveStatus>
 800b63c:	e00d      	b.n	800b65a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b644:	2b04      	cmp	r3, #4
 800b646:	d004      	beq.n	800b652 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d103      	bne.n	800b65a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b652:	2180      	movs	r1, #128	; 0x80
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f00b fe27 	bl	80172a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800b660:	2b01      	cmp	r3, #1
 800b662:	d11d      	bne.n	800b6a0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff fe80 	bl	800b36a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800b672:	e015      	b.n	800b6a0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00d      	beq.n	800b69c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800b686:	2b03      	cmp	r3, #3
 800b688:	d108      	bne.n	800b69c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	7afa      	ldrb	r2, [r7, #11]
 800b694:	4611      	mov	r1, r2
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	4798      	blx	r3
 800b69a:	e001      	b.n	800b6a0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b69c:	2302      	movs	r3, #2
 800b69e:	e000      	b.n	800b6a2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6b2:	2340      	movs	r3, #64	; 0x40
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f00b fd4b 	bl	8017154 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2240      	movs	r2, #64	; 0x40
 800b6ca:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6ce:	2340      	movs	r3, #64	; 0x40
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2180      	movs	r1, #128	; 0x80
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f00b fd3d 	bl	8017154 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2240      	movs	r2, #64	; 0x40
 800b6e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6852      	ldr	r2, [r2, #4]
 800b71a:	b2d2      	uxtb	r2, r2
 800b71c:	4611      	mov	r1, r2
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
  }

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	78fa      	ldrb	r2, [r7, #3]
 800b73c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2204      	movs	r2, #4
 800b764:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d10b      	bne.n	800b7c2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d005      	beq.n	800b7c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	6852      	ldr	r2, [r2, #4]
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	4611      	mov	r1, r2
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3

  return USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b85a:	2b40      	cmp	r3, #64	; 0x40
 800b85c:	d005      	beq.n	800b86a <USBD_StdDevReq+0x26>
 800b85e:	2b40      	cmp	r3, #64	; 0x40
 800b860:	d84f      	bhi.n	800b902 <USBD_StdDevReq+0xbe>
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <USBD_StdDevReq+0x36>
 800b866:	2b20      	cmp	r3, #32
 800b868:	d14b      	bne.n	800b902 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
    break;
 800b878:	e048      	b.n	800b90c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d839      	bhi.n	800b8f6 <USBD_StdDevReq+0xb2>
 800b882:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <USBD_StdDevReq+0x44>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8d9 	.word	0x0800b8d9
 800b88c:	0800b8ed 	.word	0x0800b8ed
 800b890:	0800b8f7 	.word	0x0800b8f7
 800b894:	0800b8e3 	.word	0x0800b8e3
 800b898:	0800b8f7 	.word	0x0800b8f7
 800b89c:	0800b8bb 	.word	0x0800b8bb
 800b8a0:	0800b8b1 	.word	0x0800b8b1
 800b8a4:	0800b8f7 	.word	0x0800b8f7
 800b8a8:	0800b8cf 	.word	0x0800b8cf
 800b8ac:	0800b8c5 	.word	0x0800b8c5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9da 	bl	800bc6c <USBD_GetDescriptor>
      break;
 800b8b8:	e022      	b.n	800b900 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 faeb 	bl	800be98 <USBD_SetAddress>
      break;
 800b8c2:	e01d      	b.n	800b900 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fb2a 	bl	800bf20 <USBD_SetConfig>
      break;
 800b8cc:	e018      	b.n	800b900 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fbb3 	bl	800c03c <USBD_GetConfig>
      break;
 800b8d6:	e013      	b.n	800b900 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fbe3 	bl	800c0a6 <USBD_GetStatus>
      break;
 800b8e0:	e00e      	b.n	800b900 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fc11 	bl	800c10c <USBD_SetFeature>
      break;
 800b8ea:	e009      	b.n	800b900 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fc20 	bl	800c134 <USBD_ClrFeature>
      break;
 800b8f4:	e004      	b.n	800b900 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fc79 	bl	800c1f0 <USBD_CtlError>
      break;
 800b8fe:	bf00      	nop
    }
    break;
 800b900:	e004      	b.n	800b90c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fc73 	bl	800c1f0 <USBD_CtlError>
    break;
 800b90a:	bf00      	nop
  }

  return ret;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop

0800b918 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b92e:	2b40      	cmp	r3, #64	; 0x40
 800b930:	d005      	beq.n	800b93e <USBD_StdItfReq+0x26>
 800b932:	2b40      	cmp	r3, #64	; 0x40
 800b934:	d82e      	bhi.n	800b994 <USBD_StdItfReq+0x7c>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <USBD_StdItfReq+0x26>
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d12a      	bne.n	800b994 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b944:	3b01      	subs	r3, #1
 800b946:	2b02      	cmp	r3, #2
 800b948:	d81d      	bhi.n	800b986 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	889b      	ldrh	r3, [r3, #4]
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b01      	cmp	r3, #1
 800b952:	d813      	bhi.n	800b97c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	88db      	ldrh	r3, [r3, #6]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d110      	bne.n	800b990 <USBD_StdItfReq+0x78>
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10d      	bne.n	800b990 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fce6 	bl	800c346 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b97a:	e009      	b.n	800b990 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fc36 	bl	800c1f0 <USBD_CtlError>
      break;
 800b984:	e004      	b.n	800b990 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fc31 	bl	800c1f0 <USBD_CtlError>
      break;
 800b98e:	e000      	b.n	800b992 <USBD_StdItfReq+0x7a>
      break;
 800b990:	bf00      	nop
    }
    break;
 800b992:	e004      	b.n	800b99e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fc2a 	bl	800c1f0 <USBD_CtlError>
    break;
 800b99c:	bf00      	nop
  }

  return USBD_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	889b      	ldrh	r3, [r3, #4]
 800b9ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9c4:	2b40      	cmp	r3, #64	; 0x40
 800b9c6:	d007      	beq.n	800b9d8 <USBD_StdEPReq+0x30>
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	f200 8144 	bhi.w	800bc56 <USBD_StdEPReq+0x2ae>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00a      	beq.n	800b9e8 <USBD_StdEPReq+0x40>
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	f040 813f 	bne.w	800bc56 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4798      	blx	r3
    break;
 800b9e6:	e13b      	b.n	800bc60 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d10a      	bne.n	800ba0a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	4798      	blx	r3
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	e12b      	b.n	800bc62 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d007      	beq.n	800ba22 <USBD_StdEPReq+0x7a>
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	f300 8119 	bgt.w	800bc4a <USBD_StdEPReq+0x2a2>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d072      	beq.n	800bb02 <USBD_StdEPReq+0x15a>
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d03a      	beq.n	800ba96 <USBD_StdEPReq+0xee>
 800ba20:	e113      	b.n	800bc4a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d002      	beq.n	800ba32 <USBD_StdEPReq+0x8a>
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d015      	beq.n	800ba5c <USBD_StdEPReq+0xb4>
 800ba30:	e02b      	b.n	800ba8a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00c      	beq.n	800ba52 <USBD_StdEPReq+0xaa>
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	2b80      	cmp	r3, #128	; 0x80
 800ba3c:	d009      	beq.n	800ba52 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f00b fc30 	bl	80172a8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ba48:	2180      	movs	r1, #128	; 0x80
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f00b fc2c 	bl	80172a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ba50:	e020      	b.n	800ba94 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fbcb 	bl	800c1f0 <USBD_CtlError>
        break;
 800ba5a:	e01b      	b.n	800ba94 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	885b      	ldrh	r3, [r3, #2]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10e      	bne.n	800ba82 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00b      	beq.n	800ba82 <USBD_StdEPReq+0xda>
 800ba6a:	7bbb      	ldrb	r3, [r7, #14]
 800ba6c:	2b80      	cmp	r3, #128	; 0x80
 800ba6e:	d008      	beq.n	800ba82 <USBD_StdEPReq+0xda>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	88db      	ldrh	r3, [r3, #6]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d104      	bne.n	800ba82 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f00b fc13 	bl	80172a8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fc5f 	bl	800c346 <USBD_CtlSendStatus>

        break;
 800ba88:	e004      	b.n	800ba94 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fbaf 	bl	800c1f0 <USBD_CtlError>
        break;
 800ba92:	bf00      	nop
      }
      break;
 800ba94:	e0de      	b.n	800bc54 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d002      	beq.n	800baa6 <USBD_StdEPReq+0xfe>
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d015      	beq.n	800bad0 <USBD_StdEPReq+0x128>
 800baa4:	e026      	b.n	800baf4 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00c      	beq.n	800bac6 <USBD_StdEPReq+0x11e>
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b80      	cmp	r3, #128	; 0x80
 800bab0:	d009      	beq.n	800bac6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f00b fbf6 	bl	80172a8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800babc:	2180      	movs	r1, #128	; 0x80
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f00b fbf2 	bl	80172a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bac4:	e01c      	b.n	800bb00 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fb91 	bl	800c1f0 <USBD_CtlError>
        break;
 800bace:	e017      	b.n	800bb00 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	885b      	ldrh	r3, [r3, #2]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d112      	bne.n	800bafe <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f00b fc14 	bl	8017314 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fc2a 	bl	800c346 <USBD_CtlSendStatus>
        }
        break;
 800baf2:	e004      	b.n	800bafe <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fb7a 	bl	800c1f0 <USBD_CtlError>
        break;
 800bafc:	e000      	b.n	800bb00 <USBD_StdEPReq+0x158>
        break;
 800bafe:	bf00      	nop
      }
      break;
 800bb00:	e0a8      	b.n	800bc54 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d002      	beq.n	800bb12 <USBD_StdEPReq+0x16a>
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d031      	beq.n	800bb74 <USBD_StdEPReq+0x1cc>
 800bb10:	e095      	b.n	800bc3e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d007      	beq.n	800bb28 <USBD_StdEPReq+0x180>
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b80      	cmp	r3, #128	; 0x80
 800bb1c:	d004      	beq.n	800bb28 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fb65 	bl	800c1f0 <USBD_CtlError>
          break;
 800bb26:	e08f      	b.n	800bc48 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bb28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	da0b      	bge.n	800bb48 <USBD_StdEPReq+0x1a0>
 800bb30:	7bbb      	ldrb	r3, [r7, #14]
 800bb32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	3310      	adds	r3, #16
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	4413      	add	r3, r2
 800bb44:	3304      	adds	r3, #4
 800bb46:	e00a      	b.n	800bb5e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2202      	movs	r2, #2
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fbaa 	bl	800c2c6 <USBD_CtlSendData>
          break;
 800bb72:	e069      	b.n	800bc48 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800bb74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	da11      	bge.n	800bba0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	f003 020f 	and.w	r2, r3, #15
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	4613      	mov	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	3318      	adds	r3, #24
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d117      	bne.n	800bbc6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fb29 	bl	800c1f0 <USBD_CtlError>
            break;
 800bb9e:	e053      	b.n	800bc48 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	f003 020f 	and.w	r2, r3, #15
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	440b      	add	r3, r1
 800bbb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d104      	bne.n	800bbc6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fb16 	bl	800c1f0 <USBD_CtlError>
            break;
 800bbc4:	e040      	b.n	800bc48 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bbc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	da0b      	bge.n	800bbe6 <USBD_StdEPReq+0x23e>
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	3310      	adds	r3, #16
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	e00a      	b.n	800bbfc <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <USBD_StdEPReq+0x262>
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b80      	cmp	r3, #128	; 0x80
 800bc08:	d103      	bne.n	800bc12 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	e00e      	b.n	800bc30 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f00b fbb2 	bl	8017380 <USBD_LL_IsStallEP>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e002      	b.n	800bc30 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2202      	movs	r2, #2
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb45 	bl	800c2c6 <USBD_CtlSendData>
          break;
 800bc3c:	e004      	b.n	800bc48 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fad5 	bl	800c1f0 <USBD_CtlError>
        break;
 800bc46:	bf00      	nop
      }
      break;
 800bc48:	e004      	b.n	800bc54 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 facf 	bl	800c1f0 <USBD_CtlError>
      break;
 800bc52:	bf00      	nop
    }
    break;
 800bc54:	e004      	b.n	800bc60 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fac9 	bl	800c1f0 <USBD_CtlError>
    break;
 800bc5e:	bf00      	nop
  }

  return ret;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	885b      	ldrh	r3, [r3, #2]
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	2b0e      	cmp	r3, #14
 800bc82:	f200 80e5 	bhi.w	800be50 <USBD_GetDescriptor+0x1e4>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <USBD_GetDescriptor+0x20>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bce1 	.word	0x0800bce1
 800bc90:	0800bcf9 	.word	0x0800bcf9
 800bc94:	0800bd39 	.word	0x0800bd39
 800bc98:	0800be51 	.word	0x0800be51
 800bc9c:	0800be51 	.word	0x0800be51
 800bca0:	0800bdfd 	.word	0x0800bdfd
 800bca4:	0800be23 	.word	0x0800be23
 800bca8:	0800be51 	.word	0x0800be51
 800bcac:	0800be51 	.word	0x0800be51
 800bcb0:	0800be51 	.word	0x0800be51
 800bcb4:	0800be51 	.word	0x0800be51
 800bcb8:	0800be51 	.word	0x0800be51
 800bcbc:	0800be51 	.word	0x0800be51
 800bcc0:	0800be51 	.word	0x0800be51
 800bcc4:	0800bcc9 	.word	0x0800bcc9
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	7c12      	ldrb	r2, [r2, #16]
 800bcd4:	f107 010a 	add.w	r1, r7, #10
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
    break;
 800bcde:	e0bc      	b.n	800be5a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	7c12      	ldrb	r2, [r2, #16]
 800bcec:	f107 010a 	add.w	r1, r7, #10
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
    break;
 800bcf6:	e0b0      	b.n	800be5a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	7c1b      	ldrb	r3, [r3, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10d      	bne.n	800bd1c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd08:	f107 020a 	add.w	r2, r7, #10
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	2202      	movs	r2, #2
 800bd18:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bd1a:	e09e      	b.n	800be5a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	f107 020a 	add.w	r2, r7, #10
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4798      	blx	r3
 800bd2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3301      	adds	r3, #1
 800bd32:	2202      	movs	r2, #2
 800bd34:	701a      	strb	r2, [r3, #0]
    break;
 800bd36:	e090      	b.n	800be5a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	885b      	ldrh	r3, [r3, #2]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d856      	bhi.n	800bdf0 <USBD_GetDescriptor+0x184>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <USBD_GetDescriptor+0xdc>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd61 	.word	0x0800bd61
 800bd4c:	0800bd79 	.word	0x0800bd79
 800bd50:	0800bd91 	.word	0x0800bd91
 800bd54:	0800bda9 	.word	0x0800bda9
 800bd58:	0800bdc1 	.word	0x0800bdc1
 800bd5c:	0800bdd9 	.word	0x0800bdd9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	7c12      	ldrb	r2, [r2, #16]
 800bd6c:	f107 010a 	add.w	r1, r7, #10
 800bd70:	4610      	mov	r0, r2
 800bd72:	4798      	blx	r3
 800bd74:	60f8      	str	r0, [r7, #12]
      break;
 800bd76:	e040      	b.n	800bdfa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7c12      	ldrb	r2, [r2, #16]
 800bd84:	f107 010a 	add.w	r1, r7, #10
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	60f8      	str	r0, [r7, #12]
      break;
 800bd8e:	e034      	b.n	800bdfa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	7c12      	ldrb	r2, [r2, #16]
 800bd9c:	f107 010a 	add.w	r1, r7, #10
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	60f8      	str	r0, [r7, #12]
      break;
 800bda6:	e028      	b.n	800bdfa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	7c12      	ldrb	r2, [r2, #16]
 800bdb4:	f107 010a 	add.w	r1, r7, #10
 800bdb8:	4610      	mov	r0, r2
 800bdba:	4798      	blx	r3
 800bdbc:	60f8      	str	r0, [r7, #12]
      break;
 800bdbe:	e01c      	b.n	800bdfa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	7c12      	ldrb	r2, [r2, #16]
 800bdcc:	f107 010a 	add.w	r1, r7, #10
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
 800bdd4:	60f8      	str	r0, [r7, #12]
      break;
 800bdd6:	e010      	b.n	800bdfa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	7c12      	ldrb	r2, [r2, #16]
 800bde4:	f107 010a 	add.w	r1, r7, #10
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	60f8      	str	r0, [r7, #12]
      break;
 800bdee:	e004      	b.n	800bdfa <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9fc 	bl	800c1f0 <USBD_CtlError>
      return;
 800bdf8:	e04b      	b.n	800be92 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800bdfa:	e02e      	b.n	800be5a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0c:	f107 020a 	add.w	r2, r7, #10
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
      break;
 800be16:	e020      	b.n	800be5a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f9e8 	bl	800c1f0 <USBD_CtlError>
      return;
 800be20:	e037      	b.n	800be92 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7c1b      	ldrb	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10d      	bne.n	800be46 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	f107 020a 	add.w	r2, r7, #10
 800be36:	4610      	mov	r0, r2
 800be38:	4798      	blx	r3
 800be3a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3301      	adds	r3, #1
 800be40:	2207      	movs	r2, #7
 800be42:	701a      	strb	r2, [r3, #0]
      break;
 800be44:	e009      	b.n	800be5a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f9d1 	bl	800c1f0 <USBD_CtlError>
      return;
 800be4e:	e020      	b.n	800be92 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f9cc 	bl	800c1f0 <USBD_CtlError>
    return;
 800be58:	e01b      	b.n	800be92 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800be5a:	897b      	ldrh	r3, [r7, #10]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d011      	beq.n	800be84 <USBD_GetDescriptor+0x218>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	88db      	ldrh	r3, [r3, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00d      	beq.n	800be84 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	88da      	ldrh	r2, [r3, #6]
 800be6c:	897b      	ldrh	r3, [r7, #10]
 800be6e:	4293      	cmp	r3, r2
 800be70:	bf28      	it	cs
 800be72:	4613      	movcs	r3, r2
 800be74:	b29b      	uxth	r3, r3
 800be76:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800be78:	897b      	ldrh	r3, [r7, #10]
 800be7a:	461a      	mov	r2, r3
 800be7c:	68f9      	ldr	r1, [r7, #12]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa21 	bl	800c2c6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	88db      	ldrh	r3, [r3, #6]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d102      	bne.n	800be92 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa5a 	bl	800c346 <USBD_CtlSendStatus>
  }
}
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	889b      	ldrh	r3, [r3, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d130      	bne.n	800bf0c <USBD_SetAddress+0x74>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	88db      	ldrh	r3, [r3, #6]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d12c      	bne.n	800bf0c <USBD_SetAddress+0x74>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	885b      	ldrh	r3, [r3, #2]
 800beb6:	2b7f      	cmp	r3, #127	; 0x7f
 800beb8:	d828      	bhi.n	800bf0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	885b      	ldrh	r3, [r3, #2]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800becc:	2b03      	cmp	r3, #3
 800bece:	d104      	bne.n	800beda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f98c 	bl	800c1f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed8:	e01d      	b.n	800bf16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	7bfa      	ldrb	r2, [r7, #15]
 800bede:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f00b fa76 	bl	80173d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa2a 	bl	800c346 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d004      	beq.n	800bf02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf00:	e009      	b.n	800bf16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0a:	e004      	b.n	800bf16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f96e 	bl	800c1f0 <USBD_CtlError>
  }
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	4b41      	ldr	r3, [pc, #260]	; (800c038 <USBD_SetConfig+0x118>)
 800bf32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf34:	4b40      	ldr	r3, [pc, #256]	; (800c038 <USBD_SetConfig+0x118>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d904      	bls.n	800bf46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f956 	bl	800c1f0 <USBD_CtlError>
 800bf44:	e075      	b.n	800c032 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d002      	beq.n	800bf56 <USBD_SetConfig+0x36>
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	d023      	beq.n	800bf9c <USBD_SetConfig+0x7c>
 800bf54:	e062      	b.n	800c01c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800bf56:	4b38      	ldr	r3, [pc, #224]	; (800c038 <USBD_SetConfig+0x118>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01a      	beq.n	800bf94 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800bf5e:	4b36      	ldr	r3, [pc, #216]	; (800c038 <USBD_SetConfig+0x118>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf70:	4b31      	ldr	r3, [pc, #196]	; (800c038 <USBD_SetConfig+0x118>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fa02 	bl	800b380 <USBD_SetClassConfig>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d104      	bne.n	800bf8c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f933 	bl	800c1f0 <USBD_CtlError>
          return;
 800bf8a:	e052      	b.n	800c032 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f9da 	bl	800c346 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800bf92:	e04e      	b.n	800c032 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f9d6 	bl	800c346 <USBD_CtlSendStatus>
      break;
 800bf9a:	e04a      	b.n	800c032 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf9c:	4b26      	ldr	r3, [pc, #152]	; (800c038 <USBD_SetConfig+0x118>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d112      	bne.n	800bfca <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800bfac:	4b22      	ldr	r3, [pc, #136]	; (800c038 <USBD_SetConfig+0x118>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800bfb6:	4b20      	ldr	r3, [pc, #128]	; (800c038 <USBD_SetConfig+0x118>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff f9fe 	bl	800b3be <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f9bf 	bl	800c346 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800bfc8:	e033      	b.n	800c032 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800bfca:	4b1b      	ldr	r3, [pc, #108]	; (800c038 <USBD_SetConfig+0x118>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d01d      	beq.n	800c014 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff f9ec 	bl	800b3be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <USBD_SetConfig+0x118>)
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bff0:	4b11      	ldr	r3, [pc, #68]	; (800c038 <USBD_SetConfig+0x118>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff f9c2 	bl	800b380 <USBD_SetClassConfig>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d104      	bne.n	800c00c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f8f3 	bl	800c1f0 <USBD_CtlError>
          return;
 800c00a:	e012      	b.n	800c032 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f99a 	bl	800c346 <USBD_CtlSendStatus>
      break;
 800c012:	e00e      	b.n	800c032 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f996 	bl	800c346 <USBD_CtlSendStatus>
      break;
 800c01a:	e00a      	b.n	800c032 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f8e6 	bl	800c1f0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c024:	4b04      	ldr	r3, [pc, #16]	; (800c038 <USBD_SetConfig+0x118>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff f9c7 	bl	800b3be <USBD_ClrClassConfig>
      break;
 800c030:	bf00      	nop
    }
  }
}
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	200001c8 	.word	0x200001c8

0800c03c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	88db      	ldrh	r3, [r3, #6]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d004      	beq.n	800c058 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f8cd 	bl	800c1f0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c056:	e022      	b.n	800c09e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc02      	bgt.n	800c068 <USBD_GetConfig+0x2c>
 800c062:	2b00      	cmp	r3, #0
 800c064:	dc03      	bgt.n	800c06e <USBD_GetConfig+0x32>
 800c066:	e015      	b.n	800c094 <USBD_GetConfig+0x58>
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d00b      	beq.n	800c084 <USBD_GetConfig+0x48>
 800c06c:	e012      	b.n	800c094 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3308      	adds	r3, #8
 800c078:	2201      	movs	r2, #1
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f922 	bl	800c2c6 <USBD_CtlSendData>
      break;
 800c082:	e00c      	b.n	800c09e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	2201      	movs	r2, #1
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f91a 	bl	800c2c6 <USBD_CtlSendData>
      break;
 800c092:	e004      	b.n	800c09e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f8aa 	bl	800c1f0 <USBD_CtlError>
      break;
 800c09c:	bf00      	nop
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d81e      	bhi.n	800c0fa <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d004      	beq.n	800c0ce <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f892 	bl	800c1f0 <USBD_CtlError>
      break;
 800c0cc:	e01a      	b.n	800c104 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	f043 0202 	orr.w	r2, r3, #2
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	330c      	adds	r3, #12
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f8e7 	bl	800c2c6 <USBD_CtlSendData>
    break;
 800c0f8:	e004      	b.n	800c104 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f877 	bl	800c1f0 <USBD_CtlError>
    break;
 800c102:	bf00      	nop
  }
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d106      	bne.n	800c12c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f90d 	bl	800c346 <USBD_CtlSendStatus>
  }

}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c144:	3b01      	subs	r3, #1
 800c146:	2b02      	cmp	r3, #2
 800c148:	d80b      	bhi.n	800c162 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	885b      	ldrh	r3, [r3, #2]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d10c      	bne.n	800c16c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f8f3 	bl	800c346 <USBD_CtlSendStatus>
    }
    break;
 800c160:	e004      	b.n	800c16c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f843 	bl	800c1f0 <USBD_CtlError>
    break;
 800c16a:	e000      	b.n	800c16e <USBD_ClrFeature+0x3a>
    break;
 800c16c:	bf00      	nop
  }
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c176:	b480      	push	{r7}
 800c178:	b083      	sub	sp, #12
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	785a      	ldrb	r2, [r3, #1]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	3302      	adds	r3, #2
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b29a      	uxth	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	3303      	adds	r3, #3
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	4413      	add	r3, r2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	3305      	adds	r3, #5
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	021b      	lsls	r3, r3, #8
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4413      	add	r3, r2
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	3306      	adds	r3, #6
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3307      	adds	r3, #7
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	021b      	lsls	r3, r3, #8
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	4413      	add	r3, r2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	80da      	strh	r2, [r3, #6]

}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800c1fa:	2180      	movs	r1, #128	; 0x80
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f00b f853 	bl	80172a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c202:	2100      	movs	r1, #0
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f00b f84f 	bl	80172a8 <USBD_LL_StallEP>
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b086      	sub	sp, #24
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d032      	beq.n	800c28e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 f834 	bl	800c296 <USBD_GetLen>
 800c22e:	4603      	mov	r3, r0
 800c230:	3301      	adds	r3, #1
 800c232:	b29b      	uxth	r3, r3
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	b29a      	uxth	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	75fa      	strb	r2, [r7, #23]
 800c242:	461a      	mov	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	4413      	add	r3, r2
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	7812      	ldrb	r2, [r2, #0]
 800c24c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	75fa      	strb	r2, [r7, #23]
 800c254:	461a      	mov	r2, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	4413      	add	r3, r2
 800c25a:	2203      	movs	r2, #3
 800c25c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c25e:	e012      	b.n	800c286 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	60fa      	str	r2, [r7, #12]
 800c266:	7dfa      	ldrb	r2, [r7, #23]
 800c268:	1c51      	adds	r1, r2, #1
 800c26a:	75f9      	strb	r1, [r7, #23]
 800c26c:	4611      	mov	r1, r2
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	440a      	add	r2, r1
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	75fa      	strb	r2, [r7, #23]
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4413      	add	r3, r2
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e8      	bne.n	800c260 <USBD_GetString+0x4e>
    }
  }
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800c2a2:	e005      	b.n	800c2b0 <USBD_GetLen+0x1a>
    {
        len++;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f5      	bne.n	800c2a4 <USBD_GetLen+0xe>
    }

    return len;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800c2dc:	88fa      	ldrh	r2, [r7, #6]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c2e2:	88fa      	ldrh	r2, [r7, #6]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c2e8:	88fb      	ldrh	r3, [r7, #6]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f00b f8a8 	bl	8017444 <USBD_LL_Transmit>

  return USBD_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	4613      	mov	r3, r2
 800c30a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c30c:	88fb      	ldrh	r3, [r7, #6]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	2100      	movs	r1, #0
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f00b f896 	bl	8017444 <USBD_LL_Transmit>

  return USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	60b9      	str	r1, [r7, #8]
 800c32c:	4613      	mov	r3, r2
 800c32e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	2100      	movs	r1, #0
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f00b f8be 	bl	80174b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2204      	movs	r2, #4
 800c352:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c356:	2300      	movs	r3, #0
 800c358:	2200      	movs	r2, #0
 800c35a:	2100      	movs	r1, #0
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f00b f871 	bl	8017444 <USBD_LL_Transmit>

  return USBD_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2205      	movs	r2, #5
 800c378:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c37c:	2300      	movs	r3, #0
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f00b f898 	bl	80174b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	4a08      	ldr	r2, [pc, #32]	; (800c3c4 <disk_status+0x30>)
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	79fa      	ldrb	r2, [r7, #7]
 800c3ac:	4905      	ldr	r1, [pc, #20]	; (800c3c4 <disk_status+0x30>)
 800c3ae:	440a      	add	r2, r1
 800c3b0:	7a12      	ldrb	r2, [r2, #8]
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	4798      	blx	r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	200001f4 	.word	0x200001f4

0800c3c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c3d6:	79fb      	ldrb	r3, [r7, #7]
 800c3d8:	4a0d      	ldr	r2, [pc, #52]	; (800c410 <disk_initialize+0x48>)
 800c3da:	5cd3      	ldrb	r3, [r2, r3]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d111      	bne.n	800c404 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	4a0b      	ldr	r2, [pc, #44]	; (800c410 <disk_initialize+0x48>)
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c3e8:	79fb      	ldrb	r3, [r7, #7]
 800c3ea:	4a09      	ldr	r2, [pc, #36]	; (800c410 <disk_initialize+0x48>)
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	79fa      	ldrb	r2, [r7, #7]
 800c3f6:	4906      	ldr	r1, [pc, #24]	; (800c410 <disk_initialize+0x48>)
 800c3f8:	440a      	add	r2, r1
 800c3fa:	7a12      	ldrb	r2, [r2, #8]
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	200001f4 	.word	0x200001f4

0800c414 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c414:	b590      	push	{r4, r7, lr}
 800c416:	b087      	sub	sp, #28
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	603b      	str	r3, [r7, #0]
 800c420:	4603      	mov	r3, r0
 800c422:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c424:	7bfb      	ldrb	r3, [r7, #15]
 800c426:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <disk_read+0x3c>)
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	689c      	ldr	r4, [r3, #8]
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	4a07      	ldr	r2, [pc, #28]	; (800c450 <disk_read+0x3c>)
 800c434:	4413      	add	r3, r2
 800c436:	7a18      	ldrb	r0, [r3, #8]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	68b9      	ldr	r1, [r7, #8]
 800c43e:	47a0      	blx	r4
 800c440:	4603      	mov	r3, r0
 800c442:	75fb      	strb	r3, [r7, #23]
  return res;
 800c444:	7dfb      	ldrb	r3, [r7, #23]
}
 800c446:	4618      	mov	r0, r3
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd90      	pop	{r4, r7, pc}
 800c44e:	bf00      	nop
 800c450:	200001f4 	.word	0x200001f4

0800c454 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c454:	b590      	push	{r4, r7, lr}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	607a      	str	r2, [r7, #4]
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	4a0a      	ldr	r2, [pc, #40]	; (800c490 <disk_write+0x3c>)
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	68dc      	ldr	r4, [r3, #12]
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	4a07      	ldr	r2, [pc, #28]	; (800c490 <disk_write+0x3c>)
 800c474:	4413      	add	r3, r2
 800c476:	7a18      	ldrb	r0, [r3, #8]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	47a0      	blx	r4
 800c480:	4603      	mov	r3, r0
 800c482:	75fb      	strb	r3, [r7, #23]
  return res;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	371c      	adds	r7, #28
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd90      	pop	{r4, r7, pc}
 800c48e:	bf00      	nop
 800c490:	200001f4 	.word	0x200001f4

0800c494 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	603a      	str	r2, [r7, #0]
 800c49e:	71fb      	strb	r3, [r7, #7]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	4a09      	ldr	r2, [pc, #36]	; (800c4cc <disk_ioctl+0x38>)
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	79fa      	ldrb	r2, [r7, #7]
 800c4b2:	4906      	ldr	r1, [pc, #24]	; (800c4cc <disk_ioctl+0x38>)
 800c4b4:	440a      	add	r2, r1
 800c4b6:	7a10      	ldrb	r0, [r2, #8]
 800c4b8:	79b9      	ldrb	r1, [r7, #6]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4798      	blx	r3
 800c4be:	4603      	mov	r3, r0
 800c4c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	200001f4 	.word	0x200001f4

0800c4d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c4e0:	89fb      	ldrh	r3, [r7, #14]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	b21a      	sxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	b21b      	sxth	r3, r3
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	b21b      	sxth	r3, r3
 800c4f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c4f2:	89fb      	ldrh	r3, [r7, #14]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3303      	adds	r3, #3
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	3202      	adds	r2, #2
 800c518:	7812      	ldrb	r2, [r2, #0]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	021b      	lsls	r3, r3, #8
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	3201      	adds	r2, #1
 800c526:	7812      	ldrb	r2, [r2, #0]
 800c528:	4313      	orrs	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	021b      	lsls	r3, r3, #8
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	7812      	ldrb	r2, [r2, #0]
 800c534:	4313      	orrs	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
	return rv;
 800c538:	68fb      	ldr	r3, [r7, #12]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	1c5a      	adds	r2, r3, #1
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	887a      	ldrh	r2, [r7, #2]
 800c55a:	b2d2      	uxtb	r2, r2
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	887b      	ldrh	r3, [r7, #2]
 800c560:	0a1b      	lsrs	r3, r3, #8
 800c562:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	887a      	ldrh	r2, [r7, #2]
 800c56c:	b2d2      	uxtb	r2, r2
 800c56e:	701a      	strb	r2, [r3, #0]
}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	701a      	strb	r2, [r3, #0]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	0a1b      	lsrs	r3, r3, #8
 800c596:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	607a      	str	r2, [r7, #4]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	b2d2      	uxtb	r2, r2
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00d      	beq.n	800c60a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	1c53      	adds	r3, r2, #1
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	1c59      	adds	r1, r3, #1
 800c5f8:	6179      	str	r1, [r7, #20]
 800c5fa:	7812      	ldrb	r2, [r2, #0]
 800c5fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	3b01      	subs	r3, #1
 800c602:	607b      	str	r3, [r7, #4]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1f1      	bne.n	800c5ee <mem_cpy+0x1a>
	}
}
 800c60a:	bf00      	nop
 800c60c:	371c      	adds	r7, #28
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c616:	b480      	push	{r7}
 800c618:	b087      	sub	sp, #28
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	60f8      	str	r0, [r7, #12]
 800c61e:	60b9      	str	r1, [r7, #8]
 800c620:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	617a      	str	r2, [r7, #20]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	b2d2      	uxtb	r2, r2
 800c630:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3b01      	subs	r3, #1
 800c636:	607b      	str	r3, [r7, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1f3      	bne.n	800c626 <mem_set+0x10>
}
 800c63e:	bf00      	nop
 800c640:	bf00      	nop
 800c642:	371c      	adds	r7, #28
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c64c:	b480      	push	{r7}
 800c64e:	b089      	sub	sp, #36	; 0x24
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	61fb      	str	r3, [r7, #28]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	61fa      	str	r2, [r7, #28]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	4619      	mov	r1, r3
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	61ba      	str	r2, [r7, #24]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	1acb      	subs	r3, r1, r3
 800c678:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	607b      	str	r3, [r7, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <mem_cmp+0x40>
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0eb      	beq.n	800c664 <mem_cmp+0x18>

	return r;
 800c68c:	697b      	ldr	r3, [r7, #20]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3724      	adds	r7, #36	; 0x24
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c6a4:	e002      	b.n	800c6ac <chk_chr+0x12>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	607b      	str	r3, [r7, #4]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <chk_chr+0x26>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d1f2      	bne.n	800c6a6 <chk_chr+0xc>
	return *str;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d009      	beq.n	800c6f2 <lock_fs+0x22>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f003 fe8a 	bl	80103fc <ff_req_grant>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <lock_fs+0x22>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <lock_fs+0x24>
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00d      	beq.n	800c72a <unlock_fs+0x2e>
 800c70e:	78fb      	ldrb	r3, [r7, #3]
 800c710:	2b0c      	cmp	r3, #12
 800c712:	d00a      	beq.n	800c72a <unlock_fs+0x2e>
 800c714:	78fb      	ldrb	r3, [r7, #3]
 800c716:	2b0b      	cmp	r3, #11
 800c718:	d007      	beq.n	800c72a <unlock_fs+0x2e>
 800c71a:	78fb      	ldrb	r3, [r7, #3]
 800c71c:	2b0f      	cmp	r3, #15
 800c71e:	d004      	beq.n	800c72a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	4618      	mov	r0, r3
 800c726:	f003 fe7e 	bl	8010426 <ff_rel_grant>
	}
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	e029      	b.n	800c79c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c748:	4a27      	ldr	r2, [pc, #156]	; (800c7e8 <chk_lock+0xb4>)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	4413      	add	r3, r2
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d01d      	beq.n	800c792 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c756:	4a24      	ldr	r2, [pc, #144]	; (800c7e8 <chk_lock+0xb4>)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	4413      	add	r3, r2
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d116      	bne.n	800c796 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c768:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <chk_lock+0xb4>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	011b      	lsls	r3, r3, #4
 800c76e:	4413      	add	r3, r2
 800c770:	3304      	adds	r3, #4
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c778:	429a      	cmp	r2, r3
 800c77a:	d10c      	bne.n	800c796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c77c:	4a1a      	ldr	r2, [pc, #104]	; (800c7e8 <chk_lock+0xb4>)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	4413      	add	r3, r2
 800c784:	3308      	adds	r3, #8
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d102      	bne.n	800c796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c790:	e007      	b.n	800c7a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c792:	2301      	movs	r3, #1
 800c794:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d9d2      	bls.n	800c748 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d109      	bne.n	800c7bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d102      	bne.n	800c7b4 <chk_lock+0x80>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d101      	bne.n	800c7b8 <chk_lock+0x84>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e010      	b.n	800c7da <chk_lock+0xa6>
 800c7b8:	2312      	movs	r3, #18
 800c7ba:	e00e      	b.n	800c7da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d108      	bne.n	800c7d4 <chk_lock+0xa0>
 800c7c2:	4a09      	ldr	r2, [pc, #36]	; (800c7e8 <chk_lock+0xb4>)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	4413      	add	r3, r2
 800c7ca:	330c      	adds	r3, #12
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d2:	d101      	bne.n	800c7d8 <chk_lock+0xa4>
 800c7d4:	2310      	movs	r3, #16
 800c7d6:	e000      	b.n	800c7da <chk_lock+0xa6>
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	200001d4 	.word	0x200001d4

0800c7ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	e002      	b.n	800c7fe <enq_lock+0x12>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	607b      	str	r3, [r7, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d806      	bhi.n	800c812 <enq_lock+0x26>
 800c804:	4a09      	ldr	r2, [pc, #36]	; (800c82c <enq_lock+0x40>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	011b      	lsls	r3, r3, #4
 800c80a:	4413      	add	r3, r2
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1f2      	bne.n	800c7f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b02      	cmp	r3, #2
 800c816:	bf14      	ite	ne
 800c818:	2301      	movne	r3, #1
 800c81a:	2300      	moveq	r3, #0
 800c81c:	b2db      	uxtb	r3, r3
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	200001d4 	.word	0x200001d4

0800c830 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c83a:	2300      	movs	r3, #0
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	e01f      	b.n	800c880 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c840:	4a41      	ldr	r2, [pc, #260]	; (800c948 <inc_lock+0x118>)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	4413      	add	r3, r2
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d113      	bne.n	800c87a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c852:	4a3d      	ldr	r2, [pc, #244]	; (800c948 <inc_lock+0x118>)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	4413      	add	r3, r2
 800c85a:	3304      	adds	r3, #4
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c862:	429a      	cmp	r2, r3
 800c864:	d109      	bne.n	800c87a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c866:	4a38      	ldr	r2, [pc, #224]	; (800c948 <inc_lock+0x118>)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	4413      	add	r3, r2
 800c86e:	3308      	adds	r3, #8
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c876:	429a      	cmp	r2, r3
 800c878:	d006      	beq.n	800c888 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3301      	adds	r3, #1
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d9dc      	bls.n	800c840 <inc_lock+0x10>
 800c886:	e000      	b.n	800c88a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c888:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d132      	bne.n	800c8f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e002      	b.n	800c89c <inc_lock+0x6c>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d806      	bhi.n	800c8b0 <inc_lock+0x80>
 800c8a2:	4a29      	ldr	r2, [pc, #164]	; (800c948 <inc_lock+0x118>)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	011b      	lsls	r3, r3, #4
 800c8a8:	4413      	add	r3, r2
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f2      	bne.n	800c896 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d101      	bne.n	800c8ba <inc_lock+0x8a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e040      	b.n	800c93c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	4922      	ldr	r1, [pc, #136]	; (800c948 <inc_lock+0x118>)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	440b      	add	r3, r1
 800c8c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	491e      	ldr	r1, [pc, #120]	; (800c948 <inc_lock+0x118>)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	011b      	lsls	r3, r3, #4
 800c8d2:	440b      	add	r3, r1
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	695a      	ldr	r2, [r3, #20]
 800c8dc:	491a      	ldr	r1, [pc, #104]	; (800c948 <inc_lock+0x118>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c8e8:	4a17      	ldr	r2, [pc, #92]	; (800c948 <inc_lock+0x118>)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	4413      	add	r3, r2
 800c8f0:	330c      	adds	r3, #12
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <inc_lock+0xe0>
 800c8fc:	4a12      	ldr	r2, [pc, #72]	; (800c948 <inc_lock+0x118>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4413      	add	r3, r2
 800c904:	330c      	adds	r3, #12
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <inc_lock+0xe0>
 800c90c:	2300      	movs	r3, #0
 800c90e:	e015      	b.n	800c93c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d108      	bne.n	800c928 <inc_lock+0xf8>
 800c916:	4a0c      	ldr	r2, [pc, #48]	; (800c948 <inc_lock+0x118>)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	011b      	lsls	r3, r3, #4
 800c91c:	4413      	add	r3, r2
 800c91e:	330c      	adds	r3, #12
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	e001      	b.n	800c92c <inc_lock+0xfc>
 800c928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c92c:	4906      	ldr	r1, [pc, #24]	; (800c948 <inc_lock+0x118>)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	440b      	add	r3, r1
 800c934:	330c      	adds	r3, #12
 800c936:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	200001d4 	.word	0x200001d4

0800c94c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3b01      	subs	r3, #1
 800c958:	607b      	str	r3, [r7, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d825      	bhi.n	800c9ac <dec_lock+0x60>
		n = Files[i].ctr;
 800c960:	4a17      	ldr	r2, [pc, #92]	; (800c9c0 <dec_lock+0x74>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	011b      	lsls	r3, r3, #4
 800c966:	4413      	add	r3, r2
 800c968:	330c      	adds	r3, #12
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c974:	d101      	bne.n	800c97a <dec_lock+0x2e>
 800c976:	2300      	movs	r3, #0
 800c978:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <dec_lock+0x3a>
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	3b01      	subs	r3, #1
 800c984:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c986:	4a0e      	ldr	r2, [pc, #56]	; (800c9c0 <dec_lock+0x74>)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	4413      	add	r3, r2
 800c98e:	330c      	adds	r3, #12
 800c990:	89fa      	ldrh	r2, [r7, #14]
 800c992:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c994:	89fb      	ldrh	r3, [r7, #14]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <dec_lock+0x5a>
 800c99a:	4a09      	ldr	r2, [pc, #36]	; (800c9c0 <dec_lock+0x74>)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	4413      	add	r3, r2
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	737b      	strb	r3, [r7, #13]
 800c9aa:	e001      	b.n	800c9b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c9b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	200001d4 	.word	0x200001d4

0800c9c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	e010      	b.n	800c9f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c9d2:	4a0d      	ldr	r2, [pc, #52]	; (800ca08 <clear_lock+0x44>)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	4413      	add	r3, r2
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d105      	bne.n	800c9ee <clear_lock+0x2a>
 800c9e2:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <clear_lock+0x44>)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	4413      	add	r3, r2
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d9eb      	bls.n	800c9d2 <clear_lock+0xe>
	}
}
 800c9fa:	bf00      	nop
 800c9fc:	bf00      	nop
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	200001d4 	.word	0x200001d4

0800ca0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	78db      	ldrb	r3, [r3, #3]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d034      	beq.n	800ca8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7858      	ldrb	r0, [r3, #1]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca30:	2301      	movs	r3, #1
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	f7ff fd0e 	bl	800c454 <disk_write>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]
 800ca42:	e022      	b.n	800ca8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	1ad2      	subs	r2, r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d217      	bcs.n	800ca8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	789b      	ldrb	r3, [r3, #2]
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	e010      	b.n	800ca84 <sync_window+0x78>
					wsect += fs->fsize;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	4413      	add	r3, r2
 800ca6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7858      	ldrb	r0, [r3, #1]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca76:	2301      	movs	r3, #1
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	f7ff fceb 	bl	800c454 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d8eb      	bhi.n	800ca62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d01b      	beq.n	800cae4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ffad 	bl	800ca0c <sync_window>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d113      	bne.n	800cae4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7858      	ldrb	r0, [r3, #1]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cac6:	2301      	movs	r3, #1
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	f7ff fca3 	bl	800c414 <disk_read>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cada:	2301      	movs	r3, #1
 800cadc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff ff87 	bl	800ca0c <sync_window>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d158      	bne.n	800cbba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d148      	bne.n	800cba2 <sync_fs+0xb2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	791b      	ldrb	r3, [r3, #4]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d144      	bne.n	800cba2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3338      	adds	r3, #56	; 0x38
 800cb1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff fd77 	bl	800c616 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3338      	adds	r3, #56	; 0x38
 800cb2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff fd06 	bl	800c546 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3338      	adds	r3, #56	; 0x38
 800cb3e:	4921      	ldr	r1, [pc, #132]	; (800cbc4 <sync_fs+0xd4>)
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff fd1b 	bl	800c57c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3338      	adds	r3, #56	; 0x38
 800cb4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb4e:	491e      	ldr	r1, [pc, #120]	; (800cbc8 <sync_fs+0xd8>)
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fd13 	bl	800c57c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3338      	adds	r3, #56	; 0x38
 800cb5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	4619      	mov	r1, r3
 800cb64:	4610      	mov	r0, r2
 800cb66:	f7ff fd09 	bl	800c57c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3338      	adds	r3, #56	; 0x38
 800cb6e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f7ff fcff 	bl	800c57c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7858      	ldrb	r0, [r3, #1]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb96:	2301      	movs	r3, #1
 800cb98:	f7ff fc5c 	bl	800c454 <disk_write>
			fs->fsi_flag = 0;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fc72 	bl	800c494 <disk_ioctl>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <sync_fs+0xca>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	41615252 	.word	0x41615252
 800cbc8:	61417272 	.word	0x61417272

0800cbcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	3b02      	subs	r3, #2
 800cbda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	3b02      	subs	r3, #2
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d301      	bcc.n	800cbec <clust2sect+0x20>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	e008      	b.n	800cbfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	895b      	ldrh	r3, [r3, #10]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	fb03 f202 	mul.w	r2, r3, r2
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfc:	4413      	add	r3, r2
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b086      	sub	sp, #24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d904      	bls.n	800cc2a <get_fat+0x20>
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d302      	bcc.n	800cc30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	e08f      	b.n	800cd50 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295
 800cc34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d062      	beq.n	800cd04 <get_fat+0xfa>
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	dc7c      	bgt.n	800cd3c <get_fat+0x132>
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d002      	beq.n	800cc4c <get_fat+0x42>
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d042      	beq.n	800ccd0 <get_fat+0xc6>
 800cc4a:	e077      	b.n	800cd3c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	0a5b      	lsrs	r3, r3, #9
 800cc62:	4413      	add	r3, r2
 800cc64:	4619      	mov	r1, r3
 800cc66:	6938      	ldr	r0, [r7, #16]
 800cc68:	f7ff ff14 	bl	800ca94 <move_window>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d167      	bne.n	800cd42 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	60fa      	str	r2, [r7, #12]
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	0a5b      	lsrs	r3, r3, #9
 800cc8e:	4413      	add	r3, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	6938      	ldr	r0, [r7, #16]
 800cc94:	f7ff fefe 	bl	800ca94 <move_window>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d153      	bne.n	800cd46 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	4413      	add	r3, r2
 800cca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	461a      	mov	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <get_fat+0xbc>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	091b      	lsrs	r3, r3, #4
 800ccc4:	e002      	b.n	800cccc <get_fat+0xc2>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cccc:	617b      	str	r3, [r7, #20]
			break;
 800ccce:	e03f      	b.n	800cd50 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	0a1b      	lsrs	r3, r3, #8
 800ccd8:	4413      	add	r3, r2
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6938      	ldr	r0, [r7, #16]
 800ccde:	f7ff fed9 	bl	800ca94 <move_window>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d130      	bne.n	800cd4a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fbe9 	bl	800c4d0 <ld_word>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	617b      	str	r3, [r7, #20]
			break;
 800cd02:	e025      	b.n	800cd50 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	09db      	lsrs	r3, r3, #7
 800cd0c:	4413      	add	r3, r2
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6938      	ldr	r0, [r7, #16]
 800cd12:	f7ff febf 	bl	800ca94 <move_window>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d118      	bne.n	800cd4e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fbe7 	bl	800c500 <ld_dword>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd38:	617b      	str	r3, [r7, #20]
			break;
 800cd3a:	e009      	b.n	800cd50 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e006      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd42:	bf00      	nop
 800cd44:	e004      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd46:	bf00      	nop
 800cd48:	e002      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd4a:	bf00      	nop
 800cd4c:	e000      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd4e:	bf00      	nop
		}
	}

	return val;
 800cd50:	697b      	ldr	r3, [r7, #20]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cd5a:	b590      	push	{r4, r7, lr}
 800cd5c:	b089      	sub	sp, #36	; 0x24
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cd66:	2302      	movs	r3, #2
 800cd68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f240 80d2 	bls.w	800cf16 <put_fat+0x1bc>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	f080 80cc 	bcs.w	800cf16 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	f000 8096 	beq.w	800ceb4 <put_fat+0x15a>
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	f300 80cd 	bgt.w	800cf28 <put_fat+0x1ce>
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d002      	beq.n	800cd98 <put_fat+0x3e>
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d06e      	beq.n	800ce74 <put_fat+0x11a>
 800cd96:	e0c7      	b.n	800cf28 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	085b      	lsrs	r3, r3, #1
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	4413      	add	r3, r2
 800cda4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	0a5b      	lsrs	r3, r3, #9
 800cdae:	4413      	add	r3, r2
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff fe6e 	bl	800ca94 <move_window>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdbc:	7ffb      	ldrb	r3, [r7, #31]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f040 80ab 	bne.w	800cf1a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	1c59      	adds	r1, r3, #1
 800cdce:	61b9      	str	r1, [r7, #24]
 800cdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd4:	4413      	add	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00d      	beq.n	800cdfe <put_fat+0xa4>
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	b25b      	sxtb	r3, r3
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	b25a      	sxtb	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	011b      	lsls	r3, r3, #4
 800cdf4:	b25b      	sxtb	r3, r3
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	b25b      	sxtb	r3, r3
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	e001      	b.n	800ce02 <put_fat+0xa8>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	0a5b      	lsrs	r3, r3, #9
 800ce14:	4413      	add	r3, r2
 800ce16:	4619      	mov	r1, r3
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff fe3b 	bl	800ca94 <move_window>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce22:	7ffb      	ldrb	r3, [r7, #31]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d17a      	bne.n	800cf1e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	4413      	add	r3, r2
 800ce36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <put_fat+0xf0>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	091b      	lsrs	r3, r3, #4
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	e00e      	b.n	800ce68 <put_fat+0x10e>
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	f023 030f 	bic.w	r3, r3, #15
 800ce54:	b25a      	sxtb	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	0a1b      	lsrs	r3, r3, #8
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	4313      	orrs	r3, r2
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	70da      	strb	r2, [r3, #3]
			break;
 800ce72:	e059      	b.n	800cf28 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	0a1b      	lsrs	r3, r3, #8
 800ce7c:	4413      	add	r3, r2
 800ce7e:	4619      	mov	r1, r3
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f7ff fe07 	bl	800ca94 <move_window>
 800ce86:	4603      	mov	r3, r0
 800ce88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce8a:	7ffb      	ldrb	r3, [r7, #31]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d148      	bne.n	800cf22 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ce9e:	4413      	add	r3, r2
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	b292      	uxth	r2, r2
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff fb4d 	bl	800c546 <st_word>
			fs->wflag = 1;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	70da      	strb	r2, [r3, #3]
			break;
 800ceb2:	e039      	b.n	800cf28 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	09db      	lsrs	r3, r3, #7
 800cebc:	4413      	add	r3, r2
 800cebe:	4619      	mov	r1, r3
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff fde7 	bl	800ca94 <move_window>
 800cec6:	4603      	mov	r3, r0
 800cec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ceca:	7ffb      	ldrb	r3, [r7, #31]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d12a      	bne.n	800cf26 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cee4:	4413      	add	r3, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff fb0a 	bl	800c500 <ld_dword>
 800ceec:	4603      	mov	r3, r0
 800ceee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cef2:	4323      	orrs	r3, r4
 800cef4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf04:	4413      	add	r3, r2
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fb37 	bl	800c57c <st_dword>
			fs->wflag = 1;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2201      	movs	r2, #1
 800cf12:	70da      	strb	r2, [r3, #3]
			break;
 800cf14:	e008      	b.n	800cf28 <put_fat+0x1ce>
		}
	}
 800cf16:	bf00      	nop
 800cf18:	e006      	b.n	800cf28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf1a:	bf00      	nop
 800cf1c:	e004      	b.n	800cf28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf1e:	bf00      	nop
 800cf20:	e002      	b.n	800cf28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf22:	bf00      	nop
 800cf24:	e000      	b.n	800cf28 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cf26:	bf00      	nop
	return res;
 800cf28:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3724      	adds	r7, #36	; 0x24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd90      	pop	{r4, r7, pc}

0800cf32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d904      	bls.n	800cf58 <remove_chain+0x26>
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	69db      	ldr	r3, [r3, #28]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d301      	bcc.n	800cf5c <remove_chain+0x2a>
 800cf58:	2302      	movs	r3, #2
 800cf5a:	e04b      	b.n	800cff4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00c      	beq.n	800cf7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cf62:	f04f 32ff 	mov.w	r2, #4294967295
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	69b8      	ldr	r0, [r7, #24]
 800cf6a:	f7ff fef6 	bl	800cd5a <put_fat>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cf72:	7ffb      	ldrb	r3, [r7, #31]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <remove_chain+0x4a>
 800cf78:	7ffb      	ldrb	r3, [r7, #31]
 800cf7a:	e03b      	b.n	800cff4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7ff fe43 	bl	800cc0a <get_fat>
 800cf84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d031      	beq.n	800cff0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d101      	bne.n	800cf96 <remove_chain+0x64>
 800cf92:	2302      	movs	r3, #2
 800cf94:	e02e      	b.n	800cff4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d101      	bne.n	800cfa2 <remove_chain+0x70>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e028      	b.n	800cff4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	69b8      	ldr	r0, [r7, #24]
 800cfa8:	f7ff fed7 	bl	800cd5a <put_fat>
 800cfac:	4603      	mov	r3, r0
 800cfae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cfb0:	7ffb      	ldrb	r3, [r7, #31]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <remove_chain+0x88>
 800cfb6:	7ffb      	ldrb	r3, [r7, #31]
 800cfb8:	e01c      	b.n	800cff4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	69db      	ldr	r3, [r3, #28]
 800cfc2:	3b02      	subs	r3, #2
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d20b      	bcs.n	800cfe0 <remove_chain+0xae>
			fs->free_clst++;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	791b      	ldrb	r3, [r3, #4]
 800cfd6:	f043 0301 	orr.w	r3, r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	69db      	ldr	r3, [r3, #28]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d3c6      	bcc.n	800cf7c <remove_chain+0x4a>
 800cfee:	e000      	b.n	800cff2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cff0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3720      	adds	r7, #32
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10d      	bne.n	800d02e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <create_chain+0x2c>
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	429a      	cmp	r2, r3
 800d026:	d31b      	bcc.n	800d060 <create_chain+0x64>
 800d028:	2301      	movs	r3, #1
 800d02a:	61bb      	str	r3, [r7, #24]
 800d02c:	e018      	b.n	800d060 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff fdea 	bl	800cc0a <get_fat>
 800d036:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d801      	bhi.n	800d042 <create_chain+0x46>
 800d03e:	2301      	movs	r3, #1
 800d040:	e070      	b.n	800d124 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d048:	d101      	bne.n	800d04e <create_chain+0x52>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	e06a      	b.n	800d124 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	429a      	cmp	r2, r3
 800d056:	d201      	bcs.n	800d05c <create_chain+0x60>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	e063      	b.n	800d124 <create_chain+0x128>
		scl = clst;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	3301      	adds	r3, #1
 800d068:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	69fa      	ldr	r2, [r7, #28]
 800d070:	429a      	cmp	r2, r3
 800d072:	d307      	bcc.n	800d084 <create_chain+0x88>
				ncl = 2;
 800d074:	2302      	movs	r3, #2
 800d076:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d078:	69fa      	ldr	r2, [r7, #28]
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d901      	bls.n	800d084 <create_chain+0x88>
 800d080:	2300      	movs	r3, #0
 800d082:	e04f      	b.n	800d124 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d084:	69f9      	ldr	r1, [r7, #28]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff fdbf 	bl	800cc0a <get_fat>
 800d08c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00e      	beq.n	800d0b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d003      	beq.n	800d0a2 <create_chain+0xa6>
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a0:	d101      	bne.n	800d0a6 <create_chain+0xaa>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	e03e      	b.n	800d124 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d0a6:	69fa      	ldr	r2, [r7, #28]
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d1da      	bne.n	800d064 <create_chain+0x68>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e038      	b.n	800d124 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d0b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b8:	69f9      	ldr	r1, [r7, #28]
 800d0ba:	6938      	ldr	r0, [r7, #16]
 800d0bc:	f7ff fe4d 	bl	800cd5a <put_fat>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d109      	bne.n	800d0de <create_chain+0xe2>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	6938      	ldr	r0, [r7, #16]
 800d0d6:	f7ff fe40 	bl	800cd5a <put_fat>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d116      	bne.n	800d112 <create_chain+0x116>
		fs->last_clst = ncl;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	69fa      	ldr	r2, [r7, #28]
 800d0e8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	699a      	ldr	r2, [r3, #24]
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	3b02      	subs	r3, #2
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d804      	bhi.n	800d102 <create_chain+0x106>
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	1e5a      	subs	r2, r3, #1
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	791b      	ldrb	r3, [r3, #4]
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	711a      	strb	r2, [r3, #4]
 800d110:	e007      	b.n	800d122 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d102      	bne.n	800d11e <create_chain+0x122>
 800d118:	f04f 33ff 	mov.w	r3, #4294967295
 800d11c:	e000      	b.n	800d120 <create_chain+0x124>
 800d11e:	2301      	movs	r3, #1
 800d120:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d122:	69fb      	ldr	r3, [r7, #28]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d140:	3304      	adds	r3, #4
 800d142:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	0a5b      	lsrs	r3, r3, #9
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	8952      	ldrh	r2, [r2, #10]
 800d14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d150:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	1d1a      	adds	r2, r3, #4
 800d156:	613a      	str	r2, [r7, #16]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <clmt_clust+0x3a>
 800d162:	2300      	movs	r3, #0
 800d164:	e010      	b.n	800d188 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d307      	bcc.n	800d17e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	617b      	str	r3, [r7, #20]
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	3304      	adds	r3, #4
 800d17a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d17c:	e7e9      	b.n	800d152 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d17e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	4413      	add	r3, r2
}
 800d188:	4618      	mov	r0, r3
 800d18a:	371c      	adds	r7, #28
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1aa:	d204      	bcs.n	800d1b6 <dir_sdi+0x22>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	f003 031f 	and.w	r3, r3, #31
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800d1b6:	2302      	movs	r3, #2
 800d1b8:	e063      	b.n	800d282 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d106      	bne.n	800d1da <dir_sdi+0x46>
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d902      	bls.n	800d1da <dir_sdi+0x46>
		clst = fs->dirbase;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10c      	bne.n	800d1fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	095b      	lsrs	r3, r3, #5
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	8912      	ldrh	r2, [r2, #8]
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d301      	bcc.n	800d1f0 <dir_sdi+0x5c>
 800d1ec:	2302      	movs	r3, #2
 800d1ee:	e048      	b.n	800d282 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	61da      	str	r2, [r3, #28]
 800d1f8:	e029      	b.n	800d24e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	025b      	lsls	r3, r3, #9
 800d200:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d202:	e019      	b.n	800d238 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6979      	ldr	r1, [r7, #20]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff fcfe 	bl	800cc0a <get_fat>
 800d20e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d216:	d101      	bne.n	800d21c <dir_sdi+0x88>
 800d218:	2301      	movs	r3, #1
 800d21a:	e032      	b.n	800d282 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d904      	bls.n	800d22c <dir_sdi+0x98>
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	69db      	ldr	r3, [r3, #28]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d301      	bcc.n	800d230 <dir_sdi+0x9c>
 800d22c:	2302      	movs	r3, #2
 800d22e:	e028      	b.n	800d282 <dir_sdi+0xee>
			ofs -= csz;
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d2e1      	bcs.n	800d204 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d240:	6979      	ldr	r1, [r7, #20]
 800d242:	6938      	ldr	r0, [r7, #16]
 800d244:	f7ff fcc2 	bl	800cbcc <clust2sect>
 800d248:	4602      	mov	r2, r0
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	69db      	ldr	r3, [r3, #28]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <dir_sdi+0xcc>
 800d25c:	2302      	movs	r3, #2
 800d25e:	e010      	b.n	800d282 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	69da      	ldr	r2, [r3, #28]
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	0a5b      	lsrs	r3, r3, #9
 800d268:	441a      	add	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27a:	441a      	add	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3718      	adds	r7, #24
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b086      	sub	sp, #24
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	3320      	adds	r3, #32
 800d2a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	69db      	ldr	r3, [r3, #28]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d003      	beq.n	800d2b2 <dir_next+0x28>
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2b0:	d301      	bcc.n	800d2b6 <dir_next+0x2c>
 800d2b2:	2304      	movs	r3, #4
 800d2b4:	e0aa      	b.n	800d40c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f040 8098 	bne.w	800d3f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10b      	bne.n	800d2ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	095b      	lsrs	r3, r3, #5
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	8912      	ldrh	r2, [r2, #8]
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	f0c0 8088 	bcc.w	800d3f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	61da      	str	r2, [r3, #28]
 800d2e8:	2304      	movs	r3, #4
 800d2ea:	e08f      	b.n	800d40c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	0a5b      	lsrs	r3, r3, #9
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	8952      	ldrh	r2, [r2, #10]
 800d2f4:	3a01      	subs	r2, #1
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d17a      	bne.n	800d3f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f7ff fc80 	bl	800cc0a <get_fat>
 800d30a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d801      	bhi.n	800d316 <dir_next+0x8c>
 800d312:	2302      	movs	r3, #2
 800d314:	e07a      	b.n	800d40c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31c:	d101      	bne.n	800d322 <dir_next+0x98>
 800d31e:	2301      	movs	r3, #1
 800d320:	e074      	b.n	800d40c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	69db      	ldr	r3, [r3, #28]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d358      	bcc.n	800d3de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d104      	bne.n	800d33c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	61da      	str	r2, [r3, #28]
 800d338:	2304      	movs	r3, #4
 800d33a:	e067      	b.n	800d40c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	699b      	ldr	r3, [r3, #24]
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7ff fe59 	bl	800cffc <create_chain>
 800d34a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <dir_next+0xcc>
 800d352:	2307      	movs	r3, #7
 800d354:	e05a      	b.n	800d40c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d101      	bne.n	800d360 <dir_next+0xd6>
 800d35c:	2302      	movs	r3, #2
 800d35e:	e055      	b.n	800d40c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d366:	d101      	bne.n	800d36c <dir_next+0xe2>
 800d368:	2301      	movs	r3, #1
 800d36a:	e04f      	b.n	800d40c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7ff fb4d 	bl	800ca0c <sync_window>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <dir_next+0xf2>
 800d378:	2301      	movs	r3, #1
 800d37a:	e047      	b.n	800d40c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3338      	adds	r3, #56	; 0x38
 800d380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d384:	2100      	movs	r1, #0
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff f945 	bl	800c616 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d38c:	2300      	movs	r3, #0
 800d38e:	613b      	str	r3, [r7, #16]
 800d390:	6979      	ldr	r1, [r7, #20]
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7ff fc1a 	bl	800cbcc <clust2sect>
 800d398:	4602      	mov	r2, r0
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	635a      	str	r2, [r3, #52]	; 0x34
 800d39e:	e012      	b.n	800d3c6 <dir_next+0x13c>
						fs->wflag = 1;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fb30 	bl	800ca0c <sync_window>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <dir_next+0x12c>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e02a      	b.n	800d40c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	613b      	str	r3, [r7, #16]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	635a      	str	r2, [r3, #52]	; 0x34
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	895b      	ldrh	r3, [r3, #10]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d3e6      	bcc.n	800d3a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	1ad2      	subs	r2, r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d3e4:	6979      	ldr	r1, [r7, #20]
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7ff fbf0 	bl	800cbcc <clust2sect>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d404:	441a      	add	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d424:	2100      	movs	r1, #0
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff feb4 	bl	800d194 <dir_sdi>
 800d42c:	4603      	mov	r3, r0
 800d42e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d430:	7dfb      	ldrb	r3, [r7, #23]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d12b      	bne.n	800d48e <dir_alloc+0x7a>
		n = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	4619      	mov	r1, r3
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff fb27 	bl	800ca94 <move_window>
 800d446:	4603      	mov	r3, r0
 800d448:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d11d      	bne.n	800d48c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2be5      	cmp	r3, #229	; 0xe5
 800d458:	d004      	beq.n	800d464 <dir_alloc+0x50>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	3301      	adds	r3, #1
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d102      	bne.n	800d478 <dir_alloc+0x64>
 800d472:	e00c      	b.n	800d48e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d474:	2300      	movs	r3, #0
 800d476:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d478:	2101      	movs	r1, #1
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ff05 	bl	800d28a <dir_next>
 800d480:	4603      	mov	r3, r0
 800d482:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d0d7      	beq.n	800d43a <dir_alloc+0x26>
 800d48a:	e000      	b.n	800d48e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d48c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b04      	cmp	r3, #4
 800d492:	d101      	bne.n	800d498 <dir_alloc+0x84>
 800d494:	2307      	movs	r3, #7
 800d496:	75fb      	strb	r3, [r7, #23]
	return res;
 800d498:	7dfb      	ldrb	r3, [r7, #23]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	331a      	adds	r3, #26
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff f80d 	bl	800c4d0 <ld_word>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d109      	bne.n	800d4d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	3314      	adds	r3, #20
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff f802 	bl	800c4d0 <ld_word>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	041b      	lsls	r3, r3, #16
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	331a      	adds	r3, #26
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	b292      	uxth	r2, r2
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff f825 	bl	800c546 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b03      	cmp	r3, #3
 800d502:	d109      	bne.n	800d518 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	f103 0214 	add.w	r2, r3, #20
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	0c1b      	lsrs	r3, r3, #16
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4619      	mov	r1, r3
 800d512:	4610      	mov	r0, r2
 800d514:	f7ff f817 	bl	800c546 <st_word>
	}
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d520:	b590      	push	{r4, r7, lr}
 800d522:	b087      	sub	sp, #28
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	331a      	adds	r3, #26
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fe ffce 	bl	800c4d0 <ld_word>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <cmp_lfn+0x1e>
 800d53a:	2300      	movs	r3, #0
 800d53c:	e059      	b.n	800d5f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d546:	1e5a      	subs	r2, r3, #1
 800d548:	4613      	mov	r3, r2
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d554:	2301      	movs	r3, #1
 800d556:	81fb      	strh	r3, [r7, #14]
 800d558:	2300      	movs	r3, #0
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	e033      	b.n	800d5c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d55e:	4a27      	ldr	r2, [pc, #156]	; (800d5fc <cmp_lfn+0xdc>)
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	4413      	add	r3, r2
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	4413      	add	r3, r2
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fe ffaf 	bl	800c4d0 <ld_word>
 800d572:	4603      	mov	r3, r0
 800d574:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d576:	89fb      	ldrh	r3, [r7, #14]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01a      	beq.n	800d5b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	2bfe      	cmp	r3, #254	; 0xfe
 800d580:	d812      	bhi.n	800d5a8 <cmp_lfn+0x88>
 800d582:	89bb      	ldrh	r3, [r7, #12]
 800d584:	4618      	mov	r0, r3
 800d586:	f002 fe85 	bl	8010294 <ff_wtoupper>
 800d58a:	4603      	mov	r3, r0
 800d58c:	461c      	mov	r4, r3
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	617a      	str	r2, [r7, #20]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f002 fe79 	bl	8010294 <ff_wtoupper>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	429c      	cmp	r4, r3
 800d5a6:	d001      	beq.n	800d5ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	e022      	b.n	800d5f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d5ac:	89bb      	ldrh	r3, [r7, #12]
 800d5ae:	81fb      	strh	r3, [r7, #14]
 800d5b0:	e006      	b.n	800d5c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5b2:	89bb      	ldrh	r3, [r7, #12]
 800d5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d001      	beq.n	800d5c0 <cmp_lfn+0xa0>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e018      	b.n	800d5f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	613b      	str	r3, [r7, #16]
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	2b0c      	cmp	r3, #12
 800d5ca:	d9c8      	bls.n	800d55e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <cmp_lfn+0xd0>
 800d5d8:	89fb      	ldrh	r3, [r7, #14]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d008      	beq.n	800d5f0 <cmp_lfn+0xd0>
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	005b      	lsls	r3, r3, #1
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <cmp_lfn+0xd0>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	e000      	b.n	800d5f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d5f0:	2301      	movs	r3, #1
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd90      	pop	{r4, r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	0801a7b4 	.word	0x0801a7b4

0800d600 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	331a      	adds	r3, #26
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe ff5e 	bl	800c4d0 <ld_word>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <pick_lfn+0x1e>
 800d61a:	2300      	movs	r3, #0
 800d61c:	e04d      	b.n	800d6ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d626:	1e5a      	subs	r2, r3, #1
 800d628:	4613      	mov	r3, r2
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	4413      	add	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d634:	2301      	movs	r3, #1
 800d636:	81fb      	strh	r3, [r7, #14]
 800d638:	2300      	movs	r3, #0
 800d63a:	613b      	str	r3, [r7, #16]
 800d63c:	e028      	b.n	800d690 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d63e:	4a21      	ldr	r2, [pc, #132]	; (800d6c4 <pick_lfn+0xc4>)
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	4413      	add	r3, r2
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	461a      	mov	r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	4413      	add	r3, r2
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fe ff3f 	bl	800c4d0 <ld_word>
 800d652:	4603      	mov	r3, r0
 800d654:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d656:	89fb      	ldrh	r3, [r7, #14]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00f      	beq.n	800d67c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	2bfe      	cmp	r3, #254	; 0xfe
 800d660:	d901      	bls.n	800d666 <pick_lfn+0x66>
 800d662:	2300      	movs	r3, #0
 800d664:	e029      	b.n	800d6ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d666:	89bb      	ldrh	r3, [r7, #12]
 800d668:	81fb      	strh	r3, [r7, #14]
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	617a      	str	r2, [r7, #20]
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	4413      	add	r3, r2
 800d676:	89fa      	ldrh	r2, [r7, #14]
 800d678:	801a      	strh	r2, [r3, #0]
 800d67a:	e006      	b.n	800d68a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d67c:	89bb      	ldrh	r3, [r7, #12]
 800d67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d682:	4293      	cmp	r3, r2
 800d684:	d001      	beq.n	800d68a <pick_lfn+0x8a>
 800d686:	2300      	movs	r3, #0
 800d688:	e017      	b.n	800d6ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	3301      	adds	r3, #1
 800d68e:	613b      	str	r3, [r7, #16]
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	2b0c      	cmp	r3, #12
 800d694:	d9d3      	bls.n	800d63e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2bfe      	cmp	r3, #254	; 0xfe
 800d6a6:	d901      	bls.n	800d6ac <pick_lfn+0xac>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e006      	b.n	800d6ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d6b8:	2301      	movs	r3, #1
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	0801a7b4 	.word	0x0801a7b4

0800d6c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	71fb      	strb	r3, [r7, #7]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	330d      	adds	r3, #13
 800d6e2:	79ba      	ldrb	r2, [r7, #6]
 800d6e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	330b      	adds	r3, #11
 800d6ea:	220f      	movs	r2, #15
 800d6ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	330c      	adds	r3, #12
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	331a      	adds	r3, #26
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe ff22 	bl	800c546 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	1e5a      	subs	r2, r3, #1
 800d706:	4613      	mov	r3, r2
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	82fb      	strh	r3, [r7, #22]
 800d716:	2300      	movs	r3, #0
 800d718:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d71a:	8afb      	ldrh	r3, [r7, #22]
 800d71c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d720:	4293      	cmp	r3, r2
 800d722:	d007      	beq.n	800d734 <put_lfn+0x6c>
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	61fa      	str	r2, [r7, #28]
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d734:	4a17      	ldr	r2, [pc, #92]	; (800d794 <put_lfn+0xcc>)
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	4413      	add	r3, r2
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	4413      	add	r3, r2
 800d742:	8afa      	ldrh	r2, [r7, #22]
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fefd 	bl	800c546 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d74c:	8afb      	ldrh	r3, [r7, #22]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d102      	bne.n	800d758 <put_lfn+0x90>
 800d752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d756:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	3301      	adds	r3, #1
 800d75c:	61bb      	str	r3, [r7, #24]
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	2b0c      	cmp	r3, #12
 800d762:	d9da      	bls.n	800d71a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d764:	8afb      	ldrh	r3, [r7, #22]
 800d766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d006      	beq.n	800d77c <put_lfn+0xb4>
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	4413      	add	r3, r2
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d103      	bne.n	800d784 <put_lfn+0xbc>
 800d77c:	79fb      	ldrb	r3, [r7, #7]
 800d77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d782:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	79fa      	ldrb	r2, [r7, #7]
 800d788:	701a      	strb	r2, [r3, #0]
}
 800d78a:	bf00      	nop
 800d78c:	3720      	adds	r7, #32
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	0801a7b4 	.word	0x0801a7b4

0800d798 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08c      	sub	sp, #48	; 0x30
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d7a6:	220b      	movs	r2, #11
 800d7a8:	68b9      	ldr	r1, [r7, #8]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7fe ff12 	bl	800c5d4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	d92b      	bls.n	800d80e <gen_numname+0x76>
		sr = seq;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d7ba:	e022      	b.n	800d802 <gen_numname+0x6a>
			wc = *lfn++;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	1c9a      	adds	r2, r3, #2
 800d7c0:	607a      	str	r2, [r7, #4]
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7ca:	e017      	b.n	800d7fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	005a      	lsls	r2, r3, #1
 800d7d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	4413      	add	r3, r2
 800d7d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d7da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7dc:	085b      	lsrs	r3, r3, #1
 800d7de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d005      	beq.n	800d7f6 <gen_numname+0x5e>
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d7f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d7f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fe:	2b0f      	cmp	r3, #15
 800d800:	d9e4      	bls.n	800d7cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1d8      	bne.n	800d7bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d80e:	2307      	movs	r3, #7
 800d810:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 030f 	and.w	r3, r3, #15
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	3330      	adds	r3, #48	; 0x30
 800d81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d826:	2b39      	cmp	r3, #57	; 0x39
 800d828:	d904      	bls.n	800d834 <gen_numname+0x9c>
 800d82a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d82e:	3307      	adds	r3, #7
 800d830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	1e5a      	subs	r2, r3, #1
 800d838:	62ba      	str	r2, [r7, #40]	; 0x28
 800d83a:	3330      	adds	r3, #48	; 0x30
 800d83c:	443b      	add	r3, r7
 800d83e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d842:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	091b      	lsrs	r3, r3, #4
 800d84a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1df      	bne.n	800d812 <gen_numname+0x7a>
	ns[i] = '~';
 800d852:	f107 0214 	add.w	r2, r7, #20
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	4413      	add	r3, r2
 800d85a:	227e      	movs	r2, #126	; 0x7e
 800d85c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d85e:	2300      	movs	r3, #0
 800d860:	627b      	str	r3, [r7, #36]	; 0x24
 800d862:	e002      	b.n	800d86a <gen_numname+0xd2>
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	3301      	adds	r3, #1
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
 800d86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	429a      	cmp	r2, r3
 800d870:	d205      	bcs.n	800d87e <gen_numname+0xe6>
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	4413      	add	r3, r2
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b20      	cmp	r3, #32
 800d87c:	d1f2      	bne.n	800d864 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	2b07      	cmp	r3, #7
 800d882:	d807      	bhi.n	800d894 <gen_numname+0xfc>
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	1c5a      	adds	r2, r3, #1
 800d888:	62ba      	str	r2, [r7, #40]	; 0x28
 800d88a:	3330      	adds	r3, #48	; 0x30
 800d88c:	443b      	add	r3, r7
 800d88e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d892:	e000      	b.n	800d896 <gen_numname+0xfe>
 800d894:	2120      	movs	r1, #32
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	1c5a      	adds	r2, r3, #1
 800d89a:	627a      	str	r2, [r7, #36]	; 0x24
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	460a      	mov	r2, r1
 800d8a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	2b07      	cmp	r3, #7
 800d8a8:	d9e9      	bls.n	800d87e <gen_numname+0xe6>
}
 800d8aa:	bf00      	nop
 800d8ac:	bf00      	nop
 800d8ae:	3730      	adds	r7, #48	; 0x30
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d8c0:	230b      	movs	r3, #11
 800d8c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	0852      	lsrs	r2, r2, #1
 800d8ca:	01db      	lsls	r3, r3, #7
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	1c59      	adds	r1, r3, #1
 800d8d4:	6079      	str	r1, [r7, #4]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	4413      	add	r3, r2
 800d8da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	60bb      	str	r3, [r7, #8]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1ed      	bne.n	800d8c4 <sum_sfn+0x10>
	return sum;
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b086      	sub	sp, #24
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d900:	2304      	movs	r3, #4
 800d902:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d90a:	23ff      	movs	r3, #255	; 0xff
 800d90c:	757b      	strb	r3, [r7, #21]
 800d90e:	23ff      	movs	r3, #255	; 0xff
 800d910:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d912:	e081      	b.n	800da18 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	4619      	mov	r1, r3
 800d91a:	6938      	ldr	r0, [r7, #16]
 800d91c:	f7ff f8ba 	bl	800ca94 <move_window>
 800d920:	4603      	mov	r3, r0
 800d922:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d17c      	bne.n	800da24 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d932:	7dbb      	ldrb	r3, [r7, #22]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d102      	bne.n	800d93e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d938:	2304      	movs	r3, #4
 800d93a:	75fb      	strb	r3, [r7, #23]
 800d93c:	e077      	b.n	800da2e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	330b      	adds	r3, #11
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d94a:	73fb      	strb	r3, [r7, #15]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7bfa      	ldrb	r2, [r7, #15]
 800d950:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d952:	7dbb      	ldrb	r3, [r7, #22]
 800d954:	2be5      	cmp	r3, #229	; 0xe5
 800d956:	d00e      	beq.n	800d976 <dir_read+0x80>
 800d958:	7dbb      	ldrb	r3, [r7, #22]
 800d95a:	2b2e      	cmp	r3, #46	; 0x2e
 800d95c:	d00b      	beq.n	800d976 <dir_read+0x80>
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	f023 0320 	bic.w	r3, r3, #32
 800d964:	2b08      	cmp	r3, #8
 800d966:	bf0c      	ite	eq
 800d968:	2301      	moveq	r3, #1
 800d96a:	2300      	movne	r3, #0
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	461a      	mov	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	4293      	cmp	r3, r2
 800d974:	d002      	beq.n	800d97c <dir_read+0x86>
				ord = 0xFF;
 800d976:	23ff      	movs	r3, #255	; 0xff
 800d978:	757b      	strb	r3, [r7, #21]
 800d97a:	e044      	b.n	800da06 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
 800d97e:	2b0f      	cmp	r3, #15
 800d980:	d12f      	bne.n	800d9e2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d982:	7dbb      	ldrb	r3, [r7, #22]
 800d984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00d      	beq.n	800d9a8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a1b      	ldr	r3, [r3, #32]
 800d990:	7b5b      	ldrb	r3, [r3, #13]
 800d992:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d994:	7dbb      	ldrb	r3, [r7, #22]
 800d996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d99a:	75bb      	strb	r3, [r7, #22]
 800d99c:	7dbb      	ldrb	r3, [r7, #22]
 800d99e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	695a      	ldr	r2, [r3, #20]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d9a8:	7dba      	ldrb	r2, [r7, #22]
 800d9aa:	7d7b      	ldrb	r3, [r7, #21]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d115      	bne.n	800d9dc <dir_read+0xe6>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a1b      	ldr	r3, [r3, #32]
 800d9b4:	330d      	adds	r3, #13
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	7d3a      	ldrb	r2, [r7, #20]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d10e      	bne.n	800d9dc <dir_read+0xe6>
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	68da      	ldr	r2, [r3, #12]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7ff fe19 	bl	800d600 <pick_lfn>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <dir_read+0xe6>
 800d9d4:	7d7b      	ldrb	r3, [r7, #21]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	e000      	b.n	800d9de <dir_read+0xe8>
 800d9dc:	23ff      	movs	r3, #255	; 0xff
 800d9de:	757b      	strb	r3, [r7, #21]
 800d9e0:	e011      	b.n	800da06 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d9e2:	7d7b      	ldrb	r3, [r7, #21]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d109      	bne.n	800d9fc <dir_read+0x106>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a1b      	ldr	r3, [r3, #32]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff ff61 	bl	800d8b4 <sum_sfn>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	7d3b      	ldrb	r3, [r7, #20]
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d015      	beq.n	800da28 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800da02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800da04:	e010      	b.n	800da28 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800da06:	2100      	movs	r1, #0
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fc3e 	bl	800d28a <dir_next>
 800da0e:	4603      	mov	r3, r0
 800da10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <dir_read+0x136>
	while (dp->sect) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f47f af79 	bne.w	800d914 <dir_read+0x1e>
 800da22:	e004      	b.n	800da2e <dir_read+0x138>
		if (res != FR_OK) break;
 800da24:	bf00      	nop
 800da26:	e002      	b.n	800da2e <dir_read+0x138>
					break;
 800da28:	bf00      	nop
 800da2a:	e000      	b.n	800da2e <dir_read+0x138>
		if (res != FR_OK) break;
 800da2c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <dir_read+0x144>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	61da      	str	r2, [r3, #28]
	return res;
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800da52:	2100      	movs	r1, #0
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7ff fb9d 	bl	800d194 <dir_sdi>
 800da5a:	4603      	mov	r3, r0
 800da5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800da5e:	7dfb      	ldrb	r3, [r7, #23]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <dir_find+0x24>
 800da64:	7dfb      	ldrb	r3, [r7, #23]
 800da66:	e0a9      	b.n	800dbbc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da68:	23ff      	movs	r3, #255	; 0xff
 800da6a:	753b      	strb	r3, [r7, #20]
 800da6c:	7d3b      	ldrb	r3, [r7, #20]
 800da6e:	757b      	strb	r3, [r7, #21]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f04f 32ff 	mov.w	r2, #4294967295
 800da76:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	69db      	ldr	r3, [r3, #28]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6938      	ldr	r0, [r7, #16]
 800da80:	f7ff f808 	bl	800ca94 <move_window>
 800da84:	4603      	mov	r3, r0
 800da86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da88:	7dfb      	ldrb	r3, [r7, #23]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f040 8090 	bne.w	800dbb0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a1b      	ldr	r3, [r3, #32]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800da98:	7dbb      	ldrb	r3, [r7, #22]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d102      	bne.n	800daa4 <dir_find+0x60>
 800da9e:	2304      	movs	r3, #4
 800daa0:	75fb      	strb	r3, [r7, #23]
 800daa2:	e08a      	b.n	800dbba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	330b      	adds	r3, #11
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dab0:	73fb      	strb	r3, [r7, #15]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7bfa      	ldrb	r2, [r7, #15]
 800dab6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dab8:	7dbb      	ldrb	r3, [r7, #22]
 800daba:	2be5      	cmp	r3, #229	; 0xe5
 800dabc:	d007      	beq.n	800dace <dir_find+0x8a>
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	f003 0308 	and.w	r3, r3, #8
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d009      	beq.n	800dadc <dir_find+0x98>
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	2b0f      	cmp	r3, #15
 800dacc:	d006      	beq.n	800dadc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dace:	23ff      	movs	r3, #255	; 0xff
 800dad0:	757b      	strb	r3, [r7, #21]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f04f 32ff 	mov.w	r2, #4294967295
 800dad8:	631a      	str	r2, [r3, #48]	; 0x30
 800dada:	e05e      	b.n	800db9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	2b0f      	cmp	r3, #15
 800dae0:	d136      	bne.n	800db50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daec:	2b00      	cmp	r3, #0
 800daee:	d154      	bne.n	800db9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800daf0:	7dbb      	ldrb	r3, [r7, #22]
 800daf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00d      	beq.n	800db16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	7b5b      	ldrb	r3, [r3, #13]
 800db00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800db02:	7dbb      	ldrb	r3, [r7, #22]
 800db04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db08:	75bb      	strb	r3, [r7, #22]
 800db0a:	7dbb      	ldrb	r3, [r7, #22]
 800db0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	695a      	ldr	r2, [r3, #20]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db16:	7dba      	ldrb	r2, [r7, #22]
 800db18:	7d7b      	ldrb	r3, [r7, #21]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d115      	bne.n	800db4a <dir_find+0x106>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	330d      	adds	r3, #13
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	7d3a      	ldrb	r2, [r7, #20]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d10e      	bne.n	800db4a <dir_find+0x106>
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	4619      	mov	r1, r3
 800db36:	4610      	mov	r0, r2
 800db38:	f7ff fcf2 	bl	800d520 <cmp_lfn>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d003      	beq.n	800db4a <dir_find+0x106>
 800db42:	7d7b      	ldrb	r3, [r7, #21]
 800db44:	3b01      	subs	r3, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	e000      	b.n	800db4c <dir_find+0x108>
 800db4a:	23ff      	movs	r3, #255	; 0xff
 800db4c:	757b      	strb	r3, [r7, #21]
 800db4e:	e024      	b.n	800db9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800db50:	7d7b      	ldrb	r3, [r7, #21]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d109      	bne.n	800db6a <dir_find+0x126>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff feaa 	bl	800d8b4 <sum_sfn>
 800db60:	4603      	mov	r3, r0
 800db62:	461a      	mov	r2, r3
 800db64:	7d3b      	ldrb	r3, [r7, #20]
 800db66:	4293      	cmp	r3, r2
 800db68:	d024      	beq.n	800dbb4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <dir_find+0x14a>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a18      	ldr	r0, [r3, #32]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3324      	adds	r3, #36	; 0x24
 800db80:	220b      	movs	r2, #11
 800db82:	4619      	mov	r1, r3
 800db84:	f7fe fd62 	bl	800c64c <mem_cmp>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d014      	beq.n	800dbb8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db8e:	23ff      	movs	r3, #255	; 0xff
 800db90:	757b      	strb	r3, [r7, #21]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f04f 32ff 	mov.w	r2, #4294967295
 800db98:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db9a:	2100      	movs	r1, #0
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fb74 	bl	800d28a <dir_next>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f43f af65 	beq.w	800da78 <dir_find+0x34>
 800dbae:	e004      	b.n	800dbba <dir_find+0x176>
		if (res != FR_OK) break;
 800dbb0:	bf00      	nop
 800dbb2:	e002      	b.n	800dbba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dbb4:	bf00      	nop
 800dbb6:	e000      	b.n	800dbba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dbb8:	bf00      	nop

	return res;
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08c      	sub	sp, #48	; 0x30
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <dir_register+0x20>
 800dbe0:	2306      	movs	r3, #6
 800dbe2:	e0e0      	b.n	800dda6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe8:	e002      	b.n	800dbf0 <dir_register+0x2c>
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	3301      	adds	r3, #1
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	4413      	add	r3, r2
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1f4      	bne.n	800dbea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dc06:	f107 030c 	add.w	r3, r7, #12
 800dc0a:	220c      	movs	r2, #12
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fe fce1 	bl	800c5d4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc12:	7dfb      	ldrb	r3, [r7, #23]
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d032      	beq.n	800dc82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2240      	movs	r2, #64	; 0x40
 800dc20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dc24:	2301      	movs	r3, #1
 800dc26:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc28:	e016      	b.n	800dc58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	68da      	ldr	r2, [r3, #12]
 800dc34:	f107 010c 	add.w	r1, r7, #12
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	f7ff fdad 	bl	800d798 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff ff00 	bl	800da44 <dir_find>
 800dc44:	4603      	mov	r3, r0
 800dc46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dc4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d106      	bne.n	800dc60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	3301      	adds	r3, #1
 800dc56:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	2b63      	cmp	r3, #99	; 0x63
 800dc5c:	d9e5      	bls.n	800dc2a <dir_register+0x66>
 800dc5e:	e000      	b.n	800dc62 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dc60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	2b64      	cmp	r3, #100	; 0x64
 800dc66:	d101      	bne.n	800dc6c <dir_register+0xa8>
 800dc68:	2307      	movs	r3, #7
 800dc6a:	e09c      	b.n	800dda6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dc6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d002      	beq.n	800dc7a <dir_register+0xb6>
 800dc74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc78:	e095      	b.n	800dda6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dc7a:	7dfa      	ldrb	r2, [r7, #23]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d007      	beq.n	800dc9c <dir_register+0xd8>
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	330c      	adds	r3, #12
 800dc90:	4a47      	ldr	r2, [pc, #284]	; (800ddb0 <dir_register+0x1ec>)
 800dc92:	fba2 2303 	umull	r2, r3, r2, r3
 800dc96:	089b      	lsrs	r3, r3, #2
 800dc98:	3301      	adds	r3, #1
 800dc9a:	e000      	b.n	800dc9e <dir_register+0xda>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dca0:	6a39      	ldr	r1, [r7, #32]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff fbb6 	bl	800d414 <dir_alloc>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dcae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d148      	bne.n	800dd48 <dir_register+0x184>
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	623b      	str	r3, [r7, #32]
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d042      	beq.n	800dd48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	695a      	ldr	r2, [r3, #20]
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	015b      	lsls	r3, r3, #5
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff fa60 	bl	800d194 <dir_sdi>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dcda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d132      	bne.n	800dd48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3324      	adds	r3, #36	; 0x24
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7ff fde4 	bl	800d8b4 <sum_sfn>
 800dcec:	4603      	mov	r3, r0
 800dcee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	69db      	ldr	r3, [r3, #28]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	69f8      	ldr	r0, [r7, #28]
 800dcf8:	f7fe fecc 	bl	800ca94 <move_window>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dd02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d11d      	bne.n	800dd46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	68d8      	ldr	r0, [r3, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a19      	ldr	r1, [r3, #32]
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	7efb      	ldrb	r3, [r7, #27]
 800dd18:	f7ff fcd6 	bl	800d6c8 <put_lfn>
				fs->wflag = 1;
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dd22:	2100      	movs	r1, #0
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff fab0 	bl	800d28a <dir_next>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dd30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d107      	bne.n	800dd48 <dir_register+0x184>
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	623b      	str	r3, [r7, #32]
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1d5      	bne.n	800dcf0 <dir_register+0x12c>
 800dd44:	e000      	b.n	800dd48 <dir_register+0x184>
				if (res != FR_OK) break;
 800dd46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d128      	bne.n	800dda2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	69db      	ldr	r3, [r3, #28]
 800dd54:	4619      	mov	r1, r3
 800dd56:	69f8      	ldr	r0, [r7, #28]
 800dd58:	f7fe fe9c 	bl	800ca94 <move_window>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dd62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d11b      	bne.n	800dda2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a1b      	ldr	r3, [r3, #32]
 800dd6e:	2220      	movs	r2, #32
 800dd70:	2100      	movs	r1, #0
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe fc4f 	bl	800c616 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a18      	ldr	r0, [r3, #32]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3324      	adds	r3, #36	; 0x24
 800dd80:	220b      	movs	r2, #11
 800dd82:	4619      	mov	r1, r3
 800dd84:	f7fe fc26 	bl	800c5d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	330c      	adds	r3, #12
 800dd94:	f002 0218 	and.w	r2, r2, #24
 800dd98:	b2d2      	uxtb	r2, r2
 800dd9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3730      	adds	r7, #48	; 0x30
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800ddb4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd0:	d007      	beq.n	800dde2 <dir_remove+0x2e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff f9db 	bl	800d194 <dir_sdi>
 800ddde:	4603      	mov	r3, r0
 800dde0:	e000      	b.n	800dde4 <dir_remove+0x30>
 800dde2:	2300      	movs	r3, #0
 800dde4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d128      	bne.n	800de3e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	69db      	ldr	r3, [r3, #28]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6938      	ldr	r0, [r7, #16]
 800ddf4:	f7fe fe4e 	bl	800ca94 <move_window>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddfc:	7dfb      	ldrb	r3, [r7, #23]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d115      	bne.n	800de2e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	22e5      	movs	r2, #229	; 0xe5
 800de08:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2201      	movs	r2, #1
 800de0e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	695b      	ldr	r3, [r3, #20]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	429a      	cmp	r2, r3
 800de18:	d90b      	bls.n	800de32 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800de1a:	2100      	movs	r1, #0
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7ff fa34 	bl	800d28a <dir_next>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d0df      	beq.n	800ddec <dir_remove+0x38>
 800de2c:	e002      	b.n	800de34 <dir_remove+0x80>
			if (res != FR_OK) break;
 800de2e:	bf00      	nop
 800de30:	e000      	b.n	800de34 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800de32:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800de34:	7dfb      	ldrb	r3, [r7, #23]
 800de36:	2b04      	cmp	r3, #4
 800de38:	d101      	bne.n	800de3e <dir_remove+0x8a>
 800de3a:	2302      	movs	r3, #2
 800de3c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08a      	sub	sp, #40	; 0x28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	613b      	str	r3, [r7, #16]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	2300      	movs	r3, #0
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	61ba      	str	r2, [r7, #24]
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	4413      	add	r3, r2
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800de76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de78:	2b1f      	cmp	r3, #31
 800de7a:	d940      	bls.n	800defe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800de7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de7e:	2b2f      	cmp	r3, #47	; 0x2f
 800de80:	d006      	beq.n	800de90 <create_name+0x48>
 800de82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de84:	2b5c      	cmp	r3, #92	; 0x5c
 800de86:	d110      	bne.n	800deaa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de88:	e002      	b.n	800de90 <create_name+0x48>
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	3301      	adds	r3, #1
 800de8e:	61bb      	str	r3, [r7, #24]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	4413      	add	r3, r2
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b2f      	cmp	r3, #47	; 0x2f
 800de9a:	d0f6      	beq.n	800de8a <create_name+0x42>
 800de9c:	693a      	ldr	r2, [r7, #16]
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	4413      	add	r3, r2
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b5c      	cmp	r3, #92	; 0x5c
 800dea6:	d0f0      	beq.n	800de8a <create_name+0x42>
			break;
 800dea8:	e02a      	b.n	800df00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	2bfe      	cmp	r3, #254	; 0xfe
 800deae:	d901      	bls.n	800deb4 <create_name+0x6c>
 800deb0:	2306      	movs	r3, #6
 800deb2:	e17d      	b.n	800e1b0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800deb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800deba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800debc:	2101      	movs	r1, #1
 800debe:	4618      	mov	r0, r3
 800dec0:	f002 f9ac 	bl	801021c <ff_convert>
 800dec4:	4603      	mov	r3, r0
 800dec6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <create_name+0x8a>
 800dece:	2306      	movs	r3, #6
 800ded0:	e16e      	b.n	800e1b0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ded2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded4:	2b7f      	cmp	r3, #127	; 0x7f
 800ded6:	d809      	bhi.n	800deec <create_name+0xa4>
 800ded8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deda:	4619      	mov	r1, r3
 800dedc:	488d      	ldr	r0, [pc, #564]	; (800e114 <create_name+0x2cc>)
 800dede:	f7fe fbdc 	bl	800c69a <chk_chr>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <create_name+0xa4>
 800dee8:	2306      	movs	r3, #6
 800deea:	e161      	b.n	800e1b0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	617a      	str	r2, [r7, #20]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4413      	add	r3, r2
 800def8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800defa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800defc:	e7b4      	b.n	800de68 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800defe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	441a      	add	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df0c:	2b1f      	cmp	r3, #31
 800df0e:	d801      	bhi.n	800df14 <create_name+0xcc>
 800df10:	2304      	movs	r3, #4
 800df12:	e000      	b.n	800df16 <create_name+0xce>
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df1a:	e011      	b.n	800df40 <create_name+0xf8>
		w = lfn[di - 1];
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df22:	3b01      	subs	r3, #1
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4413      	add	r3, r2
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800df2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df30:	2b20      	cmp	r3, #32
 800df32:	d002      	beq.n	800df3a <create_name+0xf2>
 800df34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df36:	2b2e      	cmp	r3, #46	; 0x2e
 800df38:	d106      	bne.n	800df48 <create_name+0x100>
		di--;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1ea      	bne.n	800df1c <create_name+0xd4>
 800df46:	e000      	b.n	800df4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800df48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	4413      	add	r3, r2
 800df52:	2200      	movs	r2, #0
 800df54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <create_name+0x118>
 800df5c:	2306      	movs	r3, #6
 800df5e:	e127      	b.n	800e1b0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3324      	adds	r3, #36	; 0x24
 800df64:	220b      	movs	r2, #11
 800df66:	2120      	movs	r1, #32
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fe fb54 	bl	800c616 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800df6e:	2300      	movs	r3, #0
 800df70:	61bb      	str	r3, [r7, #24]
 800df72:	e002      	b.n	800df7a <create_name+0x132>
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	3301      	adds	r3, #1
 800df78:	61bb      	str	r3, [r7, #24]
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	4413      	add	r3, r2
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	2b20      	cmp	r3, #32
 800df86:	d0f5      	beq.n	800df74 <create_name+0x12c>
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	4413      	add	r3, r2
 800df90:	881b      	ldrh	r3, [r3, #0]
 800df92:	2b2e      	cmp	r3, #46	; 0x2e
 800df94:	d0ee      	beq.n	800df74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d009      	beq.n	800dfb0 <create_name+0x168>
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	f043 0303 	orr.w	r3, r3, #3
 800dfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dfa8:	e002      	b.n	800dfb0 <create_name+0x168>
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d009      	beq.n	800dfca <create_name+0x182>
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	2b2e      	cmp	r3, #46	; 0x2e
 800dfc8:	d1ef      	bne.n	800dfaa <create_name+0x162>

	i = b = 0; ni = 8;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	623b      	str	r3, [r7, #32]
 800dfd4:	2308      	movs	r3, #8
 800dfd6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	1c5a      	adds	r2, r3, #1
 800dfdc:	61ba      	str	r2, [r7, #24]
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dfe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f000 8090 	beq.w	800e110 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff2:	2b20      	cmp	r3, #32
 800dff4:	d006      	beq.n	800e004 <create_name+0x1bc>
 800dff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff8:	2b2e      	cmp	r3, #46	; 0x2e
 800dffa:	d10a      	bne.n	800e012 <create_name+0x1ca>
 800dffc:	69ba      	ldr	r2, [r7, #24]
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	429a      	cmp	r2, r3
 800e002:	d006      	beq.n	800e012 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e008:	f043 0303 	orr.w	r3, r3, #3
 800e00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e010:	e07d      	b.n	800e10e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e012:	6a3a      	ldr	r2, [r7, #32]
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	429a      	cmp	r2, r3
 800e018:	d203      	bcs.n	800e022 <create_name+0x1da>
 800e01a:	69ba      	ldr	r2, [r7, #24]
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d123      	bne.n	800e06a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2b0b      	cmp	r3, #11
 800e026:	d106      	bne.n	800e036 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e02c:	f043 0303 	orr.w	r3, r3, #3
 800e030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e034:	e075      	b.n	800e122 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e036:	69ba      	ldr	r2, [r7, #24]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d005      	beq.n	800e04a <create_name+0x202>
 800e03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e042:	f043 0303 	orr.w	r3, r3, #3
 800e046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e04a:	69ba      	ldr	r2, [r7, #24]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d866      	bhi.n	800e120 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	61bb      	str	r3, [r7, #24]
 800e056:	2308      	movs	r3, #8
 800e058:	623b      	str	r3, [r7, #32]
 800e05a:	230b      	movs	r3, #11
 800e05c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e05e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e068:	e051      	b.n	800e10e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e06c:	2b7f      	cmp	r3, #127	; 0x7f
 800e06e:	d914      	bls.n	800e09a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e072:	2100      	movs	r1, #0
 800e074:	4618      	mov	r0, r3
 800e076:	f002 f8d1 	bl	801021c <ff_convert>
 800e07a:	4603      	mov	r3, r0
 800e07c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d004      	beq.n	800e08e <create_name+0x246>
 800e084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e086:	3b80      	subs	r3, #128	; 0x80
 800e088:	4a23      	ldr	r2, [pc, #140]	; (800e118 <create_name+0x2d0>)
 800e08a:	5cd3      	ldrb	r3, [r2, r3]
 800e08c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e08e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e092:	f043 0302 	orr.w	r3, r3, #2
 800e096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e09a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d007      	beq.n	800e0b0 <create_name+0x268>
 800e0a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	481d      	ldr	r0, [pc, #116]	; (800e11c <create_name+0x2d4>)
 800e0a6:	f7fe faf8 	bl	800c69a <chk_chr>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d008      	beq.n	800e0c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e0b0:	235f      	movs	r3, #95	; 0x5f
 800e0b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b8:	f043 0303 	orr.w	r3, r3, #3
 800e0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0c0:	e01b      	b.n	800e0fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0c4:	2b40      	cmp	r3, #64	; 0x40
 800e0c6:	d909      	bls.n	800e0dc <create_name+0x294>
 800e0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ca:	2b5a      	cmp	r3, #90	; 0x5a
 800e0cc:	d806      	bhi.n	800e0dc <create_name+0x294>
					b |= 2;
 800e0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0d2:	f043 0302 	orr.w	r3, r3, #2
 800e0d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0da:	e00e      	b.n	800e0fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0de:	2b60      	cmp	r3, #96	; 0x60
 800e0e0:	d90b      	bls.n	800e0fa <create_name+0x2b2>
 800e0e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0e4:	2b7a      	cmp	r3, #122	; 0x7a
 800e0e6:	d808      	bhi.n	800e0fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e0e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0ec:	f043 0301 	orr.w	r3, r3, #1
 800e0f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0f6:	3b20      	subs	r3, #32
 800e0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	623a      	str	r2, [r7, #32]
 800e100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e102:	b2d1      	uxtb	r1, r2
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	4413      	add	r3, r2
 800e108:	460a      	mov	r2, r1
 800e10a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e10e:	e763      	b.n	800dfd8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e110:	bf00      	nop
 800e112:	e006      	b.n	800e122 <create_name+0x2da>
 800e114:	08019fd8 	.word	0x08019fd8
 800e118:	0801a734 	.word	0x0801a734
 800e11c:	08019fe4 	.word	0x08019fe4
			if (si > di) break;			/* No extension */
 800e120:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e128:	2be5      	cmp	r3, #229	; 0xe5
 800e12a:	d103      	bne.n	800e134 <create_name+0x2ec>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2205      	movs	r2, #5
 800e130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	2b08      	cmp	r3, #8
 800e138:	d104      	bne.n	800e144 <create_name+0x2fc>
 800e13a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e148:	f003 030c 	and.w	r3, r3, #12
 800e14c:	2b0c      	cmp	r3, #12
 800e14e:	d005      	beq.n	800e15c <create_name+0x314>
 800e150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e154:	f003 0303 	and.w	r3, r3, #3
 800e158:	2b03      	cmp	r3, #3
 800e15a:	d105      	bne.n	800e168 <create_name+0x320>
 800e15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e160:	f043 0302 	orr.w	r3, r3, #2
 800e164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d117      	bne.n	800e1a4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e178:	f003 0303 	and.w	r3, r3, #3
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d105      	bne.n	800e18c <create_name+0x344>
 800e180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e184:	f043 0310 	orr.w	r3, r3, #16
 800e188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e18c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e190:	f003 030c 	and.w	r3, r3, #12
 800e194:	2b04      	cmp	r3, #4
 800e196:	d105      	bne.n	800e1a4 <create_name+0x35c>
 800e198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e19c:	f043 0308 	orr.w	r3, r3, #8
 800e1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e1aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e1ae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3728      	adds	r7, #40	; 0x28
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e1cc:	e002      	b.n	800e1d4 <follow_path+0x1c>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	603b      	str	r3, [r7, #0]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b2f      	cmp	r3, #47	; 0x2f
 800e1da:	d0f8      	beq.n	800e1ce <follow_path+0x16>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b5c      	cmp	r3, #92	; 0x5c
 800e1e2:	d0f4      	beq.n	800e1ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	2b1f      	cmp	r3, #31
 800e1f0:	d80a      	bhi.n	800e208 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2280      	movs	r2, #128	; 0x80
 800e1f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7fe ffc9 	bl	800d194 <dir_sdi>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
 800e206:	e043      	b.n	800e290 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e208:	463b      	mov	r3, r7
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff fe1b 	bl	800de48 <create_name>
 800e212:	4603      	mov	r3, r0
 800e214:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e216:	7dfb      	ldrb	r3, [r7, #23]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d134      	bne.n	800e286 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7ff fc11 	bl	800da44 <dir_find>
 800e222:	4603      	mov	r3, r0
 800e224:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e22c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00a      	beq.n	800e24a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	2b04      	cmp	r3, #4
 800e238:	d127      	bne.n	800e28a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e23a:	7afb      	ldrb	r3, [r7, #11]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	d122      	bne.n	800e28a <follow_path+0xd2>
 800e244:	2305      	movs	r3, #5
 800e246:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e248:	e01f      	b.n	800e28a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e24a:	7afb      	ldrb	r3, [r7, #11]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d11c      	bne.n	800e28e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	799b      	ldrb	r3, [r3, #6]
 800e258:	f003 0310 	and.w	r3, r3, #16
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d102      	bne.n	800e266 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e260:	2305      	movs	r3, #5
 800e262:	75fb      	strb	r3, [r7, #23]
 800e264:	e014      	b.n	800e290 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e274:	4413      	add	r3, r2
 800e276:	4619      	mov	r1, r3
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff f912 	bl	800d4a2 <ld_clust>
 800e27e:	4602      	mov	r2, r0
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e284:	e7c0      	b.n	800e208 <follow_path+0x50>
			if (res != FR_OK) break;
 800e286:	bf00      	nop
 800e288:	e002      	b.n	800e290 <follow_path+0xd8>
				break;
 800e28a:	bf00      	nop
 800e28c:	e000      	b.n	800e290 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e28e:	bf00      	nop
			}
		}
	}

	return res;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b087      	sub	sp, #28
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d031      	beq.n	800e314 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	617b      	str	r3, [r7, #20]
 800e2b6:	e002      	b.n	800e2be <get_ldnumber+0x24>
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b1f      	cmp	r3, #31
 800e2c4:	d903      	bls.n	800e2ce <get_ldnumber+0x34>
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b3a      	cmp	r3, #58	; 0x3a
 800e2cc:	d1f4      	bne.n	800e2b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	2b3a      	cmp	r3, #58	; 0x3a
 800e2d4:	d11c      	bne.n	800e310 <get_ldnumber+0x76>
			tp = *path;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	60fa      	str	r2, [r7, #12]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	3b30      	subs	r3, #48	; 0x30
 800e2e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2b09      	cmp	r3, #9
 800e2ec:	d80e      	bhi.n	800e30c <get_ldnumber+0x72>
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d10a      	bne.n	800e30c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d107      	bne.n	800e30c <get_ldnumber+0x72>
					vol = (int)i;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	3301      	adds	r3, #1
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	e002      	b.n	800e316 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e310:	2300      	movs	r3, #0
 800e312:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e314:	693b      	ldr	r3, [r7, #16]
}
 800e316:	4618      	mov	r0, r3
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
	...

0800e324 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	70da      	strb	r2, [r3, #3]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f04f 32ff 	mov.w	r2, #4294967295
 800e33a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7fe fba8 	bl	800ca94 <move_window>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <check_fs+0x2a>
 800e34a:	2304      	movs	r3, #4
 800e34c:	e038      	b.n	800e3c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3338      	adds	r3, #56	; 0x38
 800e352:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e356:	4618      	mov	r0, r3
 800e358:	f7fe f8ba 	bl	800c4d0 <ld_word>
 800e35c:	4603      	mov	r3, r0
 800e35e:	461a      	mov	r2, r3
 800e360:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e364:	429a      	cmp	r2, r3
 800e366:	d001      	beq.n	800e36c <check_fs+0x48>
 800e368:	2303      	movs	r3, #3
 800e36a:	e029      	b.n	800e3c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e372:	2be9      	cmp	r3, #233	; 0xe9
 800e374:	d009      	beq.n	800e38a <check_fs+0x66>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e37c:	2beb      	cmp	r3, #235	; 0xeb
 800e37e:	d11e      	bne.n	800e3be <check_fs+0x9a>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e386:	2b90      	cmp	r3, #144	; 0x90
 800e388:	d119      	bne.n	800e3be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3338      	adds	r3, #56	; 0x38
 800e38e:	3336      	adds	r3, #54	; 0x36
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe f8b5 	bl	800c500 <ld_dword>
 800e396:	4603      	mov	r3, r0
 800e398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e39c:	4a0a      	ldr	r2, [pc, #40]	; (800e3c8 <check_fs+0xa4>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d101      	bne.n	800e3a6 <check_fs+0x82>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	e00c      	b.n	800e3c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3338      	adds	r3, #56	; 0x38
 800e3aa:	3352      	adds	r3, #82	; 0x52
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe f8a7 	bl	800c500 <ld_dword>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	4a05      	ldr	r2, [pc, #20]	; (800e3cc <check_fs+0xa8>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d101      	bne.n	800e3be <check_fs+0x9a>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e000      	b.n	800e3c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e3be:	2302      	movs	r3, #2
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	00544146 	.word	0x00544146
 800e3cc:	33544146 	.word	0x33544146

0800e3d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b096      	sub	sp, #88	; 0x58
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7ff ff58 	bl	800e29a <get_ldnumber>
 800e3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	da01      	bge.n	800e3f6 <find_volume+0x26>
 800e3f2:	230b      	movs	r3, #11
 800e3f4:	e235      	b.n	800e862 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e3f6:	4aa5      	ldr	r2, [pc, #660]	; (800e68c <find_volume+0x2bc>)
 800e3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <find_volume+0x3a>
 800e406:	230c      	movs	r3, #12
 800e408:	e22b      	b.n	800e862 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800e40a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e40c:	f7fe f960 	bl	800c6d0 <lock_fs>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <find_volume+0x4a>
 800e416:	230f      	movs	r3, #15
 800e418:	e223      	b.n	800e862 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e41e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	f023 0301 	bic.w	r3, r3, #1
 800e426:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d01a      	beq.n	800e466 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	785b      	ldrb	r3, [r3, #1]
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd ffad 	bl	800c394 <disk_status>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10c      	bne.n	800e466 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e44c:	79fb      	ldrb	r3, [r7, #7]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d007      	beq.n	800e462 <find_volume+0x92>
 800e452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e456:	f003 0304 	and.w	r3, r3, #4
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e45e:	230a      	movs	r3, #10
 800e460:	e1ff      	b.n	800e862 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800e462:	2300      	movs	r3, #0
 800e464:	e1fd      	b.n	800e862 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	2200      	movs	r2, #0
 800e46a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd ffa5 	bl	800c3c8 <disk_initialize>
 800e47e:	4603      	mov	r3, r0
 800e480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e488:	f003 0301 	and.w	r3, r3, #1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e490:	2303      	movs	r3, #3
 800e492:	e1e6      	b.n	800e862 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d007      	beq.n	800e4aa <find_volume+0xda>
 800e49a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e49e:	f003 0304 	and.w	r3, r3, #4
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e4a6:	230a      	movs	r3, #10
 800e4a8:	e1db      	b.n	800e862 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e4ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4b2:	f7ff ff37 	bl	800e324 <check_fs>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d149      	bne.n	800e558 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e4c8:	e01e      	b.n	800e508 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d2:	011b      	lsls	r3, r3, #4
 800e4d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e4d8:	4413      	add	r3, r2
 800e4da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4de:	3304      	adds	r3, #4
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d006      	beq.n	800e4f4 <find_volume+0x124>
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	3308      	adds	r3, #8
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe f808 	bl	800c500 <ld_dword>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	e000      	b.n	800e4f6 <find_volume+0x126>
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	3358      	adds	r3, #88	; 0x58
 800e4fc:	443b      	add	r3, r7
 800e4fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e504:	3301      	adds	r3, #1
 800e506:	643b      	str	r3, [r7, #64]	; 0x40
 800e508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50a:	2b03      	cmp	r3, #3
 800e50c:	d9dd      	bls.n	800e4ca <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e50e:	2300      	movs	r3, #0
 800e510:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e514:	2b00      	cmp	r3, #0
 800e516:	d002      	beq.n	800e51e <find_volume+0x14e>
 800e518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e51a:	3b01      	subs	r3, #1
 800e51c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	3358      	adds	r3, #88	; 0x58
 800e524:	443b      	add	r3, r7
 800e526:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e52a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <find_volume+0x16e>
 800e532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e536:	f7ff fef5 	bl	800e324 <check_fs>
 800e53a:	4603      	mov	r3, r0
 800e53c:	e000      	b.n	800e540 <find_volume+0x170>
 800e53e:	2303      	movs	r3, #3
 800e540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d905      	bls.n	800e558 <find_volume+0x188>
 800e54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e54e:	3301      	adds	r3, #1
 800e550:	643b      	str	r3, [r7, #64]	; 0x40
 800e552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e554:	2b03      	cmp	r3, #3
 800e556:	d9e2      	bls.n	800e51e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e55c:	2b04      	cmp	r3, #4
 800e55e:	d101      	bne.n	800e564 <find_volume+0x194>
 800e560:	2301      	movs	r3, #1
 800e562:	e17e      	b.n	800e862 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d901      	bls.n	800e570 <find_volume+0x1a0>
 800e56c:	230d      	movs	r3, #13
 800e56e:	e178      	b.n	800e862 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	3338      	adds	r3, #56	; 0x38
 800e574:	330b      	adds	r3, #11
 800e576:	4618      	mov	r0, r3
 800e578:	f7fd ffaa 	bl	800c4d0 <ld_word>
 800e57c:	4603      	mov	r3, r0
 800e57e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e582:	d001      	beq.n	800e588 <find_volume+0x1b8>
 800e584:	230d      	movs	r3, #13
 800e586:	e16c      	b.n	800e862 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	3338      	adds	r3, #56	; 0x38
 800e58c:	3316      	adds	r3, #22
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fd ff9e 	bl	800c4d0 <ld_word>
 800e594:	4603      	mov	r3, r0
 800e596:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <find_volume+0x1dc>
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	3338      	adds	r3, #56	; 0x38
 800e5a2:	3324      	adds	r3, #36	; 0x24
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fd ffab 	bl	800c500 <ld_dword>
 800e5aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e5b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	789b      	ldrb	r3, [r3, #2]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d005      	beq.n	800e5d0 <find_volume+0x200>
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	789b      	ldrb	r3, [r3, #2]
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d001      	beq.n	800e5d0 <find_volume+0x200>
 800e5cc:	230d      	movs	r3, #13
 800e5ce:	e148      	b.n	800e862 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	789b      	ldrb	r3, [r3, #2]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d8:	fb02 f303 	mul.w	r3, r2, r3
 800e5dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	895b      	ldrh	r3, [r3, #10]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d008      	beq.n	800e604 <find_volume+0x234>
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	895b      	ldrh	r3, [r3, #10]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	895b      	ldrh	r3, [r3, #10]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	4013      	ands	r3, r2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <find_volume+0x238>
 800e604:	230d      	movs	r3, #13
 800e606:	e12c      	b.n	800e862 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	3338      	adds	r3, #56	; 0x38
 800e60c:	3311      	adds	r3, #17
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fd ff5e 	bl	800c4d0 <ld_word>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	f003 030f 	and.w	r3, r3, #15
 800e624:	b29b      	uxth	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <find_volume+0x25e>
 800e62a:	230d      	movs	r3, #13
 800e62c:	e119      	b.n	800e862 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	3338      	adds	r3, #56	; 0x38
 800e632:	3313      	adds	r3, #19
 800e634:	4618      	mov	r0, r3
 800e636:	f7fd ff4b 	bl	800c4d0 <ld_word>
 800e63a:	4603      	mov	r3, r0
 800e63c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <find_volume+0x282>
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	3338      	adds	r3, #56	; 0x38
 800e648:	3320      	adds	r3, #32
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fd ff58 	bl	800c500 <ld_dword>
 800e650:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	3338      	adds	r3, #56	; 0x38
 800e656:	330e      	adds	r3, #14
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fd ff39 	bl	800c4d0 <ld_word>
 800e65e:	4603      	mov	r3, r0
 800e660:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e664:	2b00      	cmp	r3, #0
 800e666:	d101      	bne.n	800e66c <find_volume+0x29c>
 800e668:	230d      	movs	r3, #13
 800e66a:	e0fa      	b.n	800e862 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e66c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e670:	4413      	add	r3, r2
 800e672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e674:	8912      	ldrh	r2, [r2, #8]
 800e676:	0912      	lsrs	r2, r2, #4
 800e678:	b292      	uxth	r2, r2
 800e67a:	4413      	add	r3, r2
 800e67c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e67e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	429a      	cmp	r2, r3
 800e684:	d204      	bcs.n	800e690 <find_volume+0x2c0>
 800e686:	230d      	movs	r3, #13
 800e688:	e0eb      	b.n	800e862 <find_volume+0x492>
 800e68a:	bf00      	nop
 800e68c:	200001cc 	.word	0x200001cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e698:	8952      	ldrh	r2, [r2, #10]
 800e69a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e69e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <find_volume+0x2da>
 800e6a6:	230d      	movs	r3, #13
 800e6a8:	e0db      	b.n	800e862 <find_volume+0x492>
		fmt = FS_FAT32;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d802      	bhi.n	800e6c0 <find_volume+0x2f0>
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d802      	bhi.n	800e6d0 <find_volume+0x300>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	1c9a      	adds	r2, r3, #2
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6dc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e6de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e2:	441a      	add	r2, r3
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e6e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	441a      	add	r2, r3
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e6f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d11e      	bne.n	800e738 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	3338      	adds	r3, #56	; 0x38
 800e6fe:	332a      	adds	r3, #42	; 0x2a
 800e700:	4618      	mov	r0, r3
 800e702:	f7fd fee5 	bl	800c4d0 <ld_word>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <find_volume+0x340>
 800e70c:	230d      	movs	r3, #13
 800e70e:	e0a8      	b.n	800e862 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e712:	891b      	ldrh	r3, [r3, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <find_volume+0x34c>
 800e718:	230d      	movs	r3, #13
 800e71a:	e0a2      	b.n	800e862 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	3338      	adds	r3, #56	; 0x38
 800e720:	332c      	adds	r3, #44	; 0x2c
 800e722:	4618      	mov	r0, r3
 800e724:	f7fd feec 	bl	800c500 <ld_dword>
 800e728:	4602      	mov	r2, r0
 800e72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e730:	69db      	ldr	r3, [r3, #28]
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	647b      	str	r3, [r7, #68]	; 0x44
 800e736:	e01f      	b.n	800e778 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73a:	891b      	ldrh	r3, [r3, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <find_volume+0x374>
 800e740:	230d      	movs	r3, #13
 800e742:	e08e      	b.n	800e862 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e74a:	441a      	add	r2, r3
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e754:	2b02      	cmp	r3, #2
 800e756:	d103      	bne.n	800e760 <find_volume+0x390>
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	e00a      	b.n	800e776 <find_volume+0x3a6>
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	69da      	ldr	r2, [r3, #28]
 800e764:	4613      	mov	r3, r2
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	4413      	add	r3, r2
 800e76a:	085a      	lsrs	r2, r3, #1
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	69db      	ldr	r3, [r3, #28]
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e776:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	6a1a      	ldr	r2, [r3, #32]
 800e77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e782:	0a5b      	lsrs	r3, r3, #9
 800e784:	429a      	cmp	r2, r3
 800e786:	d201      	bcs.n	800e78c <find_volume+0x3bc>
 800e788:	230d      	movs	r3, #13
 800e78a:	e06a      	b.n	800e862 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295
 800e792:	619a      	str	r2, [r3, #24]
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	699a      	ldr	r2, [r3, #24]
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	2280      	movs	r2, #128	; 0x80
 800e7a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d149      	bne.n	800e83e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	3338      	adds	r3, #56	; 0x38
 800e7ae:	3330      	adds	r3, #48	; 0x30
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fd fe8d 	bl	800c4d0 <ld_word>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d140      	bne.n	800e83e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7be:	3301      	adds	r3, #1
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7c4:	f7fe f966 	bl	800ca94 <move_window>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d137      	bne.n	800e83e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d6:	3338      	adds	r3, #56	; 0x38
 800e7d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fd fe77 	bl	800c4d0 <ld_word>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d127      	bne.n	800e83e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	3338      	adds	r3, #56	; 0x38
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fd fe84 	bl	800c500 <ld_dword>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	4a1c      	ldr	r2, [pc, #112]	; (800e86c <find_volume+0x49c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d11e      	bne.n	800e83e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	3338      	adds	r3, #56	; 0x38
 800e804:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fd fe79 	bl	800c500 <ld_dword>
 800e80e:	4603      	mov	r3, r0
 800e810:	4a17      	ldr	r2, [pc, #92]	; (800e870 <find_volume+0x4a0>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d113      	bne.n	800e83e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	3338      	adds	r3, #56	; 0x38
 800e81a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fd fe6e 	bl	800c500 <ld_dword>
 800e824:	4602      	mov	r2, r0
 800e826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e828:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	3338      	adds	r3, #56	; 0x38
 800e82e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e832:	4618      	mov	r0, r3
 800e834:	f7fd fe64 	bl	800c500 <ld_dword>
 800e838:	4602      	mov	r2, r0
 800e83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e844:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e846:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <find_volume+0x4a4>)
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	3301      	adds	r3, #1
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	4b09      	ldr	r3, [pc, #36]	; (800e874 <find_volume+0x4a4>)
 800e850:	801a      	strh	r2, [r3, #0]
 800e852:	4b08      	ldr	r3, [pc, #32]	; (800e874 <find_volume+0x4a4>)
 800e854:	881a      	ldrh	r2, [r3, #0]
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e85a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e85c:	f7fe f8b2 	bl	800c9c4 <clear_lock>
#endif
	return FR_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3758      	adds	r7, #88	; 0x58
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	41615252 	.word	0x41615252
 800e870:	61417272 	.word	0x61417272
 800e874:	200001d0 	.word	0x200001d0

0800e878 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e882:	2309      	movs	r3, #9
 800e884:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d02e      	beq.n	800e8ea <validate+0x72>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d02a      	beq.n	800e8ea <validate+0x72>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d025      	beq.n	800e8ea <validate+0x72>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	889a      	ldrh	r2, [r3, #4]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	88db      	ldrh	r3, [r3, #6]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d11e      	bne.n	800e8ea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fd ff0d 	bl	800c6d0 <lock_fs>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d014      	beq.n	800e8e6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fd fd66 	bl	800c394 <disk_status>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <validate+0x60>
				res = FR_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	73fb      	strb	r3, [r7, #15]
 800e8d6:	e008      	b.n	800e8ea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fd ff0c 	bl	800c6fc <unlock_fs>
 800e8e4:	e001      	b.n	800e8ea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e8e6:	230f      	movs	r3, #15
 800e8e8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e8ea:	7bfb      	ldrb	r3, [r7, #15]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <validate+0x7e>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	e000      	b.n	800e8f8 <validate+0x80>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	683a      	ldr	r2, [r7, #0]
 800e8fa:	6013      	str	r3, [r2, #0]
	return res;
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
	...

0800e908 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	4613      	mov	r3, r2
 800e914:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e91a:	f107 0310 	add.w	r3, r7, #16
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff fcbb 	bl	800e29a <get_ldnumber>
 800e924:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	da01      	bge.n	800e930 <f_mount+0x28>
 800e92c:	230b      	movs	r3, #11
 800e92e:	e048      	b.n	800e9c2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e930:	4a26      	ldr	r2, [pc, #152]	; (800e9cc <f_mount+0xc4>)
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e938:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00f      	beq.n	800e960 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e940:	69b8      	ldr	r0, [r7, #24]
 800e942:	f7fe f83f 	bl	800c9c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	691b      	ldr	r3, [r3, #16]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f001 fd4a 	bl	80103e4 <ff_del_syncobj>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <f_mount+0x52>
 800e956:	2302      	movs	r3, #2
 800e958:	e033      	b.n	800e9c2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00f      	beq.n	800e986 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3310      	adds	r3, #16
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f001 fd16 	bl	80103a8 <ff_cre_syncobj>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <f_mount+0x7e>
 800e982:	2302      	movs	r3, #2
 800e984:	e01d      	b.n	800e9c2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	4910      	ldr	r1, [pc, #64]	; (800e9cc <f_mount+0xc4>)
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <f_mount+0x94>
 800e996:	79fb      	ldrb	r3, [r7, #7]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d001      	beq.n	800e9a0 <f_mount+0x98>
 800e99c:	2300      	movs	r3, #0
 800e99e:	e010      	b.n	800e9c2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e9a0:	f107 010c 	add.w	r1, r7, #12
 800e9a4:	f107 0308 	add.w	r3, r7, #8
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7ff fd10 	bl	800e3d0 <find_volume>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	7dfa      	ldrb	r2, [r7, #23]
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fd fe9e 	bl	800c6fc <unlock_fs>
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3720      	adds	r7, #32
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200001cc 	.word	0x200001cc

0800e9d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e9dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e9e0:	6018      	str	r0, [r3, #0]
 800e9e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e9e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800e9ea:	6019      	str	r1, [r3, #0]
 800e9ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e9f0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e9f4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e9f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e9fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <f_open+0x38>
 800ea04:	2309      	movs	r3, #9
 800ea06:	e29d      	b.n	800ef44 <f_open+0x574>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ea08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ea0c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ea10:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ea14:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ea18:	7812      	ldrb	r2, [r2, #0]
 800ea1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ea1e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800ea20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ea24:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ea28:	781a      	ldrb	r2, [r3, #0]
 800ea2a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800ea2e:	f107 0308 	add.w	r3, r7, #8
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7ff fccc 	bl	800e3d0 <find_volume>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800ea3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f040 8269 	bne.w	800ef1a <f_open+0x54a>
		dj.obj.fs = fs;
 800ea48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ea4c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 800ea50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ea54:	f107 0210 	add.w	r2, r7, #16
 800ea58:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ea5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ea5e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ea68:	4611      	mov	r1, r2
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fba4 	bl	800e1b8 <follow_path>
 800ea70:	4603      	mov	r3, r0
 800ea72:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ea76:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d11e      	bne.n	800eabc <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ea7e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 800ea82:	b25b      	sxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	da03      	bge.n	800ea90 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800ea88:	2306      	movs	r3, #6
 800ea8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ea8e:	e015      	b.n	800eabc <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ea94:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	f023 0301 	bic.w	r3, r3, #1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	bf14      	ite	ne
 800eaa2:	2301      	movne	r3, #1
 800eaa4:	2300      	moveq	r3, #0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800eaae:	4611      	mov	r1, r2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fe3f 	bl	800c734 <chk_lock>
 800eab6:	4603      	mov	r3, r0
 800eab8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eabc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eac0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	f003 031c 	and.w	r3, r3, #28
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 80a7 	beq.w	800ec1e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800ead0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d01f      	beq.n	800eb18 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ead8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d10e      	bne.n	800eafe <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eae0:	f7fd fe84 	bl	800c7ec <enq_lock>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d006      	beq.n	800eaf8 <f_open+0x128>
 800eaea:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff f868 	bl	800dbc4 <dir_register>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	e000      	b.n	800eafa <f_open+0x12a>
 800eaf8:	2312      	movs	r3, #18
 800eafa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eafe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eb02:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eb06:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800eb0a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800eb0e:	7812      	ldrb	r2, [r2, #0]
 800eb10:	f042 0208 	orr.w	r2, r2, #8
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	e015      	b.n	800eb44 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb18:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800eb1c:	f003 0311 	and.w	r3, r3, #17
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d003      	beq.n	800eb2c <f_open+0x15c>
					res = FR_DENIED;
 800eb24:	2307      	movs	r3, #7
 800eb26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800eb2a:	e00b      	b.n	800eb44 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eb30:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	f003 0304 	and.w	r3, r3, #4
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <f_open+0x174>
 800eb3e:	2308      	movs	r3, #8
 800eb40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f040 8088 	bne.w	800ec5e <f_open+0x28e>
 800eb4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eb52:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d07e      	beq.n	800ec5e <f_open+0x28e>
				dw = GET_FATTIME();
 800eb60:	f006 f9e4 	bl	8014f2c <get_fattime>
 800eb64:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb68:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800eb6c:	330e      	adds	r3, #14
 800eb6e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fd fd02 	bl	800c57c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eb78:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800eb7c:	3316      	adds	r3, #22
 800eb7e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fd fcfa 	bl	800c57c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb88:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800eb8c:	330b      	adds	r3, #11
 800eb8e:	2220      	movs	r2, #32
 800eb90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eb92:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800eb96:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fc80 	bl	800d4a2 <ld_clust>
 800eba2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eba6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ebaa:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800ebae:	2200      	movs	r2, #0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe fc95 	bl	800d4e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebb6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800ebba:	331c      	adds	r3, #28
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fd fcdc 	bl	800c57c <st_dword>
					fs->wflag = 1;
 800ebc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ebc8:	2201      	movs	r2, #1
 800ebca:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebcc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d044      	beq.n	800ec5e <f_open+0x28e>
						dw = fs->winsect;
 800ebd4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebda:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800ebde:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe f9a2 	bl	800cf32 <remove_chain>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800ebf4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d130      	bne.n	800ec5e <f_open+0x28e>
							res = move_window(fs, dw);
 800ebfc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ec00:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fd ff45 	bl	800ca94 <move_window>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec10:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ec14:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800ec18:	3a01      	subs	r2, #1
 800ec1a:	615a      	str	r2, [r3, #20]
 800ec1c:	e01f      	b.n	800ec5e <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec1e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d11b      	bne.n	800ec5e <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec26:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800ec2a:	f003 0310 	and.w	r3, r3, #16
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <f_open+0x26a>
					res = FR_NO_FILE;
 800ec32:	2304      	movs	r3, #4
 800ec34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ec38:	e011      	b.n	800ec5e <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec3e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	f003 0302 	and.w	r3, r3, #2
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d008      	beq.n	800ec5e <f_open+0x28e>
 800ec4c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <f_open+0x28e>
						res = FR_DENIED;
 800ec58:	2307      	movs	r3, #7
 800ec5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec5e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d14a      	bne.n	800ecfc <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec6a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	f003 0308 	and.w	r3, r3, #8
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00b      	beq.n	800ec90 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800ec78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec7c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ec80:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ec84:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ec88:	7812      	ldrb	r2, [r2, #0]
 800ec8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec8e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec90:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ec94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800eca2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800eca6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecaa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ecb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecb6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	f023 0301 	bic.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	bf14      	ite	ne
 800ecc4:	2301      	movne	r3, #1
 800ecc6:	2300      	moveq	r3, #0
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	461a      	mov	r2, r3
 800eccc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fd fdac 	bl	800c830 <inc_lock>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecde:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ece6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d102      	bne.n	800ecfc <f_open+0x32c>
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecfc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f040 810a 	bne.w	800ef1a <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed06:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ed0a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800ed0e:	4611      	mov	r1, r2
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fe fbc6 	bl	800d4a2 <ld_clust>
 800ed16:	4602      	mov	r2, r0
 800ed18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed24:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800ed28:	331c      	adds	r3, #28
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd fbe8 	bl	800c500 <ld_dword>
 800ed30:	4602      	mov	r2, r0
 800ed32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ed3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ed4c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800ed50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed54:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ed60:	88da      	ldrh	r2, [r3, #6]
 800ed62:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed72:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ed7c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ed80:	7812      	ldrb	r2, [r2, #0]
 800ed82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eda0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eda4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2200      	movs	r2, #0
 800edac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800edae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3330      	adds	r3, #48	; 0x30
 800edba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edbe:	2100      	movs	r1, #0
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd fc28 	bl	800c616 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800edc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edca:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	f003 0320 	and.w	r3, r3, #32
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 80a0 	beq.w	800ef1a <f_open+0x54a>
 800edda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edde:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 8097 	beq.w	800ef1a <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800edec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edf0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edfc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ee08:	895b      	ldrh	r3, [r3, #10]
 800ee0a:	025b      	lsls	r3, r3, #9
 800ee0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ee10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ee14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ee24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ee30:	e021      	b.n	800ee76 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800ee32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ee36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fd fee2 	bl	800cc0a <get_fat>
 800ee46:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800ee4a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d802      	bhi.n	800ee58 <f_open+0x488>
 800ee52:	2302      	movs	r3, #2
 800ee54:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee58:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ee5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee60:	d102      	bne.n	800ee68 <f_open+0x498>
 800ee62:	2301      	movs	r3, #1
 800ee64:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee68:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800ee6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ee76:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d105      	bne.n	800ee8a <f_open+0x4ba>
 800ee7e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800ee82:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d8d3      	bhi.n	800ee32 <f_open+0x462>
				}
				fp->clust = clst;
 800ee8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ee8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800ee98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee9a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d13b      	bne.n	800ef1a <f_open+0x54a>
 800eea2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800eea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d035      	beq.n	800ef1a <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eeae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800eeb2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fd fe88 	bl	800cbcc <clust2sect>
 800eebc:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800eec0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d103      	bne.n	800eed0 <f_open+0x500>
						res = FR_INT_ERR;
 800eec8:	2302      	movs	r3, #2
 800eeca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800eece:	e024      	b.n	800ef1a <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eed0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800eed4:	0a5a      	lsrs	r2, r3, #9
 800eed6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800eeda:	441a      	add	r2, r3
 800eedc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eee0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eee8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800eeec:	7858      	ldrb	r0, [r3, #1]
 800eeee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eef2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eefc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6a1a      	ldr	r2, [r3, #32]
 800ef08:	2301      	movs	r3, #1
 800ef0a:	f7fd fa83 	bl	800c414 <disk_read>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d002      	beq.n	800ef1a <f_open+0x54a>
 800ef14:	2301      	movs	r3, #1
 800ef16:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ef1a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <f_open+0x560>
 800ef22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ef30:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ef34:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800ef38:	4611      	mov	r1, r2
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fd fbde 	bl	800c6fc <unlock_fs>
 800ef40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b08e      	sub	sp, #56	; 0x38
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	607a      	str	r2, [r7, #4]
 800ef5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f107 0214 	add.w	r2, r7, #20
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fc82 	bl	800e878 <validate>
 800ef74:	4603      	mov	r3, r0
 800ef76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ef7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d107      	bne.n	800ef92 <f_read+0x44>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	7d5b      	ldrb	r3, [r3, #21]
 800ef86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d009      	beq.n	800efa6 <f_read+0x58>
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fd fbae 	bl	800c6fc <unlock_fs>
 800efa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efa4:	e13d      	b.n	800f222 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	7d1b      	ldrb	r3, [r3, #20]
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <f_read+0x72>
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2107      	movs	r1, #7
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fd fba0 	bl	800c6fc <unlock_fs>
 800efbc:	2307      	movs	r3, #7
 800efbe:	e130      	b.n	800f222 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	68da      	ldr	r2, [r3, #12]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	f240 811c 	bls.w	800f20e <f_read+0x2c0>
 800efd6:	6a3b      	ldr	r3, [r7, #32]
 800efd8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800efda:	e118      	b.n	800f20e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	699b      	ldr	r3, [r3, #24]
 800efe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f040 80e4 	bne.w	800f1b2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	0a5b      	lsrs	r3, r3, #9
 800eff0:	697a      	ldr	r2, [r7, #20]
 800eff2:	8952      	ldrh	r2, [r2, #10]
 800eff4:	3a01      	subs	r2, #1
 800eff6:	4013      	ands	r3, r2
 800eff8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d139      	bne.n	800f074 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d103      	bne.n	800f010 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	633b      	str	r3, [r7, #48]	; 0x30
 800f00e:	e013      	b.n	800f038 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f014:	2b00      	cmp	r3, #0
 800f016:	d007      	beq.n	800f028 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	4619      	mov	r1, r3
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7fe f884 	bl	800d12c <clmt_clust>
 800f024:	6338      	str	r0, [r7, #48]	; 0x30
 800f026:	e007      	b.n	800f038 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	4619      	mov	r1, r3
 800f030:	4610      	mov	r0, r2
 800f032:	f7fd fdea 	bl	800cc0a <get_fat>
 800f036:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d809      	bhi.n	800f052 <f_read+0x104>
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2202      	movs	r2, #2
 800f042:	755a      	strb	r2, [r3, #21]
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2102      	movs	r1, #2
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd fb57 	bl	800c6fc <unlock_fs>
 800f04e:	2302      	movs	r3, #2
 800f050:	e0e7      	b.n	800f222 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f058:	d109      	bne.n	800f06e <f_read+0x120>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	755a      	strb	r2, [r3, #21]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2101      	movs	r1, #1
 800f064:	4618      	mov	r0, r3
 800f066:	f7fd fb49 	bl	800c6fc <unlock_fs>
 800f06a:	2301      	movs	r3, #1
 800f06c:	e0d9      	b.n	800f222 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f072:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	4619      	mov	r1, r3
 800f07c:	4610      	mov	r0, r2
 800f07e:	f7fd fda5 	bl	800cbcc <clust2sect>
 800f082:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d109      	bne.n	800f09e <f_read+0x150>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2202      	movs	r2, #2
 800f08e:	755a      	strb	r2, [r3, #21]
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2102      	movs	r1, #2
 800f094:	4618      	mov	r0, r3
 800f096:	f7fd fb31 	bl	800c6fc <unlock_fs>
 800f09a:	2302      	movs	r3, #2
 800f09c:	e0c1      	b.n	800f222 <f_read+0x2d4>
			sect += csect;
 800f09e:	69ba      	ldr	r2, [r7, #24]
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	0a5b      	lsrs	r3, r3, #9
 800f0aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d03e      	beq.n	800f130 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0b2:	69fa      	ldr	r2, [r7, #28]
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	4413      	add	r3, r2
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	8952      	ldrh	r2, [r2, #10]
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d905      	bls.n	800f0cc <f_read+0x17e>
					cc = fs->csize - csect;
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	895b      	ldrh	r3, [r3, #10]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	7858      	ldrb	r0, [r3, #1]
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	69ba      	ldr	r2, [r7, #24]
 800f0d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0d6:	f7fd f99d 	bl	800c414 <disk_read>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d009      	beq.n	800f0f4 <f_read+0x1a6>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	755a      	strb	r2, [r3, #21]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fd fb06 	bl	800c6fc <unlock_fs>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e096      	b.n	800f222 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	7d1b      	ldrb	r3, [r3, #20]
 800f0f8:	b25b      	sxtb	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da14      	bge.n	800f128 <f_read+0x1da>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6a1a      	ldr	r2, [r3, #32]
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f108:	429a      	cmp	r2, r3
 800f10a:	d90d      	bls.n	800f128 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6a1a      	ldr	r2, [r3, #32]
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	025b      	lsls	r3, r3, #9
 800f116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f118:	18d0      	adds	r0, r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3330      	adds	r3, #48	; 0x30
 800f11e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f122:	4619      	mov	r1, r3
 800f124:	f7fd fa56 	bl	800c5d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12a:	025b      	lsls	r3, r3, #9
 800f12c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f12e:	e05a      	b.n	800f1e6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6a1b      	ldr	r3, [r3, #32]
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	429a      	cmp	r2, r3
 800f138:	d038      	beq.n	800f1ac <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	7d1b      	ldrb	r3, [r3, #20]
 800f13e:	b25b      	sxtb	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	da1d      	bge.n	800f180 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	7858      	ldrb	r0, [r3, #1]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6a1a      	ldr	r2, [r3, #32]
 800f152:	2301      	movs	r3, #1
 800f154:	f7fd f97e 	bl	800c454 <disk_write>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d009      	beq.n	800f172 <f_read+0x224>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2201      	movs	r2, #1
 800f162:	755a      	strb	r2, [r3, #21]
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2101      	movs	r1, #1
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fd fac7 	bl	800c6fc <unlock_fs>
 800f16e:	2301      	movs	r3, #1
 800f170:	e057      	b.n	800f222 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	7d1b      	ldrb	r3, [r3, #20]
 800f176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	7858      	ldrb	r0, [r3, #1]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f18a:	2301      	movs	r3, #1
 800f18c:	69ba      	ldr	r2, [r7, #24]
 800f18e:	f7fd f941 	bl	800c414 <disk_read>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d009      	beq.n	800f1ac <f_read+0x25e>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2201      	movs	r2, #1
 800f19c:	755a      	strb	r2, [r3, #21]
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fd faaa 	bl	800c6fc <unlock_fs>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e03a      	b.n	800f222 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	69ba      	ldr	r2, [r7, #24]
 800f1b0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f1be:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d901      	bls.n	800f1cc <f_read+0x27e>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	699b      	ldr	r3, [r3, #24]
 800f1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1da:	4413      	add	r3, r2
 800f1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1de:	4619      	mov	r1, r3
 800f1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1e2:	f7fd f9f7 	bl	800c5d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	4413      	add	r3, r2
 800f1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	699a      	ldr	r2, [r3, #24]
 800f1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f4:	441a      	add	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	619a      	str	r2, [r3, #24]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	441a      	add	r2, r3
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f47f aee3 	bne.w	800efdc <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2100      	movs	r1, #0
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fd fa6e 	bl	800c6fc <unlock_fs>
 800f220:	2300      	movs	r3, #0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3738      	adds	r7, #56	; 0x38
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b08c      	sub	sp, #48	; 0x30
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	60b9      	str	r1, [r7, #8]
 800f234:	607a      	str	r2, [r7, #4]
 800f236:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	2200      	movs	r2, #0
 800f240:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f107 0210 	add.w	r2, r7, #16
 800f248:	4611      	mov	r1, r2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff fb14 	bl	800e878 <validate>
 800f250:	4603      	mov	r3, r0
 800f252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d107      	bne.n	800f26e <f_write+0x44>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	7d5b      	ldrb	r3, [r3, #21]
 800f262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d009      	beq.n	800f282 <f_write+0x58>
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f274:	4611      	mov	r1, r2
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd fa40 	bl	800c6fc <unlock_fs>
 800f27c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f280:	e173      	b.n	800f56a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	7d1b      	ldrb	r3, [r3, #20]
 800f286:	f003 0302 	and.w	r3, r3, #2
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <f_write+0x72>
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	2107      	movs	r1, #7
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd fa32 	bl	800c6fc <unlock_fs>
 800f298:	2307      	movs	r3, #7
 800f29a:	e166      	b.n	800f56a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	699a      	ldr	r2, [r3, #24]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	441a      	add	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	699b      	ldr	r3, [r3, #24]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	f080 814b 	bcs.w	800f544 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	43db      	mvns	r3, r3
 800f2b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f2b6:	e145      	b.n	800f544 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	699b      	ldr	r3, [r3, #24]
 800f2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f040 8101 	bne.w	800f4c8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	699b      	ldr	r3, [r3, #24]
 800f2ca:	0a5b      	lsrs	r3, r3, #9
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	8952      	ldrh	r2, [r2, #10]
 800f2d0:	3a01      	subs	r2, #1
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d14d      	bne.n	800f378 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	699b      	ldr	r3, [r3, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10c      	bne.n	800f2fe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d11a      	bne.n	800f326 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fd fe81 	bl	800cffc <create_chain>
 800f2fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800f2fc:	e013      	b.n	800f326 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f302:	2b00      	cmp	r3, #0
 800f304:	d007      	beq.n	800f316 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	4619      	mov	r1, r3
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7fd ff0d 	bl	800d12c <clmt_clust>
 800f312:	62b8      	str	r0, [r7, #40]	; 0x28
 800f314:	e007      	b.n	800f326 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	69db      	ldr	r3, [r3, #28]
 800f31c:	4619      	mov	r1, r3
 800f31e:	4610      	mov	r0, r2
 800f320:	f7fd fe6c 	bl	800cffc <create_chain>
 800f324:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 8110 	beq.w	800f54e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f330:	2b01      	cmp	r3, #1
 800f332:	d109      	bne.n	800f348 <f_write+0x11e>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2202      	movs	r2, #2
 800f338:	755a      	strb	r2, [r3, #21]
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2102      	movs	r1, #2
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fd f9dc 	bl	800c6fc <unlock_fs>
 800f344:	2302      	movs	r3, #2
 800f346:	e110      	b.n	800f56a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d109      	bne.n	800f364 <f_write+0x13a>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2201      	movs	r2, #1
 800f354:	755a      	strb	r2, [r3, #21]
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2101      	movs	r1, #1
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fd f9ce 	bl	800c6fc <unlock_fs>
 800f360:	2301      	movs	r3, #1
 800f362:	e102      	b.n	800f56a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f368:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d102      	bne.n	800f378 <f_write+0x14e>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f376:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	7d1b      	ldrb	r3, [r3, #20]
 800f37c:	b25b      	sxtb	r3, r3
 800f37e:	2b00      	cmp	r3, #0
 800f380:	da1d      	bge.n	800f3be <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	7858      	ldrb	r0, [r3, #1]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6a1a      	ldr	r2, [r3, #32]
 800f390:	2301      	movs	r3, #1
 800f392:	f7fd f85f 	bl	800c454 <disk_write>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <f_write+0x186>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	755a      	strb	r2, [r3, #21]
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fd f9a8 	bl	800c6fc <unlock_fs>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e0dc      	b.n	800f56a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	7d1b      	ldrb	r3, [r3, #20]
 800f3b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	69db      	ldr	r3, [r3, #28]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4610      	mov	r0, r2
 800f3c8:	f7fd fc00 	bl	800cbcc <clust2sect>
 800f3cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d109      	bne.n	800f3e8 <f_write+0x1be>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	755a      	strb	r2, [r3, #21]
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	2102      	movs	r1, #2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fd f98c 	bl	800c6fc <unlock_fs>
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	e0c0      	b.n	800f56a <f_write+0x340>
			sect += csect;
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	0a5b      	lsrs	r3, r3, #9
 800f3f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d041      	beq.n	800f480 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f3fc:	69ba      	ldr	r2, [r7, #24]
 800f3fe:	6a3b      	ldr	r3, [r7, #32]
 800f400:	4413      	add	r3, r2
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	8952      	ldrh	r2, [r2, #10]
 800f406:	4293      	cmp	r3, r2
 800f408:	d905      	bls.n	800f416 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	895b      	ldrh	r3, [r3, #10]
 800f40e:	461a      	mov	r2, r3
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	7858      	ldrb	r0, [r3, #1]
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	69f9      	ldr	r1, [r7, #28]
 800f420:	f7fd f818 	bl	800c454 <disk_write>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d009      	beq.n	800f43e <f_write+0x214>
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2201      	movs	r2, #1
 800f42e:	755a      	strb	r2, [r3, #21]
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	2101      	movs	r1, #1
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd f961 	bl	800c6fc <unlock_fs>
 800f43a:	2301      	movs	r3, #1
 800f43c:	e095      	b.n	800f56a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6a1a      	ldr	r2, [r3, #32]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	6a3a      	ldr	r2, [r7, #32]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d915      	bls.n	800f478 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6a1a      	ldr	r2, [r3, #32]
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	025b      	lsls	r3, r3, #9
 800f45c:	69fa      	ldr	r2, [r7, #28]
 800f45e:	4413      	add	r3, r2
 800f460:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f464:	4619      	mov	r1, r3
 800f466:	f7fd f8b5 	bl	800c5d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	7d1b      	ldrb	r3, [r3, #20]
 800f46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f472:	b2da      	uxtb	r2, r3
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	025b      	lsls	r3, r3, #9
 800f47c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f47e:	e044      	b.n	800f50a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6a1b      	ldr	r3, [r3, #32]
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	429a      	cmp	r2, r3
 800f488:	d01b      	beq.n	800f4c2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	699a      	ldr	r2, [r3, #24]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f492:	429a      	cmp	r2, r3
 800f494:	d215      	bcs.n	800f4c2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	7858      	ldrb	r0, [r3, #1]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	f7fc ffb6 	bl	800c414 <disk_read>
 800f4a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d009      	beq.n	800f4c2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	755a      	strb	r2, [r3, #21]
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	2101      	movs	r1, #1
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fd f91f 	bl	800c6fc <unlock_fs>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e053      	b.n	800f56a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f4d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d901      	bls.n	800f4e2 <f_write+0x2b8>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	699b      	ldr	r3, [r3, #24]
 800f4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f0:	4413      	add	r3, r2
 800f4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f4:	69f9      	ldr	r1, [r7, #28]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fd f86c 	bl	800c5d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	7d1b      	ldrb	r3, [r3, #20]
 800f500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f504:	b2da      	uxtb	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f50a:	69fa      	ldr	r2, [r7, #28]
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	4413      	add	r3, r2
 800f510:	61fb      	str	r3, [r7, #28]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	699a      	ldr	r2, [r3, #24]
 800f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f518:	441a      	add	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	619a      	str	r2, [r3, #24]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	68da      	ldr	r2, [r3, #12]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	429a      	cmp	r2, r3
 800f528:	bf38      	it	cc
 800f52a:	461a      	movcc	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	60da      	str	r2, [r3, #12]
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	441a      	add	r2, r3
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	f47f aeb6 	bne.w	800f2b8 <f_write+0x8e>
 800f54c:	e000      	b.n	800f550 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f54e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	7d1b      	ldrb	r3, [r3, #20]
 800f554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	2100      	movs	r1, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f7fd f8ca 	bl	800c6fc <unlock_fs>
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3730      	adds	r7, #48	; 0x30
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b086      	sub	sp, #24
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f107 0208 	add.w	r2, r7, #8
 800f580:	4611      	mov	r1, r2
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff f978 	bl	800e878 <validate>
 800f588:	4603      	mov	r3, r0
 800f58a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f58c:	7dfb      	ldrb	r3, [r7, #23]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d16d      	bne.n	800f66e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	7d1b      	ldrb	r3, [r3, #20]
 800f596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d067      	beq.n	800f66e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	7d1b      	ldrb	r3, [r3, #20]
 800f5a2:	b25b      	sxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	da1a      	bge.n	800f5de <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	7858      	ldrb	r0, [r3, #1]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a1a      	ldr	r2, [r3, #32]
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f7fc ff4c 	bl	800c454 <disk_write>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d006      	beq.n	800f5d0 <f_sync+0x5e>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd f898 	bl	800c6fc <unlock_fs>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e055      	b.n	800f67c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	7d1b      	ldrb	r3, [r3, #20]
 800f5d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f5de:	f005 fca5 	bl	8014f2c <get_fattime>
 800f5e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	f7fd fa51 	bl	800ca94 <move_window>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d138      	bne.n	800f66e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f600:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	330b      	adds	r3, #11
 800f606:	781a      	ldrb	r2, [r3, #0]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	330b      	adds	r3, #11
 800f60c:	f042 0220 	orr.w	r2, r2, #32
 800f610:	b2d2      	uxtb	r2, r2
 800f612:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	461a      	mov	r2, r3
 800f61e:	68f9      	ldr	r1, [r7, #12]
 800f620:	f7fd ff5e 	bl	800d4e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f103 021c 	add.w	r2, r3, #28
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	4619      	mov	r1, r3
 800f630:	4610      	mov	r0, r2
 800f632:	f7fc ffa3 	bl	800c57c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3316      	adds	r3, #22
 800f63a:	6939      	ldr	r1, [r7, #16]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fc ff9d 	bl	800c57c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3312      	adds	r3, #18
 800f646:	2100      	movs	r1, #0
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fc ff7c 	bl	800c546 <st_word>
					fs->wflag = 1;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2201      	movs	r2, #1
 800f652:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fd fa4a 	bl	800caf0 <sync_fs>
 800f65c:	4603      	mov	r3, r0
 800f65e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7d1b      	ldrb	r3, [r3, #20]
 800f664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f668:	b2da      	uxtb	r2, r3
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	7dfa      	ldrb	r2, [r7, #23]
 800f672:	4611      	mov	r1, r2
 800f674:	4618      	mov	r0, r3
 800f676:	f7fd f841 	bl	800c6fc <unlock_fs>
 800f67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff ff70 	bl	800f572 <f_sync>
 800f692:	4603      	mov	r3, r0
 800f694:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d11d      	bne.n	800f6d8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f107 0208 	add.w	r2, r7, #8
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7ff f8e7 	bl	800e878 <validate>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d111      	bne.n	800f6d8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fd f947 	bl	800c94c <dec_lock>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d102      	bne.n	800f6ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fd f812 	bl	800c6fc <unlock_fs>
#endif
		}
	}
	return res;
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f6ee:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800f6f2:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f6fa:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800f6fe:	1d3b      	adds	r3, r7, #4
 800f700:	2202      	movs	r2, #2
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe fe64 	bl	800e3d0 <find_volume>
 800f708:	4603      	mov	r3, r0
 800f70a:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
	dj.obj.fs = fs;
 800f70e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f712:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	if (res == FR_OK) {
 800f716:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f040 80a1 	bne.w	800f862 <f_unlink+0x180>
		INIT_NAMBUF(fs);
 800f720:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f724:	f107 020c 	add.w	r2, r7, #12
 800f728:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f72a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800f72e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800f738:	4611      	mov	r1, r2
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fd3c 	bl	800e1b8 <follow_path>
 800f740:	4603      	mov	r3, r0
 800f742:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f746:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d108      	bne.n	800f760 <f_unlink+0x7e>
 800f74e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800f752:	2102      	movs	r1, #2
 800f754:	4618      	mov	r0, r3
 800f756:	f7fc ffed 	bl	800c734 <chk_lock>
 800f75a:	4603      	mov	r3, r0
 800f75c:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f760:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f764:	2b00      	cmp	r3, #0
 800f766:	d17c      	bne.n	800f862 <f_unlink+0x180>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f768:	f897 3277 	ldrb.w	r3, [r7, #631]	; 0x277
 800f76c:	b25b      	sxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	da03      	bge.n	800f77a <f_unlink+0x98>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f772:	2306      	movs	r3, #6
 800f774:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
 800f778:	e008      	b.n	800f78c <f_unlink+0xaa>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f77a:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <f_unlink+0xaa>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f786:	2307      	movs	r3, #7
 800f788:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				}
			}
			if (res == FR_OK) {
 800f78c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f790:	2b00      	cmp	r3, #0
 800f792:	d13b      	bne.n	800f80c <f_unlink+0x12a>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f794:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f798:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd fe7f 	bl	800d4a2 <ld_clust>
 800f7a4:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f7a8:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 800f7ac:	f003 0310 	and.w	r3, r3, #16
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d02b      	beq.n	800f80c <f_unlink+0x12a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f7b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f7b8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 800f7bc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800f7c0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f7c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd fce2 	bl	800d194 <dir_sdi>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						if (res == FR_OK) {
 800f7d6:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d116      	bne.n	800f80c <f_unlink+0x12a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f7de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fe f886 	bl	800d8f6 <dir_read>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f7f0:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d102      	bne.n	800f7fe <f_unlink+0x11c>
 800f7f8:	2307      	movs	r3, #7
 800f7fa:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f7fe:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f802:	2b04      	cmp	r3, #4
 800f804:	d102      	bne.n	800f80c <f_unlink+0x12a>
 800f806:	2300      	movs	r3, #0
 800f808:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						}
					}
				}
			}
			if (res == FR_OK) {
 800f80c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f810:	2b00      	cmp	r3, #0
 800f812:	d126      	bne.n	800f862 <f_unlink+0x180>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f814:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fe facb 	bl	800ddb4 <dir_remove>
 800f81e:	4603      	mov	r3, r0
 800f820:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f824:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10e      	bne.n	800f84a <f_unlink+0x168>
 800f82c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00a      	beq.n	800f84a <f_unlink+0x168>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f834:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800f838:	2200      	movs	r2, #0
 800f83a:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fd fb77 	bl	800cf32 <remove_chain>
 800f844:	4603      	mov	r3, r0
 800f846:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f84a:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d107      	bne.n	800f862 <f_unlink+0x180>
 800f852:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f856:	4618      	mov	r0, r3
 800f858:	f7fd f94a 	bl	800caf0 <sync_fs>
 800f85c:	4603      	mov	r3, r0
 800f85e:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f862:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f866:	f897 2287 	ldrb.w	r2, [r7, #647]	; 0x287
 800f86a:	4611      	mov	r1, r2
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fc ff45 	bl	800c6fc <unlock_fs>
 800f872:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
}
 800f876:	4618      	mov	r0, r3
 800f878:	f507 7722 	add.w	r7, r7, #648	; 0x288
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f880:	b590      	push	{r4, r7, lr}
 800f882:	b09d      	sub	sp, #116	; 0x74
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	607a      	str	r2, [r7, #4]
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	460b      	mov	r3, r1
 800f88e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f890:	2301      	movs	r3, #1
 800f892:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f894:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f898:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f89a:	f107 030c 	add.w	r3, r7, #12
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe fcfb 	bl	800e29a <get_ldnumber>
 800f8a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	da02      	bge.n	800f8b2 <f_mkfs+0x32>
 800f8ac:	230b      	movs	r3, #11
 800f8ae:	f000 bc0d 	b.w	80100cc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f8b2:	4a94      	ldr	r2, [pc, #592]	; (800fb04 <f_mkfs+0x284>)
 800f8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <f_mkfs+0x4a>
 800f8be:	4a91      	ldr	r2, [pc, #580]	; (800fb04 <f_mkfs+0x284>)
 800f8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f8d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc fd74 	bl	800c3c8 <disk_initialize>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f8e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f8ea:	f003 0301 	and.w	r3, r3, #1
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <f_mkfs+0x76>
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	e3ea      	b.n	80100cc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f8f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f8fa:	f003 0304 	and.w	r3, r3, #4
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <f_mkfs+0x86>
 800f902:	230a      	movs	r3, #10
 800f904:	e3e2      	b.n	80100cc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f906:	f107 0214 	add.w	r2, r7, #20
 800f90a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f90e:	2103      	movs	r1, #3
 800f910:	4618      	mov	r0, r3
 800f912:	f7fc fdbf 	bl	800c494 <disk_ioctl>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10c      	bne.n	800f936 <f_mkfs+0xb6>
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d009      	beq.n	800f936 <f_mkfs+0xb6>
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f928:	d805      	bhi.n	800f936 <f_mkfs+0xb6>
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	1e5a      	subs	r2, r3, #1
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	4013      	ands	r3, r2
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <f_mkfs+0xba>
 800f936:	2301      	movs	r3, #1
 800f938:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f93a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f93e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <f_mkfs+0xce>
 800f946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d309      	bcc.n	800f962 <f_mkfs+0xe2>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f954:	d805      	bhi.n	800f962 <f_mkfs+0xe2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	1e5a      	subs	r2, r3, #1
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4013      	ands	r3, r2
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <f_mkfs+0xe6>
 800f962:	2313      	movs	r3, #19
 800f964:	e3b2      	b.n	80100cc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f96e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f980:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	fb02 f303 	mul.w	r3, r2, r3
 800f988:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d101      	bne.n	800f994 <f_mkfs+0x114>
 800f990:	230e      	movs	r3, #14
 800f992:	e39b      	b.n	80100cc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f994:	f107 0210 	add.w	r2, r7, #16
 800f998:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f99c:	2101      	movs	r1, #1
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fc fd78 	bl	800c494 <disk_ioctl>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <f_mkfs+0x12e>
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e38e      	b.n	80100cc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f9ae:	7afb      	ldrb	r3, [r7, #11]
 800f9b0:	f003 0308 	and.w	r3, r3, #8
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <f_mkfs+0x13c>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	e000      	b.n	800f9be <f_mkfs+0x13e>
 800f9bc:	233f      	movs	r3, #63	; 0x3f
 800f9be:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d901      	bls.n	800f9cc <f_mkfs+0x14c>
 800f9c8:	230e      	movs	r3, #14
 800f9ca:	e37f      	b.n	80100cc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f9cc:	693a      	ldr	r2, [r7, #16]
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	2b7f      	cmp	r3, #127	; 0x7f
 800f9d8:	d801      	bhi.n	800f9de <f_mkfs+0x15e>
 800f9da:	230e      	movs	r3, #14
 800f9dc:	e376      	b.n	80100cc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b80      	cmp	r3, #128	; 0x80
 800f9e2:	d901      	bls.n	800f9e8 <f_mkfs+0x168>
 800f9e4:	2313      	movs	r3, #19
 800f9e6:	e371      	b.n	80100cc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f9e8:	7afb      	ldrb	r3, [r7, #11]
 800f9ea:	f003 0302 	and.w	r3, r3, #2
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00d      	beq.n	800fa0e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f9f2:	7afb      	ldrb	r3, [r7, #11]
 800f9f4:	f003 0307 	and.w	r3, r3, #7
 800f9f8:	2b02      	cmp	r3, #2
 800f9fa:	d004      	beq.n	800fa06 <f_mkfs+0x186>
 800f9fc:	7afb      	ldrb	r3, [r7, #11]
 800f9fe:	f003 0301 	and.w	r3, r3, #1
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d103      	bne.n	800fa0e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fa06:	2303      	movs	r3, #3
 800fa08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fa0c:	e009      	b.n	800fa22 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fa0e:	7afb      	ldrb	r3, [r7, #11]
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <f_mkfs+0x19c>
 800fa18:	2313      	movs	r3, #19
 800fa1a:	e357      	b.n	80100cc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fa26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d13c      	bne.n	800faa8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fa2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d11b      	bne.n	800fa6c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	0c5b      	lsrs	r3, r3, #17
 800fa38:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa3e:	2301      	movs	r3, #1
 800fa40:	653b      	str	r3, [r7, #80]	; 0x50
 800fa42:	e005      	b.n	800fa50 <f_mkfs+0x1d0>
 800fa44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa46:	3301      	adds	r3, #1
 800fa48:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa4c:	005b      	lsls	r3, r3, #1
 800fa4e:	653b      	str	r3, [r7, #80]	; 0x50
 800fa50:	4a2d      	ldr	r2, [pc, #180]	; (800fb08 <f_mkfs+0x288>)
 800fa52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d007      	beq.n	800fa6c <f_mkfs+0x1ec>
 800fa5c:	4a2a      	ldr	r2, [pc, #168]	; (800fb08 <f_mkfs+0x288>)
 800fa5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa64:	461a      	mov	r2, r3
 800fa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d2eb      	bcs.n	800fa44 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa74:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fa76:	6a3b      	ldr	r3, [r7, #32]
 800fa78:	3302      	adds	r3, #2
 800fa7a:	009a      	lsls	r2, r3, #2
 800fa7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa7e:	4413      	add	r3, r2
 800fa80:	1e5a      	subs	r2, r3, #1
 800fa82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa88:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fa8a:	2320      	movs	r3, #32
 800fa8c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fa8e:	2300      	movs	r3, #0
 800fa90:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d903      	bls.n	800faa4 <f_mkfs+0x224>
 800fa9c:	6a3b      	ldr	r3, [r7, #32]
 800fa9e:	4a1b      	ldr	r2, [pc, #108]	; (800fb0c <f_mkfs+0x28c>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d952      	bls.n	800fb4a <f_mkfs+0x2ca>
 800faa4:	230e      	movs	r3, #14
 800faa6:	e311      	b.n	80100cc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800faa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d11b      	bne.n	800fae6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	0b1b      	lsrs	r3, r3, #12
 800fab2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fab4:	2300      	movs	r3, #0
 800fab6:	64bb      	str	r3, [r7, #72]	; 0x48
 800fab8:	2301      	movs	r3, #1
 800faba:	653b      	str	r3, [r7, #80]	; 0x50
 800fabc:	e005      	b.n	800faca <f_mkfs+0x24a>
 800fabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac0:	3301      	adds	r3, #1
 800fac2:	64bb      	str	r3, [r7, #72]	; 0x48
 800fac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	653b      	str	r3, [r7, #80]	; 0x50
 800faca:	4a11      	ldr	r2, [pc, #68]	; (800fb10 <f_mkfs+0x290>)
 800facc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800face:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d007      	beq.n	800fae6 <f_mkfs+0x266>
 800fad6:	4a0e      	ldr	r2, [pc, #56]	; (800fb10 <f_mkfs+0x290>)
 800fad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fade:	461a      	mov	r2, r3
 800fae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d2eb      	bcs.n	800fabe <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fae6:	693a      	ldr	r2, [r7, #16]
 800fae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faea:	fbb2 f3f3 	udiv	r3, r2, r3
 800faee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800faf0:	6a3b      	ldr	r3, [r7, #32]
 800faf2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d90c      	bls.n	800fb14 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fafa:	6a3b      	ldr	r3, [r7, #32]
 800fafc:	3302      	adds	r3, #2
 800fafe:	005b      	lsls	r3, r3, #1
 800fb00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb02:	e012      	b.n	800fb2a <f_mkfs+0x2aa>
 800fb04:	200001cc 	.word	0x200001cc
 800fb08:	0801a7c4 	.word	0x0801a7c4
 800fb0c:	0ffffff5 	.word	0x0ffffff5
 800fb10:	0801a7d4 	.word	0x0801a7d4
				} else {
					fmt = FS_FAT12;
 800fb14:	2301      	movs	r3, #1
 800fb16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fb1a:	6a3a      	ldr	r2, [r7, #32]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	005b      	lsls	r3, r3, #1
 800fb20:	4413      	add	r3, r2
 800fb22:	3301      	adds	r3, #1
 800fb24:	085b      	lsrs	r3, r3, #1
 800fb26:	3303      	adds	r3, #3
 800fb28:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fb2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb2e:	4413      	add	r3, r2
 800fb30:	1e5a      	subs	r2, r3, #1
 800fb32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb38:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800fb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb40:	015a      	lsls	r2, r3, #5
 800fb42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb44:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb48:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4e:	4413      	add	r3, r2
 800fb50:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fb52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb56:	fb03 f202 	mul.w	r2, r3, r2
 800fb5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb5c:	4413      	add	r3, r2
 800fb5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb60:	4413      	add	r3, r2
 800fb62:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	4413      	add	r3, r2
 800fb6a:	1e5a      	subs	r2, r3, #1
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	425b      	negs	r3, r3
 800fb70:	401a      	ands	r2, r3
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fb78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb7c:	2b03      	cmp	r3, #3
 800fb7e:	d108      	bne.n	800fb92 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fb80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb84:	4413      	add	r3, r2
 800fb86:	657b      	str	r3, [r7, #84]	; 0x54
 800fb88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb8c:	4413      	add	r3, r2
 800fb8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb90:	e006      	b.n	800fba0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800fb92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb9c:	4413      	add	r3, r2
 800fb9e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800fba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba2:	011a      	lsls	r2, r3, #4
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	441a      	add	r2, r3
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	1ad2      	subs	r2, r2, r3
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d901      	bls.n	800fbb6 <f_mkfs+0x336>
 800fbb2:	230e      	movs	r3, #14
 800fbb4:	e28a      	b.n	80100cc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbba:	1ad2      	subs	r2, r2, r3
 800fbbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbc0:	fb01 f303 	mul.w	r3, r1, r3
 800fbc4:	1ad2      	subs	r2, r2, r3
 800fbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbc8:	1ad2      	subs	r2, r2, r3
 800fbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbd0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800fbd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d10f      	bne.n	800fbfa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d80a      	bhi.n	800fbfa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d105      	bne.n	800fbf6 <f_mkfs+0x376>
 800fbea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbec:	085b      	lsrs	r3, r3, #1
 800fbee:	607b      	str	r3, [r7, #4]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d144      	bne.n	800fc80 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fbf6:	230e      	movs	r3, #14
 800fbf8:	e268      	b.n	80100cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fbfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d133      	bne.n	800fc6a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800fc02:	6a3b      	ldr	r3, [r7, #32]
 800fc04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d91e      	bls.n	800fc4a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d107      	bne.n	800fc22 <f_mkfs+0x3a2>
 800fc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	2b40      	cmp	r3, #64	; 0x40
 800fc18:	d803      	bhi.n	800fc22 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800fc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	607b      	str	r3, [r7, #4]
 800fc20:	e033      	b.n	800fc8a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800fc22:	7afb      	ldrb	r3, [r7, #11]
 800fc24:	f003 0302 	and.w	r3, r3, #2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fc32:	e02a      	b.n	800fc8a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d105      	bne.n	800fc46 <f_mkfs+0x3c6>
 800fc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	607b      	str	r3, [r7, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b80      	cmp	r3, #128	; 0x80
 800fc44:	d91e      	bls.n	800fc84 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800fc46:	230e      	movs	r3, #14
 800fc48:	e240      	b.n	80100cc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d80a      	bhi.n	800fc6a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d105      	bne.n	800fc66 <f_mkfs+0x3e6>
 800fc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	607b      	str	r3, [r7, #4]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b80      	cmp	r3, #128	; 0x80
 800fc64:	d910      	bls.n	800fc88 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800fc66:	230e      	movs	r3, #14
 800fc68:	e230      	b.n	80100cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800fc6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d10c      	bne.n	800fc8c <f_mkfs+0x40c>
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d907      	bls.n	800fc8c <f_mkfs+0x40c>
 800fc7c:	230e      	movs	r3, #14
 800fc7e:	e225      	b.n	80100cc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fc80:	bf00      	nop
 800fc82:	e6ce      	b.n	800fa22 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fc84:	bf00      	nop
 800fc86:	e6cc      	b.n	800fa22 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fc88:	bf00      	nop
			pau = au;
 800fc8a:	e6ca      	b.n	800fa22 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800fc8c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800fc8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc90:	461a      	mov	r2, r3
 800fc92:	2100      	movs	r1, #0
 800fc94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc96:	f7fc fcbe 	bl	800c616 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800fc9a:	220b      	movs	r2, #11
 800fc9c:	49b2      	ldr	r1, [pc, #712]	; (800ff68 <f_mkfs+0x6e8>)
 800fc9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fca0:	f7fc fc98 	bl	800c5d4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	330b      	adds	r3, #11
 800fca8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcaa:	4611      	mov	r1, r2
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fc fc4a 	bl	800c546 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	330d      	adds	r3, #13
 800fcb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcb8:	b2d2      	uxtb	r2, r2
 800fcba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbe:	330e      	adds	r3, #14
 800fcc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcc2:	b292      	uxth	r2, r2
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fc fc3d 	bl	800c546 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800fccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcce:	3310      	adds	r3, #16
 800fcd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcd2:	b2d2      	uxtb	r2, r2
 800fcd4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	f103 0211 	add.w	r2, r3, #17
 800fcdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d002      	beq.n	800fcea <f_mkfs+0x46a>
 800fce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	e000      	b.n	800fcec <f_mkfs+0x46c>
 800fcea:	2300      	movs	r3, #0
 800fcec:	4619      	mov	r1, r3
 800fcee:	4610      	mov	r0, r2
 800fcf0:	f7fc fc29 	bl	800c546 <st_word>
		if (sz_vol < 0x10000) {
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcfa:	d208      	bcs.n	800fd0e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	3313      	adds	r3, #19
 800fd00:	693a      	ldr	r2, [r7, #16]
 800fd02:	b292      	uxth	r2, r2
 800fd04:	4611      	mov	r1, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fc fc1d 	bl	800c546 <st_word>
 800fd0c:	e006      	b.n	800fd1c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	3320      	adds	r3, #32
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	4611      	mov	r1, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fc fc30 	bl	800c57c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800fd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1e:	3315      	adds	r3, #21
 800fd20:	22f8      	movs	r2, #248	; 0xf8
 800fd22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	3318      	adds	r3, #24
 800fd28:	213f      	movs	r1, #63	; 0x3f
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fc fc0b 	bl	800c546 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	331a      	adds	r3, #26
 800fd34:	21ff      	movs	r1, #255	; 0xff
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fc fc05 	bl	800c546 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	331c      	adds	r3, #28
 800fd40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fc fc1a 	bl	800c57c <st_dword>
		if (fmt == FS_FAT32) {
 800fd48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d131      	bne.n	800fdb4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800fd56:	f005 f8e9 	bl	8014f2c <get_fattime>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7fc fc0c 	bl	800c57c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800fd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd66:	3324      	adds	r3, #36	; 0x24
 800fd68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fc fc06 	bl	800c57c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	332c      	adds	r3, #44	; 0x2c
 800fd74:	2102      	movs	r1, #2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fc fc00 	bl	800c57c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	3330      	adds	r3, #48	; 0x30
 800fd80:	2101      	movs	r1, #1
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fc fbdf 	bl	800c546 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	3332      	adds	r3, #50	; 0x32
 800fd8c:	2106      	movs	r1, #6
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fc fbd9 	bl	800c546 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800fd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd96:	3340      	adds	r3, #64	; 0x40
 800fd98:	2280      	movs	r2, #128	; 0x80
 800fd9a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	3342      	adds	r3, #66	; 0x42
 800fda0:	2229      	movs	r2, #41	; 0x29
 800fda2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800fda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda6:	3347      	adds	r3, #71	; 0x47
 800fda8:	2213      	movs	r2, #19
 800fdaa:	4970      	ldr	r1, [pc, #448]	; (800ff6c <f_mkfs+0x6ec>)
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fc fc11 	bl	800c5d4 <mem_cpy>
 800fdb2:	e020      	b.n	800fdf6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800fdba:	f005 f8b7 	bl	8014f2c <get_fattime>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7fc fbda 	bl	800c57c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	3316      	adds	r3, #22
 800fdcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdce:	b292      	uxth	r2, r2
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fc fbb7 	bl	800c546 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	3324      	adds	r3, #36	; 0x24
 800fddc:	2280      	movs	r2, #128	; 0x80
 800fdde:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800fde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde2:	3326      	adds	r3, #38	; 0x26
 800fde4:	2229      	movs	r2, #41	; 0x29
 800fde6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800fde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdea:	332b      	adds	r3, #43	; 0x2b
 800fdec:	2213      	movs	r2, #19
 800fdee:	4960      	ldr	r1, [pc, #384]	; (800ff70 <f_mkfs+0x6f0>)
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fc fbef 	bl	800c5d4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fc fba0 	bl	800c546 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800fe06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe10:	f7fc fb20 	bl	800c454 <disk_write>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <f_mkfs+0x59e>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e156      	b.n	80100cc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800fe1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d140      	bne.n	800fea8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	1d9a      	adds	r2, r3, #6
 800fe2a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe2e:	2301      	movs	r3, #1
 800fe30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe32:	f7fc fb0f 	bl	800c454 <disk_write>
			mem_set(buf, 0, ss);
 800fe36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe38:	461a      	mov	r2, r3
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe3e:	f7fc fbea 	bl	800c616 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800fe42:	494c      	ldr	r1, [pc, #304]	; (800ff74 <f_mkfs+0x6f4>)
 800fe44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe46:	f7fc fb99 	bl	800c57c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe50:	4949      	ldr	r1, [pc, #292]	; (800ff78 <f_mkfs+0x6f8>)
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fc fb92 	bl	800c57c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	3b01      	subs	r3, #1
 800fe62:	4619      	mov	r1, r3
 800fe64:	4610      	mov	r0, r2
 800fe66:	f7fc fb89 	bl	800c57c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fe70:	2102      	movs	r1, #2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fc fb82 	bl	800c57c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800fe78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fc fb5f 	bl	800c546 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8a:	1dda      	adds	r2, r3, #7
 800fe8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe90:	2301      	movs	r3, #1
 800fe92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe94:	f7fc fade 	bl	800c454 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fea0:	2301      	movs	r3, #1
 800fea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fea4:	f7fc fad6 	bl	800c454 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feaa:	2100      	movs	r1, #0
 800feac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feae:	f7fc fbb2 	bl	800c616 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800feb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feb4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800feb6:	2300      	movs	r3, #0
 800feb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800feba:	e04b      	b.n	800ff54 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800febc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d113      	bne.n	800feec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800fec4:	f06f 0107 	mvn.w	r1, #7
 800fec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feca:	f7fc fb57 	bl	800c57c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	3304      	adds	r3, #4
 800fed2:	f04f 31ff 	mov.w	r1, #4294967295
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fc fb50 	bl	800c57c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	3308      	adds	r3, #8
 800fee0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fc fb49 	bl	800c57c <st_dword>
 800feea:	e00b      	b.n	800ff04 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800feec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d101      	bne.n	800fef8 <f_mkfs+0x678>
 800fef4:	4b21      	ldr	r3, [pc, #132]	; (800ff7c <f_mkfs+0x6fc>)
 800fef6:	e001      	b.n	800fefc <f_mkfs+0x67c>
 800fef8:	f06f 0307 	mvn.w	r3, #7
 800fefc:	4619      	mov	r1, r3
 800fefe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff00:	f7fc fb3c 	bl	800c57c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ff04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff06:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ff08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	bf28      	it	cs
 800ff10:	4613      	movcs	r3, r2
 800ff12:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ff14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ff18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff1e:	f7fc fa99 	bl	800c454 <disk_write>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <f_mkfs+0x6ac>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e0cf      	b.n	80100cc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ff2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff2e:	461a      	mov	r2, r3
 800ff30:	2100      	movs	r1, #0
 800ff32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff34:	f7fc fb6f 	bl	800c616 <mem_set>
				sect += n; nsect -= n;
 800ff38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff3c:	4413      	add	r3, r2
 800ff3e:	667b      	str	r3, [r7, #100]	; 0x64
 800ff40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ff48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1dc      	bne.n	800ff08 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ff4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff50:	3301      	adds	r3, #1
 800ff52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d3af      	bcc.n	800febc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ff5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	d10d      	bne.n	800ff80 <f_mkfs+0x700>
 800ff64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff66:	e00c      	b.n	800ff82 <f_mkfs+0x702>
 800ff68:	08019fec 	.word	0x08019fec
 800ff6c:	08019ff8 	.word	0x08019ff8
 800ff70:	0801a00c 	.word	0x0801a00c
 800ff74:	41615252 	.word	0x41615252
 800ff78:	61417272 	.word	0x61417272
 800ff7c:	00fffff8 	.word	0x00fffff8
 800ff80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff82:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ff84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	bf28      	it	cs
 800ff8c:	4613      	movcs	r3, r2
 800ff8e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ff90:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ff94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff9a:	f7fc fa5b 	bl	800c454 <disk_write>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d001      	beq.n	800ffa8 <f_mkfs+0x728>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e091      	b.n	80100cc <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800ffa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ffaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffac:	4413      	add	r3, r2
 800ffae:	667b      	str	r3, [r7, #100]	; 0x64
 800ffb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ffb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1e2      	bne.n	800ff84 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ffbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d103      	bne.n	800ffce <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800ffc6:	230c      	movs	r3, #12
 800ffc8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ffcc:	e010      	b.n	800fff0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffd4:	d303      	bcc.n	800ffde <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ffd6:	2306      	movs	r3, #6
 800ffd8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ffdc:	e008      	b.n	800fff0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ffde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	d101      	bne.n	800ffea <f_mkfs+0x76a>
 800ffe6:	2304      	movs	r3, #4
 800ffe8:	e000      	b.n	800ffec <f_mkfs+0x76c>
 800ffea:	2301      	movs	r3, #1
 800ffec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fff0:	7afb      	ldrb	r3, [r7, #11]
 800fff2:	f003 0308 	and.w	r3, r3, #8
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d15b      	bne.n	80100b2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800fffa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fffc:	461a      	mov	r2, r3
 800fffe:	2100      	movs	r1, #0
 8010000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010002:	f7fc fb08 	bl	800c616 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801000c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010010:	4618      	mov	r0, r3
 8010012:	f7fc fa98 	bl	800c546 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801001c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	2200      	movs	r2, #0
 8010022:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	3301      	adds	r3, #1
 8010028:	2201      	movs	r2, #1
 801002a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	3302      	adds	r3, #2
 8010030:	2201      	movs	r2, #1
 8010032:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	3303      	adds	r3, #3
 8010038:	2200      	movs	r2, #0
 801003a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	3304      	adds	r3, #4
 8010040:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010044:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	441a      	add	r2, r3
 801004c:	4b21      	ldr	r3, [pc, #132]	; (80100d4 <f_mkfs+0x854>)
 801004e:	fba3 1302 	umull	r1, r3, r3, r2
 8010052:	1ad2      	subs	r2, r2, r3
 8010054:	0852      	lsrs	r2, r2, #1
 8010056:	4413      	add	r3, r2
 8010058:	0b5b      	lsrs	r3, r3, #13
 801005a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	3305      	adds	r3, #5
 8010060:	22fe      	movs	r2, #254	; 0xfe
 8010062:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010066:	089b      	lsrs	r3, r3, #2
 8010068:	b2da      	uxtb	r2, r3
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	3306      	adds	r3, #6
 801006e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010072:	b2d2      	uxtb	r2, r2
 8010074:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	3307      	adds	r3, #7
 801007a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801007c:	b2d2      	uxtb	r2, r2
 801007e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	3308      	adds	r3, #8
 8010084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010086:	4618      	mov	r0, r3
 8010088:	f7fc fa78 	bl	800c57c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	330c      	adds	r3, #12
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	4611      	mov	r1, r2
 8010094:	4618      	mov	r0, r3
 8010096:	f7fc fa71 	bl	800c57c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801009a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801009e:	2301      	movs	r3, #1
 80100a0:	2200      	movs	r2, #0
 80100a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100a4:	f7fc f9d6 	bl	800c454 <disk_write>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <f_mkfs+0x832>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e00c      	b.n	80100cc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80100b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80100b6:	2200      	movs	r2, #0
 80100b8:	2100      	movs	r1, #0
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fc f9ea 	bl	800c494 <disk_ioctl>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <f_mkfs+0x84a>
 80100c6:	2301      	movs	r3, #1
 80100c8:	e000      	b.n	80100cc <f_mkfs+0x84c>

	return FR_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3774      	adds	r7, #116	; 0x74
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd90      	pop	{r4, r7, pc}
 80100d4:	0515565b 	.word	0x0515565b

080100d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80100d8:	b480      	push	{r7}
 80100da:	b087      	sub	sp, #28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	4613      	mov	r3, r2
 80100e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80100e6:	2301      	movs	r3, #1
 80100e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80100ee:	4b1f      	ldr	r3, [pc, #124]	; (801016c <FATFS_LinkDriverEx+0x94>)
 80100f0:	7a5b      	ldrb	r3, [r3, #9]
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d131      	bne.n	801015c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80100f8:	4b1c      	ldr	r3, [pc, #112]	; (801016c <FATFS_LinkDriverEx+0x94>)
 80100fa:	7a5b      	ldrb	r3, [r3, #9]
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	4b1a      	ldr	r3, [pc, #104]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010102:	2100      	movs	r1, #0
 8010104:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010106:	4b19      	ldr	r3, [pc, #100]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010108:	7a5b      	ldrb	r3, [r3, #9]
 801010a:	b2db      	uxtb	r3, r3
 801010c:	4a17      	ldr	r2, [pc, #92]	; (801016c <FATFS_LinkDriverEx+0x94>)
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	68fa      	ldr	r2, [r7, #12]
 8010114:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010116:	4b15      	ldr	r3, [pc, #84]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010118:	7a5b      	ldrb	r3, [r3, #9]
 801011a:	b2db      	uxtb	r3, r3
 801011c:	461a      	mov	r2, r3
 801011e:	4b13      	ldr	r3, [pc, #76]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010120:	4413      	add	r3, r2
 8010122:	79fa      	ldrb	r2, [r7, #7]
 8010124:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010126:	4b11      	ldr	r3, [pc, #68]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010128:	7a5b      	ldrb	r3, [r3, #9]
 801012a:	b2db      	uxtb	r3, r3
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	b2d1      	uxtb	r1, r2
 8010130:	4a0e      	ldr	r2, [pc, #56]	; (801016c <FATFS_LinkDriverEx+0x94>)
 8010132:	7251      	strb	r1, [r2, #9]
 8010134:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010136:	7dbb      	ldrb	r3, [r7, #22]
 8010138:	3330      	adds	r3, #48	; 0x30
 801013a:	b2da      	uxtb	r2, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	3301      	adds	r3, #1
 8010144:	223a      	movs	r2, #58	; 0x3a
 8010146:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	3302      	adds	r3, #2
 801014c:	222f      	movs	r2, #47	; 0x2f
 801014e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	3303      	adds	r3, #3
 8010154:	2200      	movs	r2, #0
 8010156:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010158:	2300      	movs	r3, #0
 801015a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801015c:	7dfb      	ldrb	r3, [r7, #23]
}
 801015e:	4618      	mov	r0, r3
 8010160:	371c      	adds	r7, #28
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	200001f4 	.word	0x200001f4

08010170 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801017a:	2200      	movs	r2, #0
 801017c:	6839      	ldr	r1, [r7, #0]
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ffaa 	bl	80100d8 <FATFS_LinkDriverEx>
 8010184:	4603      	mov	r3, r0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
	...

08010190 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	460b      	mov	r3, r1
 801019a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 801019c:	2300      	movs	r3, #0
 801019e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80101a0:	2301      	movs	r3, #1
 80101a2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80101a4:	4b15      	ldr	r3, [pc, #84]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101a6:	7a5b      	ldrb	r3, [r3, #9]
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d01e      	beq.n	80101ec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	3b30      	subs	r3, #48	; 0x30
 80101b4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80101b6:	7bbb      	ldrb	r3, [r7, #14]
 80101b8:	4a10      	ldr	r2, [pc, #64]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d013      	beq.n	80101ec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80101c4:	7bbb      	ldrb	r3, [r7, #14]
 80101c6:	4a0d      	ldr	r2, [pc, #52]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	2200      	movs	r2, #0
 80101ce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80101d0:	7bbb      	ldrb	r3, [r7, #14]
 80101d2:	4a0a      	ldr	r2, [pc, #40]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101d4:	4413      	add	r3, r2
 80101d6:	2200      	movs	r2, #0
 80101d8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80101da:	4b08      	ldr	r3, [pc, #32]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101dc:	7a5b      	ldrb	r3, [r3, #9]
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	3b01      	subs	r3, #1
 80101e2:	b2da      	uxtb	r2, r3
 80101e4:	4b05      	ldr	r3, [pc, #20]	; (80101fc <FATFS_UnLinkDriverEx+0x6c>)
 80101e6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80101ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3714      	adds	r7, #20
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	200001f4 	.word	0x200001f4

08010200 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8010208:	2100      	movs	r1, #0
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7ff ffc0 	bl	8010190 <FATFS_UnLinkDriverEx>
 8010210:	4603      	mov	r3, r0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801021c:	b480      	push	{r7}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	4603      	mov	r3, r0
 8010224:	6039      	str	r1, [r7, #0]
 8010226:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010228:	88fb      	ldrh	r3, [r7, #6]
 801022a:	2b7f      	cmp	r3, #127	; 0x7f
 801022c:	d802      	bhi.n	8010234 <ff_convert+0x18>
		c = chr;
 801022e:	88fb      	ldrh	r3, [r7, #6]
 8010230:	81fb      	strh	r3, [r7, #14]
 8010232:	e025      	b.n	8010280 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00b      	beq.n	8010252 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801023a:	88fb      	ldrh	r3, [r7, #6]
 801023c:	2bff      	cmp	r3, #255	; 0xff
 801023e:	d805      	bhi.n	801024c <ff_convert+0x30>
 8010240:	88fb      	ldrh	r3, [r7, #6]
 8010242:	3b80      	subs	r3, #128	; 0x80
 8010244:	4a12      	ldr	r2, [pc, #72]	; (8010290 <ff_convert+0x74>)
 8010246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801024a:	e000      	b.n	801024e <ff_convert+0x32>
 801024c:	2300      	movs	r3, #0
 801024e:	81fb      	strh	r3, [r7, #14]
 8010250:	e016      	b.n	8010280 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010252:	2300      	movs	r3, #0
 8010254:	81fb      	strh	r3, [r7, #14]
 8010256:	e009      	b.n	801026c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010258:	89fb      	ldrh	r3, [r7, #14]
 801025a:	4a0d      	ldr	r2, [pc, #52]	; (8010290 <ff_convert+0x74>)
 801025c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010260:	88fa      	ldrh	r2, [r7, #6]
 8010262:	429a      	cmp	r2, r3
 8010264:	d006      	beq.n	8010274 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010266:	89fb      	ldrh	r3, [r7, #14]
 8010268:	3301      	adds	r3, #1
 801026a:	81fb      	strh	r3, [r7, #14]
 801026c:	89fb      	ldrh	r3, [r7, #14]
 801026e:	2b7f      	cmp	r3, #127	; 0x7f
 8010270:	d9f2      	bls.n	8010258 <ff_convert+0x3c>
 8010272:	e000      	b.n	8010276 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010274:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010276:	89fb      	ldrh	r3, [r7, #14]
 8010278:	3380      	adds	r3, #128	; 0x80
 801027a:	b29b      	uxth	r3, r3
 801027c:	b2db      	uxtb	r3, r3
 801027e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010280:	89fb      	ldrh	r3, [r7, #14]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3714      	adds	r7, #20
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	0801a7e4 	.word	0x0801a7e4

08010294 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010294:	b480      	push	{r7}
 8010296:	b087      	sub	sp, #28
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801029e:	88fb      	ldrh	r3, [r7, #6]
 80102a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a4:	d201      	bcs.n	80102aa <ff_wtoupper+0x16>
 80102a6:	4b3e      	ldr	r3, [pc, #248]	; (80103a0 <ff_wtoupper+0x10c>)
 80102a8:	e000      	b.n	80102ac <ff_wtoupper+0x18>
 80102aa:	4b3e      	ldr	r3, [pc, #248]	; (80103a4 <ff_wtoupper+0x110>)
 80102ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	1c9a      	adds	r2, r3, #2
 80102b2:	617a      	str	r2, [r7, #20]
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80102b8:	8a7b      	ldrh	r3, [r7, #18]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d068      	beq.n	8010390 <ff_wtoupper+0xfc>
 80102be:	88fa      	ldrh	r2, [r7, #6]
 80102c0:	8a7b      	ldrh	r3, [r7, #18]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d364      	bcc.n	8010390 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	1c9a      	adds	r2, r3, #2
 80102ca:	617a      	str	r2, [r7, #20]
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	823b      	strh	r3, [r7, #16]
 80102d0:	8a3b      	ldrh	r3, [r7, #16]
 80102d2:	0a1b      	lsrs	r3, r3, #8
 80102d4:	81fb      	strh	r3, [r7, #14]
 80102d6:	8a3b      	ldrh	r3, [r7, #16]
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	8a79      	ldrh	r1, [r7, #18]
 80102e0:	8a3b      	ldrh	r3, [r7, #16]
 80102e2:	440b      	add	r3, r1
 80102e4:	429a      	cmp	r2, r3
 80102e6:	da49      	bge.n	801037c <ff_wtoupper+0xe8>
			switch (cmd) {
 80102e8:	89fb      	ldrh	r3, [r7, #14]
 80102ea:	2b08      	cmp	r3, #8
 80102ec:	d84f      	bhi.n	801038e <ff_wtoupper+0xfa>
 80102ee:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <ff_wtoupper+0x60>)
 80102f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f4:	08010319 	.word	0x08010319
 80102f8:	0801032b 	.word	0x0801032b
 80102fc:	08010341 	.word	0x08010341
 8010300:	08010349 	.word	0x08010349
 8010304:	08010351 	.word	0x08010351
 8010308:	08010359 	.word	0x08010359
 801030c:	08010361 	.word	0x08010361
 8010310:	08010369 	.word	0x08010369
 8010314:	08010371 	.word	0x08010371
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010318:	88fa      	ldrh	r2, [r7, #6]
 801031a:	8a7b      	ldrh	r3, [r7, #18]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	4413      	add	r3, r2
 8010324:	881b      	ldrh	r3, [r3, #0]
 8010326:	80fb      	strh	r3, [r7, #6]
 8010328:	e027      	b.n	801037a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801032a:	88fa      	ldrh	r2, [r7, #6]
 801032c:	8a7b      	ldrh	r3, [r7, #18]
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	b29b      	uxth	r3, r3
 8010332:	f003 0301 	and.w	r3, r3, #1
 8010336:	b29b      	uxth	r3, r3
 8010338:	88fa      	ldrh	r2, [r7, #6]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	80fb      	strh	r3, [r7, #6]
 801033e:	e01c      	b.n	801037a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010340:	88fb      	ldrh	r3, [r7, #6]
 8010342:	3b10      	subs	r3, #16
 8010344:	80fb      	strh	r3, [r7, #6]
 8010346:	e018      	b.n	801037a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010348:	88fb      	ldrh	r3, [r7, #6]
 801034a:	3b20      	subs	r3, #32
 801034c:	80fb      	strh	r3, [r7, #6]
 801034e:	e014      	b.n	801037a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	3b30      	subs	r3, #48	; 0x30
 8010354:	80fb      	strh	r3, [r7, #6]
 8010356:	e010      	b.n	801037a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010358:	88fb      	ldrh	r3, [r7, #6]
 801035a:	3b1a      	subs	r3, #26
 801035c:	80fb      	strh	r3, [r7, #6]
 801035e:	e00c      	b.n	801037a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010360:	88fb      	ldrh	r3, [r7, #6]
 8010362:	3308      	adds	r3, #8
 8010364:	80fb      	strh	r3, [r7, #6]
 8010366:	e008      	b.n	801037a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010368:	88fb      	ldrh	r3, [r7, #6]
 801036a:	3b50      	subs	r3, #80	; 0x50
 801036c:	80fb      	strh	r3, [r7, #6]
 801036e:	e004      	b.n	801037a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010370:	88fb      	ldrh	r3, [r7, #6]
 8010372:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010376:	80fb      	strh	r3, [r7, #6]
 8010378:	bf00      	nop
			}
			break;
 801037a:	e008      	b.n	801038e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801037c:	89fb      	ldrh	r3, [r7, #14]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d195      	bne.n	80102ae <ff_wtoupper+0x1a>
 8010382:	8a3b      	ldrh	r3, [r7, #16]
 8010384:	005b      	lsls	r3, r3, #1
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	4413      	add	r3, r2
 801038a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801038c:	e78f      	b.n	80102ae <ff_wtoupper+0x1a>
			break;
 801038e:	bf00      	nop
	}

	return chr;
 8010390:	88fb      	ldrh	r3, [r7, #6]
}
 8010392:	4618      	mov	r0, r3
 8010394:	371c      	adds	r7, #28
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	0801a8e4 	.word	0x0801a8e4
 80103a4:	0801aad8 	.word	0x0801aad8

080103a8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	6039      	str	r1, [r7, #0]
 80103b2:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 80103b4:	2300      	movs	r3, #0
 80103b6:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80103b8:	f107 0308 	add.w	r3, r7, #8
 80103bc:	2101      	movs	r1, #1
 80103be:	4618      	mov	r0, r3
 80103c0:	f000 f8b0 	bl	8010524 <osSemaphoreCreate>
 80103c4:	4602      	mov	r2, r0
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	bf14      	ite	ne
 80103d2:	2301      	movne	r3, #1
 80103d4:	2300      	moveq	r3, #0
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	60fb      	str	r3, [r7, #12]

    return ret;
 80103da:	68fb      	ldr	r3, [r7, #12]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f000 f93b 	bl	8010668 <osSemaphoreDelete>
    return 1;
 80103f2:	2301      	movs	r3, #1
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f8a7 	bl	8010560 <osSemaphoreWait>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d101      	bne.n	801041c <ff_req_grant+0x20>
  {
    ret = 1;
 8010418:	2301      	movs	r3, #1
 801041a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801041c:	68fb      	ldr	r3, [r7, #12]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 f8e4 	bl	80105fc <osSemaphoreRelease>
}
 8010434:	bf00      	nop
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801044a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801044e:	2b84      	cmp	r3, #132	; 0x84
 8010450:	d005      	beq.n	801045e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010452:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	3303      	adds	r3, #3
 801045c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801045e:	68fb      	ldr	r3, [r7, #12]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3714      	adds	r7, #20
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010472:	f3ef 8305 	mrs	r3, IPSR
 8010476:	607b      	str	r3, [r7, #4]
  return(result);
 8010478:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801047a:	2b00      	cmp	r3, #0
 801047c:	bf14      	ite	ne
 801047e:	2301      	movne	r3, #1
 8010480:	2300      	moveq	r3, #0
 8010482:	b2db      	uxtb	r3, r3
}
 8010484:	4618      	mov	r0, r3
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010494:	f002 f986 	bl	80127a4 <vTaskStartScheduler>
  
  return osOK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	bd80      	pop	{r7, pc}

0801049e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80104a2:	f002 ff97 	bl	80133d4 <xTaskGetSchedulerState>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d101      	bne.n	80104b0 <osKernelRunning+0x12>
    return 0;
 80104ac:	2300      	movs	r3, #0
 80104ae:	e000      	b.n	80104b2 <osKernelRunning+0x14>
  else
    return 1;
 80104b0:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80104ba:	f7ff ffd7 	bl	801046c <inHandlerMode>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d003      	beq.n	80104cc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80104c4:	f002 fa76 	bl	80129b4 <xTaskGetTickCountFromISR>
 80104c8:	4603      	mov	r3, r0
 80104ca:	e002      	b.n	80104d2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80104cc:	f002 fa62 	bl	8012994 <xTaskGetTickCount>
 80104d0:	4603      	mov	r3, r0
  }
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80104d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d8:	b087      	sub	sp, #28
 80104da:	af02      	add	r7, sp, #8
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	685c      	ldr	r4, [r3, #4]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80104ec:	b29e      	uxth	r6, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff ffa1 	bl	801043c <makeFreeRtosPriority>
 80104fa:	4602      	mov	r2, r0
 80104fc:	f107 030c 	add.w	r3, r7, #12
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	9200      	str	r2, [sp, #0]
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	4632      	mov	r2, r6
 8010508:	4629      	mov	r1, r5
 801050a:	4620      	mov	r0, r4
 801050c:	f001 fec2 	bl	8012294 <xTaskCreate>
 8010510:	4603      	mov	r3, r0
 8010512:	2b01      	cmp	r3, #1
 8010514:	d001      	beq.n	801051a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010516:	2300      	movs	r3, #0
 8010518:	e000      	b.n	801051c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801051a:	68fb      	ldr	r3, [r7, #12]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3714      	adds	r7, #20
 8010520:	46bd      	mov	sp, r7
 8010522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010524 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2b01      	cmp	r3, #1
 8010532:	d110      	bne.n	8010556 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8010534:	2203      	movs	r2, #3
 8010536:	2100      	movs	r1, #0
 8010538:	2001      	movs	r0, #1
 801053a:	f000 fa8b 	bl	8010a54 <xQueueGenericCreate>
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d005      	beq.n	8010552 <osSemaphoreCreate+0x2e>
 8010546:	2300      	movs	r3, #0
 8010548:	2200      	movs	r2, #0
 801054a:	2100      	movs	r1, #0
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f000 fb17 	bl	8010b80 <xQueueGenericSend>
    return sema;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	e000      	b.n	8010558 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8010556:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801056a:	2300      	movs	r3, #0
 801056c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d101      	bne.n	8010578 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010574:	2380      	movs	r3, #128	; 0x80
 8010576:	e03a      	b.n	80105ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010578:	2300      	movs	r3, #0
 801057a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010582:	d103      	bne.n	801058c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010584:	f04f 33ff 	mov.w	r3, #4294967295
 8010588:	60fb      	str	r3, [r7, #12]
 801058a:	e009      	b.n	80105a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d006      	beq.n	80105a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d101      	bne.n	80105a0 <osSemaphoreWait+0x40>
      ticks = 1;
 801059c:	2301      	movs	r3, #1
 801059e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80105a0:	f7ff ff64 	bl	801046c <inHandlerMode>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d017      	beq.n	80105da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80105aa:	f107 0308 	add.w	r3, r7, #8
 80105ae:	461a      	mov	r2, r3
 80105b0:	2100      	movs	r1, #0
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f001 f898 	bl	80116e8 <xQueueReceiveFromISR>
 80105b8:	4603      	mov	r3, r0
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d001      	beq.n	80105c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80105be:	23ff      	movs	r3, #255	; 0xff
 80105c0:	e015      	b.n	80105ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d011      	beq.n	80105ec <osSemaphoreWait+0x8c>
 80105c8:	4b0b      	ldr	r3, [pc, #44]	; (80105f8 <osSemaphoreWait+0x98>)
 80105ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ce:	601a      	str	r2, [r3, #0]
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	e008      	b.n	80105ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80105da:	68f9      	ldr	r1, [r7, #12]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fe53 	bl	8011288 <xQueueSemaphoreTake>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d001      	beq.n	80105ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80105e8:	23ff      	movs	r3, #255	; 0xff
 80105ea:	e000      	b.n	80105ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	e000ed04 	.word	0xe000ed04

080105fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010604:	2300      	movs	r3, #0
 8010606:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010608:	2300      	movs	r3, #0
 801060a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801060c:	f7ff ff2e 	bl	801046c <inHandlerMode>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d016      	beq.n	8010644 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010616:	f107 0308 	add.w	r3, r7, #8
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 fc81 	bl	8010f24 <xQueueGiveFromISR>
 8010622:	4603      	mov	r3, r0
 8010624:	2b01      	cmp	r3, #1
 8010626:	d001      	beq.n	801062c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010628:	23ff      	movs	r3, #255	; 0xff
 801062a:	e017      	b.n	801065c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d013      	beq.n	801065a <osSemaphoreRelease+0x5e>
 8010632:	4b0c      	ldr	r3, [pc, #48]	; (8010664 <osSemaphoreRelease+0x68>)
 8010634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	e00a      	b.n	801065a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010644:	2300      	movs	r3, #0
 8010646:	2200      	movs	r2, #0
 8010648:	2100      	movs	r1, #0
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa98 	bl	8010b80 <xQueueGenericSend>
 8010650:	4603      	mov	r3, r0
 8010652:	2b01      	cmp	r3, #1
 8010654:	d001      	beq.n	801065a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010656:	23ff      	movs	r3, #255	; 0xff
 8010658:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801065a:	68fb      	ldr	r3, [r7, #12]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3710      	adds	r7, #16
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	e000ed04 	.word	0xe000ed04

08010668 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010670:	f7ff fefc 	bl	801046c <inHandlerMode>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801067a:	2382      	movs	r3, #130	; 0x82
 801067c:	e003      	b.n	8010686 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f001 f8d0 	bl	8011824 <vQueueDelete>

  return osOK; 
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b082      	sub	sp, #8
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6818      	ldr	r0, [r3, #0]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	4619      	mov	r1, r3
 80106a4:	f000 f9d6 	bl	8010a54 <xQueueGenericCreate>
 80106a8:	4603      	mov	r3, r0
#endif
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b086      	sub	sp, #24
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80106c0:	2300      	movs	r3, #0
 80106c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <osMessagePut+0x1e>
    ticks = 1;
 80106ce:	2301      	movs	r3, #1
 80106d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80106d2:	f7ff fecb 	bl	801046c <inHandlerMode>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d018      	beq.n	801070e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80106dc:	f107 0210 	add.w	r2, r7, #16
 80106e0:	f107 0108 	add.w	r1, r7, #8
 80106e4:	2300      	movs	r3, #0
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f000 fb70 	bl	8010dcc <xQueueGenericSendFromISR>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d001      	beq.n	80106f6 <osMessagePut+0x42>
      return osErrorOS;
 80106f2:	23ff      	movs	r3, #255	; 0xff
 80106f4:	e018      	b.n	8010728 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d014      	beq.n	8010726 <osMessagePut+0x72>
 80106fc:	4b0c      	ldr	r3, [pc, #48]	; (8010730 <osMessagePut+0x7c>)
 80106fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	e00b      	b.n	8010726 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801070e:	f107 0108 	add.w	r1, r7, #8
 8010712:	2300      	movs	r3, #0
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f000 fa32 	bl	8010b80 <xQueueGenericSend>
 801071c:	4603      	mov	r3, r0
 801071e:	2b01      	cmp	r3, #1
 8010720:	d001      	beq.n	8010726 <osMessagePut+0x72>
      return osErrorOS;
 8010722:	23ff      	movs	r3, #255	; 0xff
 8010724:	e000      	b.n	8010728 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3718      	adds	r7, #24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	e000ed04 	.word	0xe000ed04

08010734 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010734:	b590      	push	{r4, r7, lr}
 8010736:	b08b      	sub	sp, #44	; 0x2c
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010744:	2300      	movs	r3, #0
 8010746:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d10a      	bne.n	8010764 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801074e:	2380      	movs	r3, #128	; 0x80
 8010750:	617b      	str	r3, [r7, #20]
    return event;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	461c      	mov	r4, r3
 8010756:	f107 0314 	add.w	r3, r7, #20
 801075a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801075e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010762:	e054      	b.n	801080e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010764:	2300      	movs	r3, #0
 8010766:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010768:	2300      	movs	r3, #0
 801076a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010772:	d103      	bne.n	801077c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010774:	f04f 33ff 	mov.w	r3, #4294967295
 8010778:	627b      	str	r3, [r7, #36]	; 0x24
 801077a:	e009      	b.n	8010790 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d006      	beq.n	8010790 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <osMessageGet+0x5c>
      ticks = 1;
 801078c:	2301      	movs	r3, #1
 801078e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010790:	f7ff fe6c 	bl	801046c <inHandlerMode>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d01c      	beq.n	80107d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801079a:	f107 0220 	add.w	r2, r7, #32
 801079e:	f107 0314 	add.w	r3, r7, #20
 80107a2:	3304      	adds	r3, #4
 80107a4:	4619      	mov	r1, r3
 80107a6:	68b8      	ldr	r0, [r7, #8]
 80107a8:	f000 ff9e 	bl	80116e8 <xQueueReceiveFromISR>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d102      	bne.n	80107b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80107b2:	2310      	movs	r3, #16
 80107b4:	617b      	str	r3, [r7, #20]
 80107b6:	e001      	b.n	80107bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80107bc:	6a3b      	ldr	r3, [r7, #32]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d01d      	beq.n	80107fe <osMessageGet+0xca>
 80107c2:	4b15      	ldr	r3, [pc, #84]	; (8010818 <osMessageGet+0xe4>)
 80107c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	e014      	b.n	80107fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80107d4:	f107 0314 	add.w	r3, r7, #20
 80107d8:	3304      	adds	r3, #4
 80107da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107dc:	4619      	mov	r1, r3
 80107de:	68b8      	ldr	r0, [r7, #8]
 80107e0:	f000 fc42 	bl	8011068 <xQueueReceive>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d102      	bne.n	80107f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80107ea:	2310      	movs	r3, #16
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	e006      	b.n	80107fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <osMessageGet+0xc6>
 80107f6:	2300      	movs	r3, #0
 80107f8:	e000      	b.n	80107fc <osMessageGet+0xc8>
 80107fa:	2340      	movs	r3, #64	; 0x40
 80107fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	461c      	mov	r4, r3
 8010802:	f107 0314 	add.w	r3, r7, #20
 8010806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801080a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	372c      	adds	r7, #44	; 0x2c
 8010812:	46bd      	mov	sp, r7
 8010814:	bd90      	pop	{r4, r7, pc}
 8010816:	bf00      	nop
 8010818:	e000ed04 	.word	0xe000ed04

0801081c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f103 0208 	add.w	r2, r3, #8
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f04f 32ff 	mov.w	r2, #4294967295
 8010834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f103 0208 	add.w	r2, r3, #8
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f103 0208 	add.w	r2, r3, #8
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801086a:	bf00      	nop
 801086c:	370c      	adds	r7, #12
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010876:	b480      	push	{r7}
 8010878:	b085      	sub	sp, #20
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	689a      	ldr	r2, [r3, #8]
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	683a      	ldr	r2, [r7, #0]
 801089a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	601a      	str	r2, [r3, #0]
}
 80108b2:	bf00      	nop
 80108b4:	3714      	adds	r7, #20
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108be:	b480      	push	{r7}
 80108c0:	b085      	sub	sp, #20
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d4:	d103      	bne.n	80108de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	60fb      	str	r3, [r7, #12]
 80108dc:	e00c      	b.n	80108f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	3308      	adds	r3, #8
 80108e2:	60fb      	str	r3, [r7, #12]
 80108e4:	e002      	b.n	80108ec <vListInsert+0x2e>
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	60fb      	str	r3, [r7, #12]
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d2f6      	bcs.n	80108e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	601a      	str	r2, [r3, #0]
}
 8010924:	bf00      	nop
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	6892      	ldr	r2, [r2, #8]
 8010946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	6852      	ldr	r2, [r2, #4]
 8010950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	429a      	cmp	r2, r3
 801095a:	d103      	bne.n	8010964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	689a      	ldr	r2, [r3, #8]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	1e5a      	subs	r2, r3, #1
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10a      	bne.n	80109ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099c:	f383 8811 	msr	BASEPRI, r3
 80109a0:	f3bf 8f6f 	isb	sy
 80109a4:	f3bf 8f4f 	dsb	sy
 80109a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80109aa:	bf00      	nop
 80109ac:	e7fe      	b.n	80109ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80109ae:	f003 fab1 	bl	8013f14 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ba:	68f9      	ldr	r1, [r7, #12]
 80109bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109be:	fb01 f303 	mul.w	r3, r1, r3
 80109c2:	441a      	add	r2, r3
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109de:	3b01      	subs	r3, #1
 80109e0:	68f9      	ldr	r1, [r7, #12]
 80109e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109e4:	fb01 f303 	mul.w	r3, r1, r3
 80109e8:	441a      	add	r2, r3
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	22ff      	movs	r2, #255	; 0xff
 80109f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	22ff      	movs	r2, #255	; 0xff
 80109fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d114      	bne.n	8010a2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	691b      	ldr	r3, [r3, #16]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d01a      	beq.n	8010a42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	3310      	adds	r3, #16
 8010a10:	4618      	mov	r0, r3
 8010a12:	f002 fa11 	bl	8012e38 <xTaskRemoveFromEventList>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d012      	beq.n	8010a42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a1c:	4b0c      	ldr	r3, [pc, #48]	; (8010a50 <xQueueGenericReset+0xcc>)
 8010a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	f3bf 8f6f 	isb	sy
 8010a2c:	e009      	b.n	8010a42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3310      	adds	r3, #16
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff fef2 	bl	801081c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	3324      	adds	r3, #36	; 0x24
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7ff feed 	bl	801081c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a42:	f003 fa97 	bl	8013f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a46:	2301      	movs	r3, #1
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	e000ed04 	.word	0xe000ed04

08010a54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b08a      	sub	sp, #40	; 0x28
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d10a      	bne.n	8010a7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6c:	f383 8811 	msr	BASEPRI, r3
 8010a70:	f3bf 8f6f 	isb	sy
 8010a74:	f3bf 8f4f 	dsb	sy
 8010a78:	613b      	str	r3, [r7, #16]
}
 8010a7a:	bf00      	nop
 8010a7c:	e7fe      	b.n	8010a7c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010a84:	2300      	movs	r3, #0
 8010a86:	61fb      	str	r3, [r7, #28]
 8010a88:	e004      	b.n	8010a94 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	3350      	adds	r3, #80	; 0x50
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f003 fb5d 	bl	8014158 <pvPortMalloc>
 8010a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00b      	beq.n	8010abe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	3350      	adds	r3, #80	; 0x50
 8010aaa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010aac:	79fa      	ldrb	r2, [r7, #7]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	697a      	ldr	r2, [r7, #20]
 8010ab6:	68b9      	ldr	r1, [r7, #8]
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f000 f805 	bl	8010ac8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010abe:	69bb      	ldr	r3, [r7, #24]
	}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3720      	adds	r7, #32
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d103      	bne.n	8010ae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	69ba      	ldr	r2, [r7, #24]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	e002      	b.n	8010aea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	687a      	ldr	r2, [r7, #4]
 8010ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010aea:	69bb      	ldr	r3, [r7, #24]
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010af6:	2101      	movs	r1, #1
 8010af8:	69b8      	ldr	r0, [r7, #24]
 8010afa:	f7ff ff43 	bl	8010984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	78fa      	ldrb	r2, [r7, #3]
 8010b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	68f9      	ldr	r1, [r7, #12]
 8010b0c:	2073      	movs	r0, #115	; 0x73
 8010b0e:	f007 fc87 	bl	8018420 <SEGGER_SYSVIEW_RecordU32x3>
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00e      	beq.n	8010b46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	2100      	movs	r1, #0
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f81d 	bl	8010b80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010b46:	bf00      	nop
 8010b48:	3708      	adds	r7, #8
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b086      	sub	sp, #24
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	4603      	mov	r3, r0
 8010b56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	617b      	str	r3, [r7, #20]
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010b60:	79fb      	ldrb	r3, [r7, #7]
 8010b62:	461a      	mov	r2, r3
 8010b64:	6939      	ldr	r1, [r7, #16]
 8010b66:	6978      	ldr	r0, [r7, #20]
 8010b68:	f7ff ff74 	bl	8010a54 <xQueueGenericCreate>
 8010b6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff ffd3 	bl	8010b1a <prvInitialiseMutex>

		return pxNewQueue;
 8010b74:	68fb      	ldr	r3, [r7, #12]
	}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
	...

08010b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b090      	sub	sp, #64	; 0x40
 8010b84:	af02      	add	r7, sp, #8
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
 8010b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10a      	bne.n	8010bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010bae:	bf00      	nop
 8010bb0:	e7fe      	b.n	8010bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d103      	bne.n	8010bc0 <xQueueGenericSend+0x40>
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <xQueueGenericSend+0x44>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e000      	b.n	8010bc6 <xQueueGenericSend+0x46>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d10a      	bne.n	8010be0 <xQueueGenericSend+0x60>
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bce:	f383 8811 	msr	BASEPRI, r3
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010bdc:	bf00      	nop
 8010bde:	e7fe      	b.n	8010bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	2b02      	cmp	r3, #2
 8010be4:	d103      	bne.n	8010bee <xQueueGenericSend+0x6e>
 8010be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d101      	bne.n	8010bf2 <xQueueGenericSend+0x72>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e000      	b.n	8010bf4 <xQueueGenericSend+0x74>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10a      	bne.n	8010c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	623b      	str	r3, [r7, #32]
}
 8010c0a:	bf00      	nop
 8010c0c:	e7fe      	b.n	8010c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c0e:	f002 fbe1 	bl	80133d4 <xTaskGetSchedulerState>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <xQueueGenericSend+0x9e>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <xQueueGenericSend+0xa2>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <xQueueGenericSend+0xa4>
 8010c22:	2300      	movs	r3, #0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10a      	bne.n	8010c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	61fb      	str	r3, [r7, #28]
}
 8010c3a:	bf00      	nop
 8010c3c:	e7fe      	b.n	8010c3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c3e:	f003 f969 	bl	8013f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d302      	bcc.n	8010c54 <xQueueGenericSend+0xd4>
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d136      	bne.n	8010cc2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	4618      	mov	r0, r3
 8010c58:	f008 f94c 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010c5c:	68ba      	ldr	r2, [r7, #8]
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	460b      	mov	r3, r1
 8010c66:	4601      	mov	r1, r0
 8010c68:	205a      	movs	r0, #90	; 0x5a
 8010c6a:	f007 fc4f 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	68b9      	ldr	r1, [r7, #8]
 8010c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c74:	f000 fe15 	bl	80118a2 <prvCopyDataToQueue>
 8010c78:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d010      	beq.n	8010ca4 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	3324      	adds	r3, #36	; 0x24
 8010c86:	4618      	mov	r0, r3
 8010c88:	f002 f8d6 	bl	8012e38 <xTaskRemoveFromEventList>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d013      	beq.n	8010cba <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010c92:	4b4d      	ldr	r3, [pc, #308]	; (8010dc8 <xQueueGenericSend+0x248>)
 8010c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	e00a      	b.n	8010cba <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d007      	beq.n	8010cba <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010caa:	4b47      	ldr	r3, [pc, #284]	; (8010dc8 <xQueueGenericSend+0x248>)
 8010cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cb0:	601a      	str	r2, [r3, #0]
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010cba:	f003 f95b 	bl	8013f74 <vPortExitCritical>
				return pdPASS;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e07d      	b.n	8010dbe <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d110      	bne.n	8010cea <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010cc8:	f003 f954 	bl	8013f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f008 f910 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010cd4:	68ba      	ldr	r2, [r7, #8]
 8010cd6:	6879      	ldr	r1, [r7, #4]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	4601      	mov	r1, r0
 8010ce0:	205a      	movs	r0, #90	; 0x5a
 8010ce2:	f007 fc13 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e069      	b.n	8010dbe <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d106      	bne.n	8010cfe <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010cf0:	f107 0314 	add.w	r3, r7, #20
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f002 f92b 	bl	8012f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010cfe:	f003 f939 	bl	8013f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d02:	f001 fd99 	bl	8012838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d06:	f003 f905 	bl	8013f14 <vPortEnterCritical>
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d10:	b25b      	sxtb	r3, r3
 8010d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d16:	d103      	bne.n	8010d20 <xQueueGenericSend+0x1a0>
 8010d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d26:	b25b      	sxtb	r3, r3
 8010d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d2c:	d103      	bne.n	8010d36 <xQueueGenericSend+0x1b6>
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d36:	f003 f91d 	bl	8013f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d3a:	1d3a      	adds	r2, r7, #4
 8010d3c:	f107 0314 	add.w	r3, r7, #20
 8010d40:	4611      	mov	r1, r2
 8010d42:	4618      	mov	r0, r3
 8010d44:	f002 f91a 	bl	8012f7c <xTaskCheckForTimeOut>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d124      	bne.n	8010d98 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d50:	f000 fe9f 	bl	8011a92 <prvIsQueueFull>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d018      	beq.n	8010d8c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	3310      	adds	r3, #16
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	4611      	mov	r1, r2
 8010d62:	4618      	mov	r0, r3
 8010d64:	f002 f844 	bl	8012df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d6a:	f000 fe2a 	bl	80119c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010d6e:	f001 fd71 	bl	8012854 <xTaskResumeAll>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f47f af62 	bne.w	8010c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010d7a:	4b13      	ldr	r3, [pc, #76]	; (8010dc8 <xQueueGenericSend+0x248>)
 8010d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d80:	601a      	str	r2, [r3, #0]
 8010d82:	f3bf 8f4f 	dsb	sy
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	e758      	b.n	8010c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d8e:	f000 fe18 	bl	80119c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d92:	f001 fd5f 	bl	8012854 <xTaskResumeAll>
 8010d96:	e752      	b.n	8010c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d9a:	f000 fe12 	bl	80119c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d9e:	f001 fd59 	bl	8012854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	4618      	mov	r0, r3
 8010da6:	f008 f8a5 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	6879      	ldr	r1, [r7, #4]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	460b      	mov	r3, r1
 8010db4:	4601      	mov	r1, r0
 8010db6:	205a      	movs	r0, #90	; 0x5a
 8010db8:	f007 fba8 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8010dbc:	2300      	movs	r3, #0
		}
	}
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3738      	adds	r7, #56	; 0x38
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	e000ed04 	.word	0xe000ed04

08010dcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b08e      	sub	sp, #56	; 0x38
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
 8010dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10a      	bne.n	8010dfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de8:	f383 8811 	msr	BASEPRI, r3
 8010dec:	f3bf 8f6f 	isb	sy
 8010df0:	f3bf 8f4f 	dsb	sy
 8010df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010df6:	bf00      	nop
 8010df8:	e7fe      	b.n	8010df8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <xQueueGenericSendFromISR+0x3c>
 8010e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <xQueueGenericSendFromISR+0x40>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e000      	b.n	8010e0e <xQueueGenericSendFromISR+0x42>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10a      	bne.n	8010e28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e16:	f383 8811 	msr	BASEPRI, r3
 8010e1a:	f3bf 8f6f 	isb	sy
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	623b      	str	r3, [r7, #32]
}
 8010e24:	bf00      	nop
 8010e26:	e7fe      	b.n	8010e26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b02      	cmp	r3, #2
 8010e2c:	d103      	bne.n	8010e36 <xQueueGenericSendFromISR+0x6a>
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d101      	bne.n	8010e3a <xQueueGenericSendFromISR+0x6e>
 8010e36:	2301      	movs	r3, #1
 8010e38:	e000      	b.n	8010e3c <xQueueGenericSendFromISR+0x70>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10a      	bne.n	8010e56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	61fb      	str	r3, [r7, #28]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e56:	f003 f93f 	bl	80140d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	61ba      	str	r2, [r7, #24]
 8010e70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010e72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d302      	bcc.n	8010e88 <xQueueGenericSendFromISR+0xbc>
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d136      	bne.n	8010ef6 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	4618      	mov	r0, r3
 8010e96:	f008 f82d 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010e9a:	4601      	mov	r1, r0
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	2060      	movs	r0, #96	; 0x60
 8010ea2:	f007 fa63 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ea6:	683a      	ldr	r2, [r7, #0]
 8010ea8:	68b9      	ldr	r1, [r7, #8]
 8010eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010eac:	f000 fcf9 	bl	80118a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010eb0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb8:	d112      	bne.n	8010ee0 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d016      	beq.n	8010ef0 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	3324      	adds	r3, #36	; 0x24
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f001 ffb6 	bl	8012e38 <xTaskRemoveFromEventList>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00e      	beq.n	8010ef0 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00b      	beq.n	8010ef0 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2201      	movs	r2, #1
 8010edc:	601a      	str	r2, [r3, #0]
 8010ede:	e007      	b.n	8010ef0 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	b25a      	sxtb	r2, r3
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010ef4:	e00b      	b.n	8010f0e <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f007 fffb 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010efe:	4601      	mov	r1, r0
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	461a      	mov	r2, r3
 8010f04:	2060      	movs	r0, #96	; 0x60
 8010f06:	f007 fa31 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010f18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3738      	adds	r7, #56	; 0x38
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b08e      	sub	sp, #56	; 0x38
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d10a      	bne.n	8010f4e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3c:	f383 8811 	msr	BASEPRI, r3
 8010f40:	f3bf 8f6f 	isb	sy
 8010f44:	f3bf 8f4f 	dsb	sy
 8010f48:	623b      	str	r3, [r7, #32]
}
 8010f4a:	bf00      	nop
 8010f4c:	e7fe      	b.n	8010f4c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00a      	beq.n	8010f6c <xQueueGiveFromISR+0x48>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5a:	f383 8811 	msr	BASEPRI, r3
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	f3bf 8f4f 	dsb	sy
 8010f66:	61fb      	str	r3, [r7, #28]
}
 8010f68:	bf00      	nop
 8010f6a:	e7fe      	b.n	8010f6a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d103      	bne.n	8010f7c <xQueueGiveFromISR+0x58>
 8010f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d101      	bne.n	8010f80 <xQueueGiveFromISR+0x5c>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e000      	b.n	8010f82 <xQueueGiveFromISR+0x5e>
 8010f80:	2300      	movs	r3, #0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10a      	bne.n	8010f9c <xQueueGiveFromISR+0x78>
	__asm volatile
 8010f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8a:	f383 8811 	msr	BASEPRI, r3
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	f3bf 8f4f 	dsb	sy
 8010f96:	61bb      	str	r3, [r7, #24]
}
 8010f98:	bf00      	nop
 8010f9a:	e7fe      	b.n	8010f9a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f9c:	f003 f89c 	bl	80140d8 <vPortValidateInterruptPriority>
	__asm volatile
 8010fa0:	f3ef 8211 	mrs	r2, BASEPRI
 8010fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	617a      	str	r2, [r7, #20]
 8010fb6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010fb8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010fba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d235      	bcs.n	8011038 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f007 ff8b 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8010fde:	4601      	mov	r1, r0
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	2060      	movs	r0, #96	; 0x60
 8010fe6:	f007 f9c1 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fec:	1c5a      	adds	r2, r3, #1
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffa:	d112      	bne.n	8011022 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	d016      	beq.n	8011032 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	3324      	adds	r3, #36	; 0x24
 8011008:	4618      	mov	r0, r3
 801100a:	f001 ff15 	bl	8012e38 <xTaskRemoveFromEventList>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00e      	beq.n	8011032 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00b      	beq.n	8011032 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	2201      	movs	r2, #1
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	e007      	b.n	8011032 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011026:	3301      	adds	r3, #1
 8011028:	b2db      	uxtb	r3, r3
 801102a:	b25a      	sxtb	r2, r3
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011032:	2301      	movs	r3, #1
 8011034:	637b      	str	r3, [r7, #52]	; 0x34
 8011036:	e00b      	b.n	8011050 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8011038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103a:	4618      	mov	r0, r3
 801103c:	f007 ff5a 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011040:	4601      	mov	r1, r0
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	461a      	mov	r2, r3
 8011046:	2060      	movs	r0, #96	; 0x60
 8011048:	f007 f990 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 801104c:	2300      	movs	r3, #0
 801104e:	637b      	str	r3, [r7, #52]	; 0x34
 8011050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011052:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f383 8811 	msr	BASEPRI, r3
}
 801105a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801105e:	4618      	mov	r0, r3
 8011060:	3738      	adds	r7, #56	; 0x38
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b08f      	sub	sp, #60	; 0x3c
 801106c:	af02      	add	r7, sp, #8
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011074:	2300      	movs	r3, #0
 8011076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10a      	bne.n	8011098 <xQueueReceive+0x30>
	__asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	623b      	str	r3, [r7, #32]
}
 8011094:	bf00      	nop
 8011096:	e7fe      	b.n	8011096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d103      	bne.n	80110a6 <xQueueReceive+0x3e>
 801109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d101      	bne.n	80110aa <xQueueReceive+0x42>
 80110a6:	2301      	movs	r3, #1
 80110a8:	e000      	b.n	80110ac <xQueueReceive+0x44>
 80110aa:	2300      	movs	r3, #0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10a      	bne.n	80110c6 <xQueueReceive+0x5e>
	__asm volatile
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	61fb      	str	r3, [r7, #28]
}
 80110c2:	bf00      	nop
 80110c4:	e7fe      	b.n	80110c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110c6:	f002 f985 	bl	80133d4 <xTaskGetSchedulerState>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <xQueueReceive+0x6e>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d101      	bne.n	80110da <xQueueReceive+0x72>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e000      	b.n	80110dc <xQueueReceive+0x74>
 80110da:	2300      	movs	r3, #0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d10a      	bne.n	80110f6 <xQueueReceive+0x8e>
	__asm volatile
 80110e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	61bb      	str	r3, [r7, #24]
}
 80110f2:	bf00      	nop
 80110f4:	e7fe      	b.n	80110f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80110f6:	f002 ff0d 	bl	8013f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	2b00      	cmp	r3, #0
 8011104:	d02f      	beq.n	8011166 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801110a:	f000 fc34 	bl	8011976 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 801110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011110:	4618      	mov	r0, r3
 8011112:	f007 feef 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011116:	4604      	mov	r4, r0
 8011118:	2000      	movs	r0, #0
 801111a:	f007 feeb 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 801111e:	4602      	mov	r2, r0
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2101      	movs	r1, #1
 8011124:	9100      	str	r1, [sp, #0]
 8011126:	4621      	mov	r1, r4
 8011128:	205c      	movs	r0, #92	; 0x5c
 801112a:	f007 f9ef 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011130:	1e5a      	subs	r2, r3, #1
 8011132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00f      	beq.n	801115e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011140:	3310      	adds	r3, #16
 8011142:	4618      	mov	r0, r3
 8011144:	f001 fe78 	bl	8012e38 <xTaskRemoveFromEventList>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d007      	beq.n	801115e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801114e:	4b4d      	ldr	r3, [pc, #308]	; (8011284 <xQueueReceive+0x21c>)
 8011150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	f3bf 8f4f 	dsb	sy
 801115a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801115e:	f002 ff09 	bl	8013f74 <vPortExitCritical>
				return pdPASS;
 8011162:	2301      	movs	r3, #1
 8011164:	e08a      	b.n	801127c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d113      	bne.n	8011194 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801116c:	f002 ff02 	bl	8013f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	4618      	mov	r0, r3
 8011174:	f007 febe 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011178:	4604      	mov	r4, r0
 801117a:	2000      	movs	r0, #0
 801117c:	f007 feba 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011180:	4602      	mov	r2, r0
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2101      	movs	r1, #1
 8011186:	9100      	str	r1, [sp, #0]
 8011188:	4621      	mov	r1, r4
 801118a:	205c      	movs	r0, #92	; 0x5c
 801118c:	f007 f9be 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8011190:	2300      	movs	r3, #0
 8011192:	e073      	b.n	801127c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	2b00      	cmp	r3, #0
 8011198:	d106      	bne.n	80111a8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801119a:	f107 0310 	add.w	r3, r7, #16
 801119e:	4618      	mov	r0, r3
 80111a0:	f001 fed6 	bl	8012f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111a4:	2301      	movs	r3, #1
 80111a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111a8:	f002 fee4 	bl	8013f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111ac:	f001 fb44 	bl	8012838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111b0:	f002 feb0 	bl	8013f14 <vPortEnterCritical>
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111ba:	b25b      	sxtb	r3, r3
 80111bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c0:	d103      	bne.n	80111ca <xQueueReceive+0x162>
 80111c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c4:	2200      	movs	r2, #0
 80111c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111d0:	b25b      	sxtb	r3, r3
 80111d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d6:	d103      	bne.n	80111e0 <xQueueReceive+0x178>
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111e0:	f002 fec8 	bl	8013f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111e4:	1d3a      	adds	r2, r7, #4
 80111e6:	f107 0310 	add.w	r3, r7, #16
 80111ea:	4611      	mov	r1, r2
 80111ec:	4618      	mov	r0, r3
 80111ee:	f001 fec5 	bl	8012f7c <xTaskCheckForTimeOut>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d124      	bne.n	8011242 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111fa:	f000 fc34 	bl	8011a66 <prvIsQueueEmpty>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d018      	beq.n	8011236 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	3324      	adds	r3, #36	; 0x24
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	4611      	mov	r1, r2
 801120c:	4618      	mov	r0, r3
 801120e:	f001 fdef 	bl	8012df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011214:	f000 fbd5 	bl	80119c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011218:	f001 fb1c 	bl	8012854 <xTaskResumeAll>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	f47f af69 	bne.w	80110f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011224:	4b17      	ldr	r3, [pc, #92]	; (8011284 <xQueueReceive+0x21c>)
 8011226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801122a:	601a      	str	r2, [r3, #0]
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	e75f      	b.n	80110f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011238:	f000 fbc3 	bl	80119c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801123c:	f001 fb0a 	bl	8012854 <xTaskResumeAll>
 8011240:	e759      	b.n	80110f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011244:	f000 fbbd 	bl	80119c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011248:	f001 fb04 	bl	8012854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801124c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801124e:	f000 fc0a 	bl	8011a66 <prvIsQueueEmpty>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	f43f af4e 	beq.w	80110f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	4618      	mov	r0, r3
 801125e:	f007 fe49 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011262:	4604      	mov	r4, r0
 8011264:	2000      	movs	r0, #0
 8011266:	f007 fe45 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 801126a:	4602      	mov	r2, r0
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2101      	movs	r1, #1
 8011270:	9100      	str	r1, [sp, #0]
 8011272:	4621      	mov	r1, r4
 8011274:	205c      	movs	r0, #92	; 0x5c
 8011276:	f007 f949 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 801127a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801127c:	4618      	mov	r0, r3
 801127e:	3734      	adds	r7, #52	; 0x34
 8011280:	46bd      	mov	sp, r7
 8011282:	bd90      	pop	{r4, r7, pc}
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011288:	b590      	push	{r4, r7, lr}
 801128a:	b091      	sub	sp, #68	; 0x44
 801128c:	af02      	add	r7, sp, #8
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011292:	2300      	movs	r3, #0
 8011294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801129a:	2300      	movs	r3, #0
 801129c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d10a      	bne.n	80112ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80112a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a8:	f383 8811 	msr	BASEPRI, r3
 80112ac:	f3bf 8f6f 	isb	sy
 80112b0:	f3bf 8f4f 	dsb	sy
 80112b4:	623b      	str	r3, [r7, #32]
}
 80112b6:	bf00      	nop
 80112b8:	e7fe      	b.n	80112b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80112ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d00a      	beq.n	80112d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80112c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c6:	f383 8811 	msr	BASEPRI, r3
 80112ca:	f3bf 8f6f 	isb	sy
 80112ce:	f3bf 8f4f 	dsb	sy
 80112d2:	61fb      	str	r3, [r7, #28]
}
 80112d4:	bf00      	nop
 80112d6:	e7fe      	b.n	80112d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80112d8:	f002 f87c 	bl	80133d4 <xTaskGetSchedulerState>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <xQueueSemaphoreTake+0x60>
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <xQueueSemaphoreTake+0x64>
 80112e8:	2301      	movs	r3, #1
 80112ea:	e000      	b.n	80112ee <xQueueSemaphoreTake+0x66>
 80112ec:	2300      	movs	r3, #0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d10a      	bne.n	8011308 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80112f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	61bb      	str	r3, [r7, #24]
}
 8011304:	bf00      	nop
 8011306:	e7fe      	b.n	8011306 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011308:	f002 fe04 	bl	8013f14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011310:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	2b00      	cmp	r3, #0
 8011316:	d034      	beq.n	8011382 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8011318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131a:	4618      	mov	r0, r3
 801131c:	f007 fdea 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011320:	4604      	mov	r4, r0
 8011322:	2000      	movs	r0, #0
 8011324:	f007 fde6 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011328:	4602      	mov	r2, r0
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2101      	movs	r1, #1
 801132e:	9100      	str	r1, [sp, #0]
 8011330:	4621      	mov	r1, r4
 8011332:	205c      	movs	r0, #92	; 0x5c
 8011334:	f007 f8ea 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133a:	1e5a      	subs	r2, r3, #1
 801133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d104      	bne.n	8011352 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011348:	f002 fa26 	bl	8013798 <pvTaskIncrementMutexHeldCount>
 801134c:	4602      	mov	r2, r0
 801134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011350:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	691b      	ldr	r3, [r3, #16]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d00f      	beq.n	801137a <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135c:	3310      	adds	r3, #16
 801135e:	4618      	mov	r0, r3
 8011360:	f001 fd6a 	bl	8012e38 <xTaskRemoveFromEventList>
 8011364:	4603      	mov	r3, r0
 8011366:	2b00      	cmp	r3, #0
 8011368:	d007      	beq.n	801137a <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801136a:	4b64      	ldr	r3, [pc, #400]	; (80114fc <xQueueSemaphoreTake+0x274>)
 801136c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801137a:	f002 fdfb 	bl	8013f74 <vPortExitCritical>
				return pdPASS;
 801137e:	2301      	movs	r3, #1
 8011380:	e0b7      	b.n	80114f2 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d121      	bne.n	80113cc <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00a      	beq.n	80113a4 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	617b      	str	r3, [r7, #20]
}
 80113a0:	bf00      	nop
 80113a2:	e7fe      	b.n	80113a2 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80113a4:	f002 fde6 	bl	8013f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	4618      	mov	r0, r3
 80113ac:	f007 fda2 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80113b0:	4604      	mov	r4, r0
 80113b2:	2000      	movs	r0, #0
 80113b4:	f007 fd9e 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80113b8:	4602      	mov	r2, r0
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2101      	movs	r1, #1
 80113be:	9100      	str	r1, [sp, #0]
 80113c0:	4621      	mov	r1, r4
 80113c2:	205c      	movs	r0, #92	; 0x5c
 80113c4:	f007 f8a2 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80113c8:	2300      	movs	r3, #0
 80113ca:	e092      	b.n	80114f2 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80113cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d106      	bne.n	80113e0 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113d2:	f107 030c 	add.w	r3, r7, #12
 80113d6:	4618      	mov	r0, r3
 80113d8:	f001 fdba 	bl	8012f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113dc:	2301      	movs	r3, #1
 80113de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113e0:	f002 fdc8 	bl	8013f74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113e4:	f001 fa28 	bl	8012838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113e8:	f002 fd94 	bl	8013f14 <vPortEnterCritical>
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113f2:	b25b      	sxtb	r3, r3
 80113f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113f8:	d103      	bne.n	8011402 <xQueueSemaphoreTake+0x17a>
 80113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fc:	2200      	movs	r2, #0
 80113fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011408:	b25b      	sxtb	r3, r3
 801140a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801140e:	d103      	bne.n	8011418 <xQueueSemaphoreTake+0x190>
 8011410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011412:	2200      	movs	r2, #0
 8011414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011418:	f002 fdac 	bl	8013f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801141c:	463a      	mov	r2, r7
 801141e:	f107 030c 	add.w	r3, r7, #12
 8011422:	4611      	mov	r1, r2
 8011424:	4618      	mov	r0, r3
 8011426:	f001 fda9 	bl	8012f7c <xTaskCheckForTimeOut>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d132      	bne.n	8011496 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011432:	f000 fb18 	bl	8011a66 <prvIsQueueEmpty>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d026      	beq.n	801148a <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d109      	bne.n	8011458 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8011444:	f002 fd66 	bl	8013f14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	f001 ffdf 	bl	8013410 <xTaskPriorityInherit>
 8011452:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011454:	f002 fd8e 	bl	8013f74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145a:	3324      	adds	r3, #36	; 0x24
 801145c:	683a      	ldr	r2, [r7, #0]
 801145e:	4611      	mov	r1, r2
 8011460:	4618      	mov	r0, r3
 8011462:	f001 fcc5 	bl	8012df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011468:	f000 faab 	bl	80119c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801146c:	f001 f9f2 	bl	8012854 <xTaskResumeAll>
 8011470:	4603      	mov	r3, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	f47f af48 	bne.w	8011308 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011478:	4b20      	ldr	r3, [pc, #128]	; (80114fc <xQueueSemaphoreTake+0x274>)
 801147a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801147e:	601a      	str	r2, [r3, #0]
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	e73e      	b.n	8011308 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801148a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801148c:	f000 fa99 	bl	80119c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011490:	f001 f9e0 	bl	8012854 <xTaskResumeAll>
 8011494:	e738      	b.n	8011308 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011498:	f000 fa93 	bl	80119c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801149c:	f001 f9da 	bl	8012854 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114a2:	f000 fae0 	bl	8011a66 <prvIsQueueEmpty>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f43f af2d 	beq.w	8011308 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80114ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00d      	beq.n	80114d0 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80114b4:	f002 fd2e 	bl	8013f14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80114b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114ba:	f000 f9da 	bl	8011872 <prvGetDisinheritPriorityAfterTimeout>
 80114be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114c6:	4618      	mov	r0, r3
 80114c8:	f002 f8be 	bl	8013648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80114cc:	f002 fd52 	bl	8013f74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80114d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d2:	4618      	mov	r0, r3
 80114d4:	f007 fd0e 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80114d8:	4604      	mov	r4, r0
 80114da:	2000      	movs	r0, #0
 80114dc:	f007 fd0a 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80114e0:	4602      	mov	r2, r0
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	2101      	movs	r1, #1
 80114e6:	9100      	str	r1, [sp, #0]
 80114e8:	4621      	mov	r1, r4
 80114ea:	205c      	movs	r0, #92	; 0x5c
 80114ec:	f007 f80e 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80114f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	373c      	adds	r7, #60	; 0x3c
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd90      	pop	{r4, r7, pc}
 80114fa:	bf00      	nop
 80114fc:	e000ed04 	.word	0xe000ed04

08011500 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011500:	b590      	push	{r4, r7, lr}
 8011502:	b091      	sub	sp, #68	; 0x44
 8011504:	af02      	add	r7, sp, #8
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801150c:	2300      	movs	r3, #0
 801150e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10a      	bne.n	8011530 <xQueuePeek+0x30>
	__asm volatile
 801151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151e:	f383 8811 	msr	BASEPRI, r3
 8011522:	f3bf 8f6f 	isb	sy
 8011526:	f3bf 8f4f 	dsb	sy
 801152a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801152c:	bf00      	nop
 801152e:	e7fe      	b.n	801152e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <xQueuePeek+0x3e>
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801153a:	2b00      	cmp	r3, #0
 801153c:	d101      	bne.n	8011542 <xQueuePeek+0x42>
 801153e:	2301      	movs	r3, #1
 8011540:	e000      	b.n	8011544 <xQueuePeek+0x44>
 8011542:	2300      	movs	r3, #0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d10a      	bne.n	801155e <xQueuePeek+0x5e>
	__asm volatile
 8011548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	623b      	str	r3, [r7, #32]
}
 801155a:	bf00      	nop
 801155c:	e7fe      	b.n	801155c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801155e:	f001 ff39 	bl	80133d4 <xTaskGetSchedulerState>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d102      	bne.n	801156e <xQueuePeek+0x6e>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <xQueuePeek+0x72>
 801156e:	2301      	movs	r3, #1
 8011570:	e000      	b.n	8011574 <xQueuePeek+0x74>
 8011572:	2300      	movs	r3, #0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10a      	bne.n	801158e <xQueuePeek+0x8e>
	__asm volatile
 8011578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157c:	f383 8811 	msr	BASEPRI, r3
 8011580:	f3bf 8f6f 	isb	sy
 8011584:	f3bf 8f4f 	dsb	sy
 8011588:	61fb      	str	r3, [r7, #28]
}
 801158a:	bf00      	nop
 801158c:	e7fe      	b.n	801158c <xQueuePeek+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801158e:	f002 fcc1 	bl	8013f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011596:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159a:	2b00      	cmp	r3, #0
 801159c:	d032      	beq.n	8011604 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 801159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115a4:	68b9      	ldr	r1, [r7, #8]
 80115a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115a8:	f000 f9e5 	bl	8011976 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 80115ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ae:	4618      	mov	r0, r3
 80115b0:	f007 fca0 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80115b4:	4604      	mov	r4, r0
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f007 fc9b 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80115be:	4602      	mov	r2, r0
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2101      	movs	r1, #1
 80115c4:	9100      	str	r1, [sp, #0]
 80115c6:	4621      	mov	r1, r4
 80115c8:	205c      	movs	r0, #92	; 0x5c
 80115ca:	f006 ff9f 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00f      	beq.n	80115fc <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115de:	3324      	adds	r3, #36	; 0x24
 80115e0:	4618      	mov	r0, r3
 80115e2:	f001 fc29 	bl	8012e38 <xTaskRemoveFromEventList>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d007      	beq.n	80115fc <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80115ec:	4b3d      	ldr	r3, [pc, #244]	; (80116e4 <xQueuePeek+0x1e4>)
 80115ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115f2:	601a      	str	r2, [r3, #0]
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80115fc:	f002 fcba 	bl	8013f74 <vPortExitCritical>
				return pdPASS;
 8011600:	2301      	movs	r3, #1
 8011602:	e06a      	b.n	80116da <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d103      	bne.n	8011612 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801160a:	f002 fcb3 	bl	8013f74 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801160e:	2300      	movs	r3, #0
 8011610:	e063      	b.n	80116da <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011614:	2b00      	cmp	r3, #0
 8011616:	d106      	bne.n	8011626 <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011618:	f107 0314 	add.w	r3, r7, #20
 801161c:	4618      	mov	r0, r3
 801161e:	f001 fc97 	bl	8012f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011622:	2301      	movs	r3, #1
 8011624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011626:	f002 fca5 	bl	8013f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801162a:	f001 f905 	bl	8012838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801162e:	f002 fc71 	bl	8013f14 <vPortEnterCritical>
 8011632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011638:	b25b      	sxtb	r3, r3
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163e:	d103      	bne.n	8011648 <xQueuePeek+0x148>
 8011640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011642:	2200      	movs	r2, #0
 8011644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801164e:	b25b      	sxtb	r3, r3
 8011650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011654:	d103      	bne.n	801165e <xQueuePeek+0x15e>
 8011656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011658:	2200      	movs	r2, #0
 801165a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801165e:	f002 fc89 	bl	8013f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011662:	1d3a      	adds	r2, r7, #4
 8011664:	f107 0314 	add.w	r3, r7, #20
 8011668:	4611      	mov	r1, r2
 801166a:	4618      	mov	r0, r3
 801166c:	f001 fc86 	bl	8012f7c <xTaskCheckForTimeOut>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	d124      	bne.n	80116c0 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011678:	f000 f9f5 	bl	8011a66 <prvIsQueueEmpty>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d018      	beq.n	80116b4 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011684:	3324      	adds	r3, #36	; 0x24
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	4611      	mov	r1, r2
 801168a:	4618      	mov	r0, r3
 801168c:	f001 fbb0 	bl	8012df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011692:	f000 f996 	bl	80119c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011696:	f001 f8dd 	bl	8012854 <xTaskResumeAll>
 801169a:	4603      	mov	r3, r0
 801169c:	2b00      	cmp	r3, #0
 801169e:	f47f af76 	bne.w	801158e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80116a2:	4b10      	ldr	r3, [pc, #64]	; (80116e4 <xQueuePeek+0x1e4>)
 80116a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	e76c      	b.n	801158e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80116b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116b6:	f000 f984 	bl	80119c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116ba:	f001 f8cb 	bl	8012854 <xTaskResumeAll>
 80116be:	e766      	b.n	801158e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80116c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116c2:	f000 f97e 	bl	80119c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116c6:	f001 f8c5 	bl	8012854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116cc:	f000 f9cb 	bl	8011a66 <prvIsQueueEmpty>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f43f af5b 	beq.w	801158e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80116d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80116da:	4618      	mov	r0, r3
 80116dc:	373c      	adds	r7, #60	; 0x3c
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd90      	pop	{r4, r7, pc}
 80116e2:	bf00      	nop
 80116e4:	e000ed04 	.word	0xe000ed04

080116e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80116e8:	b590      	push	{r4, r7, lr}
 80116ea:	b08f      	sub	sp, #60	; 0x3c
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10a      	bne.n	8011714 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80116fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011702:	f383 8811 	msr	BASEPRI, r3
 8011706:	f3bf 8f6f 	isb	sy
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	623b      	str	r3, [r7, #32]
}
 8011710:	bf00      	nop
 8011712:	e7fe      	b.n	8011712 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d103      	bne.n	8011722 <xQueueReceiveFromISR+0x3a>
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801171e:	2b00      	cmp	r3, #0
 8011720:	d101      	bne.n	8011726 <xQueueReceiveFromISR+0x3e>
 8011722:	2301      	movs	r3, #1
 8011724:	e000      	b.n	8011728 <xQueueReceiveFromISR+0x40>
 8011726:	2300      	movs	r3, #0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10a      	bne.n	8011742 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	61fb      	str	r3, [r7, #28]
}
 801173e:	bf00      	nop
 8011740:	e7fe      	b.n	8011740 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011742:	f002 fcc9 	bl	80140d8 <vPortValidateInterruptPriority>
	__asm volatile
 8011746:	f3ef 8211 	mrs	r2, BASEPRI
 801174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	61ba      	str	r2, [r7, #24]
 801175c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801175e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176a:	2b00      	cmp	r3, #0
 801176c:	d03e      	beq.n	80117ec <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	4618      	mov	r0, r3
 801177c:	f007 fbba 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011780:	4604      	mov	r4, r0
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	4618      	mov	r0, r3
 8011786:	f007 fbb5 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 801178a:	4602      	mov	r2, r0
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4621      	mov	r1, r4
 8011790:	2062      	movs	r0, #98	; 0x62
 8011792:	f006 fe45 	bl	8018420 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011796:	68b9      	ldr	r1, [r7, #8]
 8011798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801179a:	f000 f8ec 	bl	8011976 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	1e5a      	subs	r2, r3, #1
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80117a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80117aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ae:	d112      	bne.n	80117d6 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d016      	beq.n	80117e6 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ba:	3310      	adds	r3, #16
 80117bc:	4618      	mov	r0, r3
 80117be:	f001 fb3b 	bl	8012e38 <xTaskRemoveFromEventList>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00e      	beq.n	80117e6 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00b      	beq.n	80117e6 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2201      	movs	r2, #1
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	e007      	b.n	80117e6 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80117d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117da:	3301      	adds	r3, #1
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	b25a      	sxtb	r2, r3
 80117e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80117e6:	2301      	movs	r3, #1
 80117e8:	637b      	str	r3, [r7, #52]	; 0x34
 80117ea:	e010      	b.n	801180e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 80117ec:	2300      	movs	r3, #0
 80117ee:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 80117f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f2:	4618      	mov	r0, r3
 80117f4:	f007 fb7e 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80117f8:	4604      	mov	r4, r0
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f007 fb79 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011802:	4602      	mov	r2, r0
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4621      	mov	r1, r4
 8011808:	2062      	movs	r0, #98	; 0x62
 801180a:	f006 fe09 	bl	8018420 <SEGGER_SYSVIEW_RecordU32x3>
 801180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011810:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	f383 8811 	msr	BASEPRI, r3
}
 8011818:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801181c:	4618      	mov	r0, r3
 801181e:	373c      	adds	r7, #60	; 0x3c
 8011820:	46bd      	mov	sp, r7
 8011822:	bd90      	pop	{r4, r7, pc}

08011824 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d10a      	bne.n	801184c <vQueueDelete+0x28>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	60bb      	str	r3, [r7, #8]
}
 8011848:	bf00      	nop
 801184a:	e7fe      	b.n	801184a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	4618      	mov	r0, r3
 8011850:	f007 fb50 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011854:	4603      	mov	r3, r0
 8011856:	4619      	mov	r1, r3
 8011858:	205f      	movs	r0, #95	; 0x5f
 801185a:	f006 fd4b 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f000 f962 	bl	8011b28 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f002 fd3b 	bl	80142e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801186a:	bf00      	nop
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011872:	b480      	push	{r7}
 8011874:	b085      	sub	sp, #20
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187e:	2b00      	cmp	r3, #0
 8011880:	d006      	beq.n	8011890 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f1c3 0307 	rsb	r3, r3, #7
 801188c:	60fb      	str	r3, [r7, #12]
 801188e:	e001      	b.n	8011894 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011890:	2300      	movs	r3, #0
 8011892:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011894:	68fb      	ldr	r3, [r7, #12]
	}
 8011896:	4618      	mov	r0, r3
 8011898:	3714      	adds	r7, #20
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr

080118a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b086      	sub	sp, #24
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	60f8      	str	r0, [r7, #12]
 80118aa:	60b9      	str	r1, [r7, #8]
 80118ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80118ae:	2300      	movs	r3, #0
 80118b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d10d      	bne.n	80118dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d14d      	bne.n	8011964 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f001 fe2d 	bl	801352c <xTaskPriorityDisinherit>
 80118d2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2200      	movs	r2, #0
 80118d8:	605a      	str	r2, [r3, #4]
 80118da:	e043      	b.n	8011964 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d119      	bne.n	8011916 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	6898      	ldr	r0, [r3, #8]
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ea:	461a      	mov	r2, r3
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	f007 febb 	bl	8019668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	689a      	ldr	r2, [r3, #8]
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118fa:	441a      	add	r2, r3
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	689a      	ldr	r2, [r3, #8]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	429a      	cmp	r2, r3
 801190a:	d32b      	bcc.n	8011964 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	609a      	str	r2, [r3, #8]
 8011914:	e026      	b.n	8011964 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	68d8      	ldr	r0, [r3, #12]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801191e:	461a      	mov	r2, r3
 8011920:	68b9      	ldr	r1, [r7, #8]
 8011922:	f007 fea1 	bl	8019668 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	68da      	ldr	r2, [r3, #12]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192e:	425b      	negs	r3, r3
 8011930:	441a      	add	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	68da      	ldr	r2, [r3, #12]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	429a      	cmp	r2, r3
 8011940:	d207      	bcs.n	8011952 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	685a      	ldr	r2, [r3, #4]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194a:	425b      	negs	r3, r3
 801194c:	441a      	add	r2, r3
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b02      	cmp	r3, #2
 8011956:	d105      	bne.n	8011964 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	3b01      	subs	r3, #1
 8011962:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	1c5a      	adds	r2, r3, #1
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801196c:	697b      	ldr	r3, [r7, #20]
}
 801196e:	4618      	mov	r0, r3
 8011970:	3718      	adds	r7, #24
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b082      	sub	sp, #8
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011984:	2b00      	cmp	r3, #0
 8011986:	d018      	beq.n	80119ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	68da      	ldr	r2, [r3, #12]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011990:	441a      	add	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	68da      	ldr	r2, [r3, #12]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d303      	bcc.n	80119aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	68d9      	ldr	r1, [r3, #12]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b2:	461a      	mov	r2, r3
 80119b4:	6838      	ldr	r0, [r7, #0]
 80119b6:	f007 fe57 	bl	8019668 <memcpy>
	}
}
 80119ba:	bf00      	nop
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b084      	sub	sp, #16
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80119ca:	f002 faa3 	bl	8013f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80119d6:	e011      	b.n	80119fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d012      	beq.n	8011a06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3324      	adds	r3, #36	; 0x24
 80119e4:	4618      	mov	r0, r3
 80119e6:	f001 fa27 	bl	8012e38 <xTaskRemoveFromEventList>
 80119ea:	4603      	mov	r3, r0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d001      	beq.n	80119f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80119f0:	f001 fb26 	bl	8013040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80119f4:	7bfb      	ldrb	r3, [r7, #15]
 80119f6:	3b01      	subs	r3, #1
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80119fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	dce9      	bgt.n	80119d8 <prvUnlockQueue+0x16>
 8011a04:	e000      	b.n	8011a08 <prvUnlockQueue+0x46>
					break;
 8011a06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	22ff      	movs	r2, #255	; 0xff
 8011a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011a10:	f002 fab0 	bl	8013f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a14:	f002 fa7e 	bl	8013f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a20:	e011      	b.n	8011a46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d012      	beq.n	8011a50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3310      	adds	r3, #16
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 fa02 	bl	8012e38 <xTaskRemoveFromEventList>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d001      	beq.n	8011a3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011a3a:	f001 fb01 	bl	8013040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011a3e:	7bbb      	ldrb	r3, [r7, #14]
 8011a40:	3b01      	subs	r3, #1
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dce9      	bgt.n	8011a22 <prvUnlockQueue+0x60>
 8011a4e:	e000      	b.n	8011a52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011a50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	22ff      	movs	r2, #255	; 0xff
 8011a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011a5a:	f002 fa8b 	bl	8013f74 <vPortExitCritical>
}
 8011a5e:	bf00      	nop
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b084      	sub	sp, #16
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a6e:	f002 fa51 	bl	8013f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d102      	bne.n	8011a80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	60fb      	str	r3, [r7, #12]
 8011a7e:	e001      	b.n	8011a84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011a80:	2300      	movs	r3, #0
 8011a82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a84:	f002 fa76 	bl	8013f74 <vPortExitCritical>

	return xReturn;
 8011a88:	68fb      	ldr	r3, [r7, #12]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a9a:	f002 fa3b 	bl	8013f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d102      	bne.n	8011ab0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011aaa:	2301      	movs	r3, #1
 8011aac:	60fb      	str	r3, [r7, #12]
 8011aae:	e001      	b.n	8011ab4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ab4:	f002 fa5e 	bl	8013f74 <vPortExitCritical>

	return xReturn;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
	...

08011ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60fb      	str	r3, [r7, #12]
 8011ad2:	e01e      	b.n	8011b12 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011ad4:	4a13      	ldr	r2, [pc, #76]	; (8011b24 <vQueueAddToRegistry+0x60>)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d115      	bne.n	8011b0c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011ae0:	4910      	ldr	r1, [pc, #64]	; (8011b24 <vQueueAddToRegistry+0x60>)
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	683a      	ldr	r2, [r7, #0]
 8011ae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011aea:	4a0e      	ldr	r2, [pc, #56]	; (8011b24 <vQueueAddToRegistry+0x60>)
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	4413      	add	r3, r2
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f007 f9fb 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8011afe:	4601      	mov	r1, r0
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	461a      	mov	r2, r3
 8011b04:	2071      	movs	r0, #113	; 0x71
 8011b06:	f006 fc31 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8011b0a:	e006      	b.n	8011b1a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	3301      	adds	r3, #1
 8011b10:	60fb      	str	r3, [r7, #12]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2b07      	cmp	r3, #7
 8011b16:	d9dd      	bls.n	8011ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011b18:	bf00      	nop
 8011b1a:	bf00      	nop
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20000200 	.word	0x20000200

08011b28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011b28:	b480      	push	{r7}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b30:	2300      	movs	r3, #0
 8011b32:	60fb      	str	r3, [r7, #12]
 8011b34:	e016      	b.n	8011b64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011b36:	4a10      	ldr	r2, [pc, #64]	; (8011b78 <vQueueUnregisterQueue+0x50>)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	00db      	lsls	r3, r3, #3
 8011b3c:	4413      	add	r3, r2
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d10b      	bne.n	8011b5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011b46:	4a0c      	ldr	r2, [pc, #48]	; (8011b78 <vQueueUnregisterQueue+0x50>)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011b50:	4a09      	ldr	r2, [pc, #36]	; (8011b78 <vQueueUnregisterQueue+0x50>)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	4413      	add	r3, r2
 8011b58:	2200      	movs	r2, #0
 8011b5a:	605a      	str	r2, [r3, #4]
				break;
 8011b5c:	e006      	b.n	8011b6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3301      	adds	r3, #1
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2b07      	cmp	r3, #7
 8011b68:	d9e5      	bls.n	8011b36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011b6a:	bf00      	nop
 8011b6c:	bf00      	nop
 8011b6e:	3714      	adds	r7, #20
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	20000200 	.word	0x20000200

08011b7c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b08a      	sub	sp, #40	; 0x28
 8011b80:	af02      	add	r7, sp, #8
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2b04      	cmp	r3, #4
 8011b8c:	d80a      	bhi.n	8011ba4 <xStreamBufferGenericCreate+0x28>
	__asm volatile
 8011b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b92:	f383 8811 	msr	BASEPRI, r3
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	f3bf 8f4f 	dsb	sy
 8011b9e:	61bb      	str	r3, [r7, #24]
}
 8011ba0:	bf00      	nop
 8011ba2:	e7fe      	b.n	8011ba2 <xStreamBufferGenericCreate+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d90a      	bls.n	8011bc2 <xStreamBufferGenericCreate+0x46>
	__asm volatile
 8011bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb0:	f383 8811 	msr	BASEPRI, r3
 8011bb4:	f3bf 8f6f 	isb	sy
 8011bb8:	f3bf 8f4f 	dsb	sy
 8011bbc:	617b      	str	r3, [r7, #20]
}
 8011bbe:	bf00      	nop
 8011bc0:	e7fe      	b.n	8011bc0 <xStreamBufferGenericCreate+0x44>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d101      	bne.n	8011bcc <xStreamBufferGenericCreate+0x50>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8011bc8:	2301      	movs	r3, #1
 8011bca:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	3324      	adds	r3, #36	; 0x24
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f002 fabe 	bl	8014158 <pvPortMalloc>
 8011bdc:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d010      	beq.n	8011c06 <xStreamBufferGenericCreate+0x8a>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	69f8      	ldr	r0, [r7, #28]
 8011bf4:	f000 fb15 	bl	8012222 <prvInitialiseNewStreamBuffer>
										   pucAllocatedMemory + sizeof( StreamBuffer_t ),  /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
										   xBufferSizeBytes,
										   xTriggerLevelBytes,
										   xIsMessageBuffer );

			traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	2089      	movs	r0, #137	; 0x89
 8011c00:	f006 fbb4 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
 8011c04:	e005      	b.n	8011c12 <xStreamBufferGenericCreate+0x96>
		}
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	2089      	movs	r0, #137	; 0x89
 8011c0e:	f006 fbad 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8011c12:	69fb      	ldr	r3, [r7, #28]
	}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3720      	adds	r7, #32
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b087      	sub	sp, #28
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10a      	bne.n	8011c44 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	60fb      	str	r3, [r7, #12]
}
 8011c40:	bf00      	nop
 8011c42:	e7fe      	b.n	8011c42 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	689a      	ldr	r2, [r3, #8]
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	689b      	ldr	r3, [r3, #8]
 8011c64:	697a      	ldr	r2, [r7, #20]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d304      	bcc.n	8011c74 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	697a      	ldr	r2, [r7, #20]
 8011c70:	1ad3      	subs	r3, r2, r3
 8011c72:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8011c74:	697b      	ldr	r3, [r7, #20]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	371c      	adds	r7, #28
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr

08011c82 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b090      	sub	sp, #64	; 0x40
 8011c86:	af02      	add	r7, sp, #8
 8011c88:	60f8      	str	r0, [r7, #12]
 8011c8a:	60b9      	str	r1, [r7, #8]
 8011c8c:	607a      	str	r2, [r7, #4]
 8011c8e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8011c94:	2300      	movs	r3, #0
 8011c96:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10a      	bne.n	8011cb8 <xStreamBufferSend+0x36>
	__asm volatile
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cb4:	bf00      	nop
 8011cb6:	e7fe      	b.n	8011cb6 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10a      	bne.n	8011cd4 <xStreamBufferSend+0x52>
	__asm volatile
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	623b      	str	r3, [r7, #32]
}
 8011cd0:	bf00      	nop
 8011cd2:	e7fe      	b.n	8011cd2 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	7f1b      	ldrb	r3, [r3, #28]
 8011cd8:	f003 0301 	and.w	r3, r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <xStreamBufferSend+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8011ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d03f      	beq.n	8011d6c <xStreamBufferSend+0xea>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8011cec:	f107 0314 	add.w	r3, r7, #20
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f001 f907 	bl	8012f04 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8011cf6:	f002 f90d 	bl	8013f14 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8011cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfc:	f7ff ff8e 	bl	8011c1c <xStreamBufferSpacesAvailable>
 8011d00:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8011d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d217      	bcs.n	8011d3a <xStreamBufferSend+0xb8>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	f001 ff4c 	bl	8013ba8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00a      	beq.n	8011d2e <xStreamBufferSend+0xac>
	__asm volatile
 8011d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	61fb      	str	r3, [r7, #28]
}
 8011d2a:	bf00      	nop
 8011d2c:	e7fe      	b.n	8011d2c <xStreamBufferSend+0xaa>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8011d2e:	f001 fb41 	bl	80133b4 <xTaskGetCurrentTaskHandle>
 8011d32:	4602      	mov	r2, r0
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	615a      	str	r2, [r3, #20]
 8011d38:	e002      	b.n	8011d40 <xStreamBufferSend+0xbe>
				}
				else
				{
					taskEXIT_CRITICAL();
 8011d3a:	f002 f91b 	bl	8013f74 <vPortExitCritical>
					break;
 8011d3e:	e015      	b.n	8011d6c <xStreamBufferSend+0xea>
				}
			}
			taskEXIT_CRITICAL();
 8011d40:	f002 f918 	bl	8013f74 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f04f 31ff 	mov.w	r1, #4294967295
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	f001 fd37 	bl	80137c0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	2200      	movs	r2, #0
 8011d56:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8011d58:	463a      	mov	r2, r7
 8011d5a:	f107 0314 	add.w	r3, r7, #20
 8011d5e:	4611      	mov	r1, r2
 8011d60:	4618      	mov	r0, r3
 8011d62:	f001 f90b 	bl	8012f7c <xTaskCheckForTimeOut>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d0c4      	beq.n	8011cf6 <xStreamBufferSend+0x74>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8011d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d103      	bne.n	8011d7a <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8011d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d74:	f7ff ff52 	bl	8011c1c <xStreamBufferSpacesAvailable>
 8011d78:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	68b9      	ldr	r1, [r7, #8]
 8011d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d86:	f000 f830 	bl	8011dea <prvWriteMessageToBuffer>
 8011d8a:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8011d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d020      	beq.n	8011dd4 <xStreamBufferSend+0x152>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d96:	4619      	mov	r1, r3
 8011d98:	208c      	movs	r0, #140	; 0x8c
 8011d9a:	f006 fae7 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8011d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011da0:	f000 fa1f 	bl	80121e2 <prvBytesInBuffer>
 8011da4:	4602      	mov	r2, r0
 8011da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d318      	bcc.n	8011de0 <xStreamBufferSend+0x15e>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8011dae:	f000 fd43 	bl	8012838 <vTaskSuspendAll>
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d009      	beq.n	8011dce <xStreamBufferSend+0x14c>
 8011dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbc:	6918      	ldr	r0, [r3, #16]
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	f001 fd60 	bl	8013888 <xTaskGenericNotify>
 8011dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dca:	2200      	movs	r2, #0
 8011dcc:	611a      	str	r2, [r3, #16]
 8011dce:	f000 fd41 	bl	8012854 <xTaskResumeAll>
 8011dd2:	e005      	b.n	8011de0 <xStreamBufferSend+0x15e>
		}
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	4619      	mov	r1, r3
 8011dda:	208c      	movs	r0, #140	; 0x8c
 8011ddc:	f006 fac6 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
	}

	return xReturn;
 8011de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3738      	adds	r7, #56	; 0x38
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b086      	sub	sp, #24
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	60b9      	str	r1, [r7, #8]
 8011df4:	607a      	str	r2, [r7, #4]
 8011df6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d102      	bne.n	8011e04 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	617b      	str	r3, [r7, #20]
 8011e02:	e01d      	b.n	8011e40 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	7f1b      	ldrb	r3, [r3, #28]
 8011e08:	f003 0301 	and.w	r3, r3, #1
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d108      	bne.n	8011e22 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8011e10:	2301      	movs	r3, #1
 8011e12:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	bf28      	it	cs
 8011e1c:	4613      	movcs	r3, r2
 8011e1e:	607b      	str	r3, [r7, #4]
 8011e20:	e00e      	b.n	8011e40 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8011e22:	683a      	ldr	r2, [r7, #0]
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d308      	bcc.n	8011e3c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8011e2e:	1d3b      	adds	r3, r7, #4
 8011e30:	2204      	movs	r2, #4
 8011e32:	4619      	mov	r1, r3
 8011e34:	68f8      	ldr	r0, [r7, #12]
 8011e36:	f000 f8e8 	bl	801200a <prvWriteBytesToBuffer>
 8011e3a:	e001      	b.n	8011e40 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d007      	beq.n	8011e56 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	68b9      	ldr	r1, [r7, #8]
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f000 f8dc 	bl	801200a <prvWriteBytesToBuffer>
 8011e52:	6138      	str	r0, [r7, #16]
 8011e54:	e001      	b.n	8011e5a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8011e5a:	693b      	ldr	r3, [r7, #16]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08e      	sub	sp, #56	; 0x38
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
 8011e70:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8011e76:	2300      	movs	r3, #0
 8011e78:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d10a      	bne.n	8011e96 <xStreamBufferReceive+0x32>
	__asm volatile
 8011e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e84:	f383 8811 	msr	BASEPRI, r3
 8011e88:	f3bf 8f6f 	isb	sy
 8011e8c:	f3bf 8f4f 	dsb	sy
 8011e90:	61fb      	str	r3, [r7, #28]
}
 8011e92:	bf00      	nop
 8011e94:	e7fe      	b.n	8011e94 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8011e96:	6a3b      	ldr	r3, [r7, #32]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10a      	bne.n	8011eb2 <xStreamBufferReceive+0x4e>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	61bb      	str	r3, [r7, #24]
}
 8011eae:	bf00      	nop
 8011eb0:	e7fe      	b.n	8011eb0 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	7f1b      	ldrb	r3, [r3, #28]
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d002      	beq.n	8011ec4 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8011ebe:	2304      	movs	r3, #4
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ec2:	e001      	b.n	8011ec8 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d035      	beq.n	8011f3a <xStreamBufferReceive+0xd6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8011ece:	f002 f821 	bl	8013f14 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8011ed2:	6a38      	ldr	r0, [r7, #32]
 8011ed4:	f000 f985 	bl	80121e2 <prvBytesInBuffer>
 8011ed8:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8011eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d816      	bhi.n	8011f10 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f001 fe60 	bl	8013ba8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8011ee8:	6a3b      	ldr	r3, [r7, #32]
 8011eea:	691b      	ldr	r3, [r3, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00a      	beq.n	8011f06 <xStreamBufferReceive+0xa2>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	617b      	str	r3, [r7, #20]
}
 8011f02:	bf00      	nop
 8011f04:	e7fe      	b.n	8011f04 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8011f06:	f001 fa55 	bl	80133b4 <xTaskGetCurrentTaskHandle>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	6a3b      	ldr	r3, [r7, #32]
 8011f0e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011f10:	f002 f830 	bl	8013f74 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8011f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d812      	bhi.n	8011f42 <xStreamBufferReceive+0xde>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f04f 31ff 	mov.w	r1, #4294967295
 8011f24:	2000      	movs	r0, #0
 8011f26:	f001 fc4b 	bl	80137c0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8011f2a:	6a3b      	ldr	r3, [r7, #32]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8011f30:	6a38      	ldr	r0, [r7, #32]
 8011f32:	f000 f956 	bl	80121e2 <prvBytesInBuffer>
 8011f36:	62b8      	str	r0, [r7, #40]	; 0x28
 8011f38:	e003      	b.n	8011f42 <xStreamBufferReceive+0xde>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8011f3a:	6a38      	ldr	r0, [r7, #32]
 8011f3c:	f000 f951 	bl	80121e2 <prvBytesInBuffer>
 8011f40:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8011f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d924      	bls.n	8011f94 <xStreamBufferReceive+0x130>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	68b9      	ldr	r1, [r7, #8]
 8011f54:	6a38      	ldr	r0, [r7, #32]
 8011f56:	f000 f828 	bl	8011faa <prvReadMessageFromBuffer>
 8011f5a:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8011f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d01e      	beq.n	8011fa0 <xStreamBufferReceive+0x13c>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f66:	4619      	mov	r1, r3
 8011f68:	208e      	movs	r0, #142	; 0x8e
 8011f6a:	f006 f9ff 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8011f6e:	f000 fc63 	bl	8012838 <vTaskSuspendAll>
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	695b      	ldr	r3, [r3, #20]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d009      	beq.n	8011f8e <xStreamBufferReceive+0x12a>
 8011f7a:	6a3b      	ldr	r3, [r7, #32]
 8011f7c:	6958      	ldr	r0, [r3, #20]
 8011f7e:	2300      	movs	r3, #0
 8011f80:	2200      	movs	r2, #0
 8011f82:	2100      	movs	r1, #0
 8011f84:	f001 fc80 	bl	8013888 <xTaskGenericNotify>
 8011f88:	6a3b      	ldr	r3, [r7, #32]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	615a      	str	r2, [r3, #20]
 8011f8e:	f000 fc61 	bl	8012854 <xTaskResumeAll>
 8011f92:	e005      	b.n	8011fa0 <xStreamBufferReceive+0x13c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2200      	movs	r2, #0
 8011f98:	4619      	mov	r1, r3
 8011f9a:	208e      	movs	r0, #142	; 0x8e
 8011f9c:	f006 f9e6 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8011fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3730      	adds	r7, #48	; 0x30
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b088      	sub	sp, #32
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	60f8      	str	r0, [r7, #12]
 8011fb2:	60b9      	str	r1, [r7, #8]
 8011fb4:	607a      	str	r2, [r7, #4]
 8011fb6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8011fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d017      	beq.n	8011fee <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8011fc4:	f107 0114 	add.w	r1, r7, #20
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f000 f88e 	bl	80120ee <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d207      	bcs.n	8011ff2 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	69fa      	ldr	r2, [r7, #28]
 8011fe6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	617b      	str	r3, [r7, #20]
 8011fec:	e001      	b.n	8011ff2 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8011ff2:	697a      	ldr	r2, [r7, #20]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	68b9      	ldr	r1, [r7, #8]
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f000 f878 	bl	80120ee <prvReadBytesFromBuffer>
 8011ffe:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 8012000:	69bb      	ldr	r3, [r7, #24]
}
 8012002:	4618      	mov	r0, r3
 8012004:	3720      	adds	r7, #32
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 801200a:	b580      	push	{r7, lr}
 801200c:	b08a      	sub	sp, #40	; 0x28
 801200e:	af00      	add	r7, sp, #0
 8012010:	60f8      	str	r0, [r7, #12]
 8012012:	60b9      	str	r1, [r7, #8]
 8012014:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d10a      	bne.n	8012032 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 801201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	61fb      	str	r3, [r7, #28]
}
 801202e:	bf00      	nop
 8012030:	e7fe      	b.n	8012030 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	689a      	ldr	r2, [r3, #8]
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	4293      	cmp	r3, r2
 8012044:	bf28      	it	cs
 8012046:	4613      	movcs	r3, r2
 8012048:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 801204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801204c:	6a3b      	ldr	r3, [r7, #32]
 801204e:	441a      	add	r2, r3
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	429a      	cmp	r2, r3
 8012056:	d90a      	bls.n	801206e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8012058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801205c:	f383 8811 	msr	BASEPRI, r3
 8012060:	f3bf 8f6f 	isb	sy
 8012064:	f3bf 8f4f 	dsb	sy
 8012068:	61bb      	str	r3, [r7, #24]
}
 801206a:	bf00      	nop
 801206c:	e7fe      	b.n	801206c <prvWriteBytesToBuffer+0x62>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	699a      	ldr	r2, [r3, #24]
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	4413      	add	r3, r2
 8012076:	6a3a      	ldr	r2, [r7, #32]
 8012078:	68b9      	ldr	r1, [r7, #8]
 801207a:	4618      	mov	r0, r3
 801207c:	f007 faf4 	bl	8019668 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	429a      	cmp	r2, r3
 8012086:	d91c      	bls.n	80120c2 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	1ad2      	subs	r2, r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	689b      	ldr	r3, [r3, #8]
 8012092:	429a      	cmp	r2, r3
 8012094:	d90a      	bls.n	80120ac <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209a:	f383 8811 	msr	BASEPRI, r3
 801209e:	f3bf 8f6f 	isb	sy
 80120a2:	f3bf 8f4f 	dsb	sy
 80120a6:	617b      	str	r3, [r7, #20]
}
 80120a8:	bf00      	nop
 80120aa:	e7fe      	b.n	80120aa <prvWriteBytesToBuffer+0xa0>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	6998      	ldr	r0, [r3, #24]
 80120b0:	68ba      	ldr	r2, [r7, #8]
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	18d1      	adds	r1, r2, r3
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6a3b      	ldr	r3, [r7, #32]
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	461a      	mov	r2, r3
 80120be:	f007 fad3 	bl	8019668 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80120c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4413      	add	r3, r2
 80120c8:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d304      	bcc.n	80120de <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120e2:	605a      	str	r2, [r3, #4]

	return xCount;
 80120e4:	687b      	ldr	r3, [r7, #4]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3728      	adds	r7, #40	; 0x28
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b08a      	sub	sp, #40	; 0x28
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	60f8      	str	r0, [r7, #12]
 80120f6:	60b9      	str	r1, [r7, #8]
 80120f8:	607a      	str	r2, [r7, #4]
 80120fa:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	4293      	cmp	r3, r2
 8012102:	bf28      	it	cs
 8012104:	4613      	movcs	r3, r2
 8012106:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d064      	beq.n	80121d8 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	689a      	ldr	r2, [r3, #8]
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	6a3a      	ldr	r2, [r7, #32]
 801211e:	4293      	cmp	r3, r2
 8012120:	bf28      	it	cs
 8012122:	4613      	movcs	r3, r2
 8012124:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8012126:	69fa      	ldr	r2, [r7, #28]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	429a      	cmp	r2, r3
 801212c:	d90a      	bls.n	8012144 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 801212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012132:	f383 8811 	msr	BASEPRI, r3
 8012136:	f3bf 8f6f 	isb	sy
 801213a:	f3bf 8f4f 	dsb	sy
 801213e:	61bb      	str	r3, [r7, #24]
}
 8012140:	bf00      	nop
 8012142:	e7fe      	b.n	8012142 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8012144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	441a      	add	r2, r3
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	689b      	ldr	r3, [r3, #8]
 801214e:	429a      	cmp	r2, r3
 8012150:	d90a      	bls.n	8012168 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8012152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012156:	f383 8811 	msr	BASEPRI, r3
 801215a:	f3bf 8f6f 	isb	sy
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	617b      	str	r3, [r7, #20]
}
 8012164:	bf00      	nop
 8012166:	e7fe      	b.n	8012166 <prvReadBytesFromBuffer+0x78>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	699a      	ldr	r2, [r3, #24]
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	4413      	add	r3, r2
 8012170:	69fa      	ldr	r2, [r7, #28]
 8012172:	4619      	mov	r1, r3
 8012174:	68b8      	ldr	r0, [r7, #8]
 8012176:	f007 fa77 	bl	8019668 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 801217a:	6a3a      	ldr	r2, [r7, #32]
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	429a      	cmp	r2, r3
 8012180:	d919      	bls.n	80121b6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8012182:	6a3a      	ldr	r2, [r7, #32]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	429a      	cmp	r2, r3
 8012188:	d90a      	bls.n	80121a0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 801218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218e:	f383 8811 	msr	BASEPRI, r3
 8012192:	f3bf 8f6f 	isb	sy
 8012196:	f3bf 8f4f 	dsb	sy
 801219a:	613b      	str	r3, [r7, #16]
}
 801219c:	bf00      	nop
 801219e:	e7fe      	b.n	801219e <prvReadBytesFromBuffer+0xb0>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	18d0      	adds	r0, r2, r3
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6999      	ldr	r1, [r3, #24]
 80121aa:	6a3a      	ldr	r2, [r7, #32]
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	1ad3      	subs	r3, r2, r3
 80121b0:	461a      	mov	r2, r3
 80121b2:	f007 fa59 	bl	8019668 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80121b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	4413      	add	r3, r2
 80121bc:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d304      	bcc.n	80121d2 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	689b      	ldr	r3, [r3, #8]
 80121cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121d6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80121d8:	6a3b      	ldr	r3, [r7, #32]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3728      	adds	r7, #40	; 0x28
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80121e2:	b480      	push	{r7}
 80121e4:	b085      	sub	sp, #20
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	689a      	ldr	r2, [r3, #8]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	4413      	add	r3, r2
 80121f4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	429a      	cmp	r2, r3
 8012208:	d304      	bcc.n	8012214 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8012214:	68fb      	ldr	r3, [r7, #12]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3714      	adds	r7, #20
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b086      	sub	sp, #24
 8012226:	af00      	add	r7, sp, #0
 8012228:	60f8      	str	r0, [r7, #12]
 801222a:	60b9      	str	r1, [r7, #8]
 801222c:	607a      	str	r2, [r7, #4]
 801222e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8012230:	2355      	movs	r3, #85	; 0x55
 8012232:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	6979      	ldr	r1, [r7, #20]
 8012238:	68b8      	ldr	r0, [r7, #8]
 801223a:	f007 fa23 	bl	8019684 <memset>
 801223e:	4602      	mov	r2, r0
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	4293      	cmp	r3, r2
 8012244:	d00a      	beq.n	801225c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	613b      	str	r3, [r7, #16]
}
 8012258:	bf00      	nop
 801225a:	e7fe      	b.n	801225a <prvInitialiseNewStreamBuffer+0x38>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 801225c:	2224      	movs	r2, #36	; 0x24
 801225e:	2100      	movs	r1, #0
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f007 fa0f 	bl	8019684 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	683a      	ldr	r2, [r7, #0]
 8012276:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d006      	beq.n	801228c <prvInitialiseNewStreamBuffer+0x6a>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	7f1b      	ldrb	r3, [r3, #28]
 8012282:	f043 0301 	orr.w	r3, r3, #1
 8012286:	b2da      	uxtb	r2, r3
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	771a      	strb	r2, [r3, #28]
	}
}
 801228c:	bf00      	nop
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08c      	sub	sp, #48	; 0x30
 8012298:	af04      	add	r7, sp, #16
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	4613      	mov	r3, r2
 80122a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122a4:	88fb      	ldrh	r3, [r7, #6]
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f001 ff55 	bl	8014158 <pvPortMalloc>
 80122ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00e      	beq.n	80122d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80122b6:	2064      	movs	r0, #100	; 0x64
 80122b8:	f001 ff4e 	bl	8014158 <pvPortMalloc>
 80122bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d003      	beq.n	80122cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	697a      	ldr	r2, [r7, #20]
 80122c8:	631a      	str	r2, [r3, #48]	; 0x30
 80122ca:	e005      	b.n	80122d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80122cc:	6978      	ldr	r0, [r7, #20]
 80122ce:	f002 f807 	bl	80142e0 <vPortFree>
 80122d2:	e001      	b.n	80122d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80122d4:	2300      	movs	r3, #0
 80122d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d013      	beq.n	8012306 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80122de:	88fa      	ldrh	r2, [r7, #6]
 80122e0:	2300      	movs	r3, #0
 80122e2:	9303      	str	r3, [sp, #12]
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	9302      	str	r3, [sp, #8]
 80122e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ea:	9301      	str	r3, [sp, #4]
 80122ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ee:	9300      	str	r3, [sp, #0]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	68f8      	ldr	r0, [r7, #12]
 80122f6:	f000 f80e 	bl	8012316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122fa:	69f8      	ldr	r0, [r7, #28]
 80122fc:	f000 f898 	bl	8012430 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012300:	2301      	movs	r3, #1
 8012302:	61bb      	str	r3, [r7, #24]
 8012304:	e002      	b.n	801230c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012306:	f04f 33ff 	mov.w	r3, #4294967295
 801230a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801230c:	69bb      	ldr	r3, [r7, #24]
	}
 801230e:	4618      	mov	r0, r3
 8012310:	3720      	adds	r7, #32
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b088      	sub	sp, #32
 801231a:	af00      	add	r7, sp, #0
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]
 8012322:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012326:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	461a      	mov	r2, r3
 801232e:	21a5      	movs	r1, #165	; 0xa5
 8012330:	f007 f9a8 	bl	8019684 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801233e:	3b01      	subs	r3, #1
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	f023 0307 	bic.w	r3, r3, #7
 801234c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	f003 0307 	and.w	r3, r3, #7
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00a      	beq.n	801236e <prvInitialiseNewTask+0x58>
	__asm volatile
 8012358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235c:	f383 8811 	msr	BASEPRI, r3
 8012360:	f3bf 8f6f 	isb	sy
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	617b      	str	r3, [r7, #20]
}
 801236a:	bf00      	nop
 801236c:	e7fe      	b.n	801236c <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	69ba      	ldr	r2, [r7, #24]
 8012372:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012374:	2300      	movs	r3, #0
 8012376:	61fb      	str	r3, [r7, #28]
 8012378:	e012      	b.n	80123a0 <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	4413      	add	r3, r2
 8012380:	7819      	ldrb	r1, [r3, #0]
 8012382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	4413      	add	r3, r2
 8012388:	3334      	adds	r3, #52	; 0x34
 801238a:	460a      	mov	r2, r1
 801238c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801238e:	68ba      	ldr	r2, [r7, #8]
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	4413      	add	r3, r2
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d006      	beq.n	80123a8 <prvInitialiseNewTask+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	3301      	adds	r3, #1
 801239e:	61fb      	str	r3, [r7, #28]
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	2b0f      	cmp	r3, #15
 80123a4:	d9e9      	bls.n	801237a <prvInitialiseNewTask+0x64>
 80123a6:	e000      	b.n	80123aa <prvInitialiseNewTask+0x94>
		{
			break;
 80123a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80123aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ac:	2200      	movs	r2, #0
 80123ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80123b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b4:	2b06      	cmp	r3, #6
 80123b6:	d901      	bls.n	80123bc <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80123b8:	2306      	movs	r3, #6
 80123ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80123bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80123c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123c6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80123c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ca:	2200      	movs	r2, #0
 80123cc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	3304      	adds	r3, #4
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7fe fa42 	bl	801085c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	3318      	adds	r3, #24
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe fa3d 	bl	801085c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80123e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ea:	f1c3 0207 	rsb	r2, r3, #7
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80123f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80123f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fa:	2200      	movs	r2, #0
 80123fc:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	2200      	movs	r2, #0
 8012402:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012406:	2200      	movs	r2, #0
 8012408:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	68f9      	ldr	r1, [r7, #12]
 8012410:	69b8      	ldr	r0, [r7, #24]
 8012412:	f001 fc55 	bl	8013cc0 <pxPortInitialiseStack>
 8012416:	4602      	mov	r2, r0
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241e:	2b00      	cmp	r3, #0
 8012420:	d002      	beq.n	8012428 <prvInitialiseNewTask+0x112>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012426:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012428:	bf00      	nop
 801242a:	3720      	adds	r7, #32
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012430:	b5b0      	push	{r4, r5, r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af02      	add	r7, sp, #8
 8012436:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012438:	f001 fd6c 	bl	8013f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801243c:	4b3b      	ldr	r3, [pc, #236]	; (801252c <prvAddNewTaskToReadyList+0xfc>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3301      	adds	r3, #1
 8012442:	4a3a      	ldr	r2, [pc, #232]	; (801252c <prvAddNewTaskToReadyList+0xfc>)
 8012444:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012446:	4b3a      	ldr	r3, [pc, #232]	; (8012530 <prvAddNewTaskToReadyList+0x100>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d109      	bne.n	8012462 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801244e:	4a38      	ldr	r2, [pc, #224]	; (8012530 <prvAddNewTaskToReadyList+0x100>)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012454:	4b35      	ldr	r3, [pc, #212]	; (801252c <prvAddNewTaskToReadyList+0xfc>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b01      	cmp	r3, #1
 801245a:	d110      	bne.n	801247e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801245c:	f000 fe16 	bl	801308c <prvInitialiseTaskLists>
 8012460:	e00d      	b.n	801247e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012462:	4b34      	ldr	r3, [pc, #208]	; (8012534 <prvAddNewTaskToReadyList+0x104>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d109      	bne.n	801247e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801246a:	4b31      	ldr	r3, [pc, #196]	; (8012530 <prvAddNewTaskToReadyList+0x100>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012474:	429a      	cmp	r2, r3
 8012476:	d802      	bhi.n	801247e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012478:	4a2d      	ldr	r2, [pc, #180]	; (8012530 <prvAddNewTaskToReadyList+0x100>)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801247e:	4b2e      	ldr	r3, [pc, #184]	; (8012538 <prvAddNewTaskToReadyList+0x108>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3301      	adds	r3, #1
 8012484:	4a2c      	ldr	r2, [pc, #176]	; (8012538 <prvAddNewTaskToReadyList+0x108>)
 8012486:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012488:	4b2b      	ldr	r3, [pc, #172]	; (8012538 <prvAddNewTaskToReadyList+0x108>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d016      	beq.n	80124c4 <prvAddNewTaskToReadyList+0x94>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4618      	mov	r0, r3
 801249a:	f006 fc5f 	bl	8018d5c <SEGGER_SYSVIEW_OnTaskCreate>
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ae:	461d      	mov	r5, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	461c      	mov	r4, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ba:	1ae3      	subs	r3, r4, r3
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	462b      	mov	r3, r5
 80124c0:	f006 ff28 	bl	8019314 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f006 fcd0 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d0:	2201      	movs	r2, #1
 80124d2:	409a      	lsls	r2, r3
 80124d4:	4b19      	ldr	r3, [pc, #100]	; (801253c <prvAddNewTaskToReadyList+0x10c>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4313      	orrs	r3, r2
 80124da:	4a18      	ldr	r2, [pc, #96]	; (801253c <prvAddNewTaskToReadyList+0x10c>)
 80124dc:	6013      	str	r3, [r2, #0]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124e2:	4613      	mov	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	4413      	add	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	4a15      	ldr	r2, [pc, #84]	; (8012540 <prvAddNewTaskToReadyList+0x110>)
 80124ec:	441a      	add	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	3304      	adds	r3, #4
 80124f2:	4619      	mov	r1, r3
 80124f4:	4610      	mov	r0, r2
 80124f6:	f7fe f9be 	bl	8010876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80124fa:	f001 fd3b 	bl	8013f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80124fe:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <prvAddNewTaskToReadyList+0x104>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00e      	beq.n	8012524 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012506:	4b0a      	ldr	r3, [pc, #40]	; (8012530 <prvAddNewTaskToReadyList+0x100>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012510:	429a      	cmp	r2, r3
 8012512:	d207      	bcs.n	8012524 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012514:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <prvAddNewTaskToReadyList+0x114>)
 8012516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801251a:	601a      	str	r2, [r3, #0]
 801251c:	f3bf 8f4f 	dsb	sy
 8012520:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bdb0      	pop	{r4, r5, r7, pc}
 801252c:	20000340 	.word	0x20000340
 8012530:	20000240 	.word	0x20000240
 8012534:	2000034c 	.word	0x2000034c
 8012538:	2000035c 	.word	0x2000035c
 801253c:	20000348 	.word	0x20000348
 8012540:	20000244 	.word	0x20000244
 8012544:	e000ed04 	.word	0xe000ed04

08012548 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012550:	f001 fce0 	bl	8013f14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d102      	bne.n	8012560 <vTaskDelete+0x18>
 801255a:	4b3f      	ldr	r3, [pc, #252]	; (8012658 <vTaskDelete+0x110>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	e000      	b.n	8012562 <vTaskDelete+0x1a>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	3304      	adds	r3, #4
 8012568:	4618      	mov	r0, r3
 801256a:	f7fe f9e1 	bl	8010930 <uxListRemove>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d115      	bne.n	80125a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012578:	4938      	ldr	r1, [pc, #224]	; (801265c <vTaskDelete+0x114>)
 801257a:	4613      	mov	r3, r2
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	440b      	add	r3, r1
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d10a      	bne.n	80125a0 <vTaskDelete+0x58>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	2201      	movs	r2, #1
 8012590:	fa02 f303 	lsl.w	r3, r2, r3
 8012594:	43da      	mvns	r2, r3
 8012596:	4b32      	ldr	r3, [pc, #200]	; (8012660 <vTaskDelete+0x118>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4013      	ands	r3, r2
 801259c:	4a30      	ldr	r2, [pc, #192]	; (8012660 <vTaskDelete+0x118>)
 801259e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	3318      	adds	r3, #24
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7fe f9bf 	bl	8010930 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80125b2:	4b2c      	ldr	r3, [pc, #176]	; (8012664 <vTaskDelete+0x11c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	4a2a      	ldr	r2, [pc, #168]	; (8012664 <vTaskDelete+0x11c>)
 80125ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80125bc:	4b26      	ldr	r3, [pc, #152]	; (8012658 <vTaskDelete+0x110>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d10b      	bne.n	80125de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	3304      	adds	r3, #4
 80125ca:	4619      	mov	r1, r3
 80125cc:	4826      	ldr	r0, [pc, #152]	; (8012668 <vTaskDelete+0x120>)
 80125ce:	f7fe f952 	bl	8010876 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80125d2:	4b26      	ldr	r3, [pc, #152]	; (801266c <vTaskDelete+0x124>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	3301      	adds	r3, #1
 80125d8:	4a24      	ldr	r2, [pc, #144]	; (801266c <vTaskDelete+0x124>)
 80125da:	6013      	str	r3, [r2, #0]
 80125dc:	e009      	b.n	80125f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80125de:	4b24      	ldr	r3, [pc, #144]	; (8012670 <vTaskDelete+0x128>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	3b01      	subs	r3, #1
 80125e4:	4a22      	ldr	r2, [pc, #136]	; (8012670 <vTaskDelete+0x128>)
 80125e6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f000 fead 	bl	8013348 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80125ee:	f000 febb 	bl	8013368 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f006 fc7d 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 80125fa:	4603      	mov	r3, r0
 80125fc:	4619      	mov	r1, r3
 80125fe:	2022      	movs	r0, #34	; 0x22
 8012600:	f005 fe78 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	4618      	mov	r0, r3
 8012608:	f006 feec 	bl	80193e4 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 801260c:	f001 fcb2 	bl	8013f74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8012610:	4b18      	ldr	r3, [pc, #96]	; (8012674 <vTaskDelete+0x12c>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d01b      	beq.n	8012650 <vTaskDelete+0x108>
		{
			if( pxTCB == pxCurrentTCB )
 8012618:	4b0f      	ldr	r3, [pc, #60]	; (8012658 <vTaskDelete+0x110>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	429a      	cmp	r2, r3
 8012620:	d116      	bne.n	8012650 <vTaskDelete+0x108>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8012622:	4b15      	ldr	r3, [pc, #84]	; (8012678 <vTaskDelete+0x130>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00a      	beq.n	8012640 <vTaskDelete+0xf8>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	f383 8811 	msr	BASEPRI, r3
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	f3bf 8f4f 	dsb	sy
 801263a:	60bb      	str	r3, [r7, #8]
}
 801263c:	bf00      	nop
 801263e:	e7fe      	b.n	801263e <vTaskDelete+0xf6>
				portYIELD_WITHIN_API();
 8012640:	4b0e      	ldr	r3, [pc, #56]	; (801267c <vTaskDelete+0x134>)
 8012642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012650:	bf00      	nop
 8012652:	3710      	adds	r7, #16
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	20000240 	.word	0x20000240
 801265c:	20000244 	.word	0x20000244
 8012660:	20000348 	.word	0x20000348
 8012664:	2000035c 	.word	0x2000035c
 8012668:	20000314 	.word	0x20000314
 801266c:	20000328 	.word	0x20000328
 8012670:	20000340 	.word	0x20000340
 8012674:	2000034c 	.word	0x2000034c
 8012678:	20000368 	.word	0x20000368
 801267c:	e000ed04 	.word	0xe000ed04

08012680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d01b      	beq.n	80126ca <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012692:	4b15      	ldr	r3, [pc, #84]	; (80126e8 <vTaskDelay+0x68>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00a      	beq.n	80126b0 <vTaskDelay+0x30>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	60bb      	str	r3, [r7, #8]
}
 80126ac:	bf00      	nop
 80126ae:	e7fe      	b.n	80126ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80126b0:	f000 f8c2 	bl	8012838 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	2023      	movs	r0, #35	; 0x23
 80126b8:	f005 fe1c 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80126bc:	2100      	movs	r1, #0
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f001 fa98 	bl	8013bf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80126c4:	f000 f8c6 	bl	8012854 <xTaskResumeAll>
 80126c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d107      	bne.n	80126e0 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80126d0:	4b06      	ldr	r3, [pc, #24]	; (80126ec <vTaskDelay+0x6c>)
 80126d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80126e0:	bf00      	nop
 80126e2:	3710      	adds	r7, #16
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	20000368 	.word	0x20000368
 80126ec:	e000ed04 	.word	0xe000ed04

080126f0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d10a      	bne.n	8012718 <eTaskGetState+0x28>
	__asm volatile
 8012702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012706:	f383 8811 	msr	BASEPRI, r3
 801270a:	f3bf 8f6f 	isb	sy
 801270e:	f3bf 8f4f 	dsb	sy
 8012712:	60bb      	str	r3, [r7, #8]
}
 8012714:	bf00      	nop
 8012716:	e7fe      	b.n	8012716 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8012718:	4b1d      	ldr	r3, [pc, #116]	; (8012790 <eTaskGetState+0xa0>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	693a      	ldr	r2, [r7, #16]
 801271e:	429a      	cmp	r2, r3
 8012720:	d102      	bne.n	8012728 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012722:	2300      	movs	r3, #0
 8012724:	75fb      	strb	r3, [r7, #23]
 8012726:	e02d      	b.n	8012784 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8012728:	f001 fbf4 	bl	8013f14 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012732:	f001 fc1f 	bl	8013f74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8012736:	4b17      	ldr	r3, [pc, #92]	; (8012794 <eTaskGetState+0xa4>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	429a      	cmp	r2, r3
 801273e:	d004      	beq.n	801274a <eTaskGetState+0x5a>
 8012740:	4b15      	ldr	r3, [pc, #84]	; (8012798 <eTaskGetState+0xa8>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	429a      	cmp	r2, r3
 8012748:	d102      	bne.n	8012750 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801274a:	2302      	movs	r3, #2
 801274c:	75fb      	strb	r3, [r7, #23]
 801274e:	e019      	b.n	8012784 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4a12      	ldr	r2, [pc, #72]	; (801279c <eTaskGetState+0xac>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d109      	bne.n	801276c <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801275c:	2b00      	cmp	r3, #0
 801275e:	d102      	bne.n	8012766 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8012760:	2303      	movs	r3, #3
 8012762:	75fb      	strb	r3, [r7, #23]
 8012764:	e00e      	b.n	8012784 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8012766:	2302      	movs	r3, #2
 8012768:	75fb      	strb	r3, [r7, #23]
 801276a:	e00b      	b.n	8012784 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	4a0c      	ldr	r2, [pc, #48]	; (80127a0 <eTaskGetState+0xb0>)
 8012770:	4293      	cmp	r3, r2
 8012772:	d002      	beq.n	801277a <eTaskGetState+0x8a>
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d102      	bne.n	8012780 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801277a:	2304      	movs	r3, #4
 801277c:	75fb      	strb	r3, [r7, #23]
 801277e:	e001      	b.n	8012784 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8012780:	2301      	movs	r3, #1
 8012782:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8012784:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012786:	4618      	mov	r0, r3
 8012788:	3718      	adds	r7, #24
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20000240 	.word	0x20000240
 8012794:	200002f8 	.word	0x200002f8
 8012798:	200002fc 	.word	0x200002fc
 801279c:	2000032c 	.word	0x2000032c
 80127a0:	20000314 	.word	0x20000314

080127a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b086      	sub	sp, #24
 80127a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80127aa:	4b1d      	ldr	r3, [pc, #116]	; (8012820 <vTaskStartScheduler+0x7c>)
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	2300      	movs	r3, #0
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	2300      	movs	r3, #0
 80127b4:	2280      	movs	r2, #128	; 0x80
 80127b6:	491b      	ldr	r1, [pc, #108]	; (8012824 <vTaskStartScheduler+0x80>)
 80127b8:	481b      	ldr	r0, [pc, #108]	; (8012828 <vTaskStartScheduler+0x84>)
 80127ba:	f7ff fd6b 	bl	8012294 <xTaskCreate>
 80127be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d118      	bne.n	80127f8 <vTaskStartScheduler+0x54>
	__asm volatile
 80127c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ca:	f383 8811 	msr	BASEPRI, r3
 80127ce:	f3bf 8f6f 	isb	sy
 80127d2:	f3bf 8f4f 	dsb	sy
 80127d6:	60bb      	str	r3, [r7, #8]
}
 80127d8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127da:	4b14      	ldr	r3, [pc, #80]	; (801282c <vTaskStartScheduler+0x88>)
 80127dc:	f04f 32ff 	mov.w	r2, #4294967295
 80127e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127e2:	4b13      	ldr	r3, [pc, #76]	; (8012830 <vTaskStartScheduler+0x8c>)
 80127e4:	2201      	movs	r2, #1
 80127e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80127e8:	4b12      	ldr	r3, [pc, #72]	; (8012834 <vTaskStartScheduler+0x90>)
 80127ea:	2200      	movs	r2, #0
 80127ec:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80127ee:	f002 fbbb 	bl	8014f68 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127f2:	f001 faed 	bl	8013dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127f6:	e00e      	b.n	8012816 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127fe:	d10a      	bne.n	8012816 <vTaskStartScheduler+0x72>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	607b      	str	r3, [r7, #4]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <vTaskStartScheduler+0x70>
}
 8012816:	bf00      	nop
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20000364 	.word	0x20000364
 8012824:	0801a020 	.word	0x0801a020
 8012828:	08013059 	.word	0x08013059
 801282c:	20000360 	.word	0x20000360
 8012830:	2000034c 	.word	0x2000034c
 8012834:	20000344 	.word	0x20000344

08012838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012838:	b480      	push	{r7}
 801283a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801283c:	4b04      	ldr	r3, [pc, #16]	; (8012850 <vTaskSuspendAll+0x18>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	3301      	adds	r3, #1
 8012842:	4a03      	ldr	r2, [pc, #12]	; (8012850 <vTaskSuspendAll+0x18>)
 8012844:	6013      	str	r3, [r2, #0]
}
 8012846:	bf00      	nop
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr
 8012850:	20000368 	.word	0x20000368

08012854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801285a:	2300      	movs	r3, #0
 801285c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801285e:	2300      	movs	r3, #0
 8012860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012862:	4b43      	ldr	r3, [pc, #268]	; (8012970 <xTaskResumeAll+0x11c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10a      	bne.n	8012880 <xTaskResumeAll+0x2c>
	__asm volatile
 801286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	603b      	str	r3, [r7, #0]
}
 801287c:	bf00      	nop
 801287e:	e7fe      	b.n	801287e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012880:	f001 fb48 	bl	8013f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012884:	4b3a      	ldr	r3, [pc, #232]	; (8012970 <xTaskResumeAll+0x11c>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	3b01      	subs	r3, #1
 801288a:	4a39      	ldr	r2, [pc, #228]	; (8012970 <xTaskResumeAll+0x11c>)
 801288c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801288e:	4b38      	ldr	r3, [pc, #224]	; (8012970 <xTaskResumeAll+0x11c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d165      	bne.n	8012962 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012896:	4b37      	ldr	r3, [pc, #220]	; (8012974 <xTaskResumeAll+0x120>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d061      	beq.n	8012962 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801289e:	e032      	b.n	8012906 <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80128a0:	4b35      	ldr	r3, [pc, #212]	; (8012978 <xTaskResumeAll+0x124>)
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	3318      	adds	r3, #24
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fe f83f 	bl	8010930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	3304      	adds	r3, #4
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe f83a 	bl	8010930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4618      	mov	r0, r3
 80128c0:	f006 fad4 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c8:	2201      	movs	r2, #1
 80128ca:	409a      	lsls	r2, r3
 80128cc:	4b2b      	ldr	r3, [pc, #172]	; (801297c <xTaskResumeAll+0x128>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4313      	orrs	r3, r2
 80128d2:	4a2a      	ldr	r2, [pc, #168]	; (801297c <xTaskResumeAll+0x128>)
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128da:	4613      	mov	r3, r2
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	4413      	add	r3, r2
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4a27      	ldr	r2, [pc, #156]	; (8012980 <xTaskResumeAll+0x12c>)
 80128e4:	441a      	add	r2, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	3304      	adds	r3, #4
 80128ea:	4619      	mov	r1, r3
 80128ec:	4610      	mov	r0, r2
 80128ee:	f7fd ffc2 	bl	8010876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f6:	4b23      	ldr	r3, [pc, #140]	; (8012984 <xTaskResumeAll+0x130>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d302      	bcc.n	8012906 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8012900:	4b21      	ldr	r3, [pc, #132]	; (8012988 <xTaskResumeAll+0x134>)
 8012902:	2201      	movs	r2, #1
 8012904:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012906:	4b1c      	ldr	r3, [pc, #112]	; (8012978 <xTaskResumeAll+0x124>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1c8      	bne.n	80128a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012914:	f000 fd28 	bl	8013368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012918:	4b1c      	ldr	r3, [pc, #112]	; (801298c <xTaskResumeAll+0x138>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d010      	beq.n	8012946 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012924:	f000 f8f4 	bl	8012b10 <xTaskIncrementTick>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d002      	beq.n	8012934 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 801292e:	4b16      	ldr	r3, [pc, #88]	; (8012988 <xTaskResumeAll+0x134>)
 8012930:	2201      	movs	r2, #1
 8012932:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3b01      	subs	r3, #1
 8012938:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d1f1      	bne.n	8012924 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8012940:	4b12      	ldr	r3, [pc, #72]	; (801298c <xTaskResumeAll+0x138>)
 8012942:	2200      	movs	r2, #0
 8012944:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012946:	4b10      	ldr	r3, [pc, #64]	; (8012988 <xTaskResumeAll+0x134>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d009      	beq.n	8012962 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801294e:	2301      	movs	r3, #1
 8012950:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012952:	4b0f      	ldr	r3, [pc, #60]	; (8012990 <xTaskResumeAll+0x13c>)
 8012954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012958:	601a      	str	r2, [r3, #0]
 801295a:	f3bf 8f4f 	dsb	sy
 801295e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012962:	f001 fb07 	bl	8013f74 <vPortExitCritical>

	return xAlreadyYielded;
 8012966:	68bb      	ldr	r3, [r7, #8]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3710      	adds	r7, #16
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	20000368 	.word	0x20000368
 8012974:	20000340 	.word	0x20000340
 8012978:	20000300 	.word	0x20000300
 801297c:	20000348 	.word	0x20000348
 8012980:	20000244 	.word	0x20000244
 8012984:	20000240 	.word	0x20000240
 8012988:	20000354 	.word	0x20000354
 801298c:	20000350 	.word	0x20000350
 8012990:	e000ed04 	.word	0xe000ed04

08012994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801299a:	4b05      	ldr	r3, [pc, #20]	; (80129b0 <xTaskGetTickCount+0x1c>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80129a0:	687b      	ldr	r3, [r7, #4]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	370c      	adds	r7, #12
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	20000344 	.word	0x20000344

080129b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129ba:	f001 fb8d 	bl	80140d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80129be:	2300      	movs	r3, #0
 80129c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80129c2:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <xTaskGetTickCountFromISR+0x20>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129c8:	683b      	ldr	r3, [r7, #0]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	20000344 	.word	0x20000344

080129d8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80129d8:	b480      	push	{r7}
 80129da:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80129dc:	4b03      	ldr	r3, [pc, #12]	; (80129ec <uxTaskGetNumberOfTasks+0x14>)
 80129de:	681b      	ldr	r3, [r3, #0]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	20000340 	.word	0x20000340

080129f0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b086      	sub	sp, #24
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80129fc:	2300      	movs	r3, #0
 80129fe:	617b      	str	r3, [r7, #20]
 8012a00:	2307      	movs	r3, #7
 8012a02:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8012a04:	f7ff ff18 	bl	8012838 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8012a08:	4b3b      	ldr	r3, [pc, #236]	; (8012af8 <uxTaskGetSystemState+0x108>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d36a      	bcc.n	8012ae8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	3b01      	subs	r3, #1
 8012a16:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	4413      	add	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	461a      	mov	r2, r3
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	1898      	adds	r0, r3, r2
 8012a28:	693a      	ldr	r2, [r7, #16]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	4413      	add	r3, r2
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	4a32      	ldr	r2, [pc, #200]	; (8012afc <uxTaskGetSystemState+0x10c>)
 8012a34:	4413      	add	r3, r2
 8012a36:	2201      	movs	r2, #1
 8012a38:	4619      	mov	r1, r3
 8012a3a:	f000 fbfb 	bl	8013234 <prvListTasksWithinSingleList>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	4413      	add	r3, r2
 8012a44:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d1e2      	bne.n	8012a12 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8012a4c:	697a      	ldr	r2, [r7, #20]
 8012a4e:	4613      	mov	r3, r2
 8012a50:	00db      	lsls	r3, r3, #3
 8012a52:	4413      	add	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	461a      	mov	r2, r3
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	4a28      	ldr	r2, [pc, #160]	; (8012b00 <uxTaskGetSystemState+0x110>)
 8012a5e:	6811      	ldr	r1, [r2, #0]
 8012a60:	2202      	movs	r2, #2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f000 fbe6 	bl	8013234 <prvListTasksWithinSingleList>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	4613      	mov	r3, r2
 8012a74:	00db      	lsls	r3, r3, #3
 8012a76:	4413      	add	r3, r2
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4413      	add	r3, r2
 8012a80:	4a20      	ldr	r2, [pc, #128]	; (8012b04 <uxTaskGetSystemState+0x114>)
 8012a82:	6811      	ldr	r1, [r2, #0]
 8012a84:	2202      	movs	r2, #2
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 fbd4 	bl	8013234 <prvListTasksWithinSingleList>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	4413      	add	r3, r2
 8012a92:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8012a94:	697a      	ldr	r2, [r7, #20]
 8012a96:	4613      	mov	r3, r2
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	4413      	add	r3, r2
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	2204      	movs	r2, #4
 8012aa6:	4918      	ldr	r1, [pc, #96]	; (8012b08 <uxTaskGetSystemState+0x118>)
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fbc3 	bl	8013234 <prvListTasksWithinSingleList>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8012ab6:	697a      	ldr	r2, [r7, #20]
 8012ab8:	4613      	mov	r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	4413      	add	r3, r2
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	2203      	movs	r2, #3
 8012ac8:	4910      	ldr	r1, [pc, #64]	; (8012b0c <uxTaskGetSystemState+0x11c>)
 8012aca:	4618      	mov	r0, r3
 8012acc:	f000 fbb2 	bl	8013234 <prvListTasksWithinSingleList>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	4413      	add	r3, r2
 8012ad6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d004      	beq.n	8012ae8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012ade:	f002 fa4a 	bl	8014f76 <getRunTimeCounterValue>
 8012ae2:	4602      	mov	r2, r0
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8012ae8:	f7ff feb4 	bl	8012854 <xTaskResumeAll>

		return uxTask;
 8012aec:	697b      	ldr	r3, [r7, #20]
	}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3718      	adds	r7, #24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	20000340 	.word	0x20000340
 8012afc:	20000244 	.word	0x20000244
 8012b00:	200002f8 	.word	0x200002f8
 8012b04:	200002fc 	.word	0x200002fc
 8012b08:	20000314 	.word	0x20000314
 8012b0c:	2000032c 	.word	0x2000032c

08012b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b16:	2300      	movs	r3, #0
 8012b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b1a:	4b53      	ldr	r3, [pc, #332]	; (8012c68 <xTaskIncrementTick+0x158>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f040 8091 	bne.w	8012c46 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b24:	4b51      	ldr	r3, [pc, #324]	; (8012c6c <xTaskIncrementTick+0x15c>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b2c:	4a4f      	ldr	r2, [pc, #316]	; (8012c6c <xTaskIncrementTick+0x15c>)
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d120      	bne.n	8012b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b38:	4b4d      	ldr	r3, [pc, #308]	; (8012c70 <xTaskIncrementTick+0x160>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00a      	beq.n	8012b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	603b      	str	r3, [r7, #0]
}
 8012b54:	bf00      	nop
 8012b56:	e7fe      	b.n	8012b56 <xTaskIncrementTick+0x46>
 8012b58:	4b45      	ldr	r3, [pc, #276]	; (8012c70 <xTaskIncrementTick+0x160>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	60fb      	str	r3, [r7, #12]
 8012b5e:	4b45      	ldr	r3, [pc, #276]	; (8012c74 <xTaskIncrementTick+0x164>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a43      	ldr	r2, [pc, #268]	; (8012c70 <xTaskIncrementTick+0x160>)
 8012b64:	6013      	str	r3, [r2, #0]
 8012b66:	4a43      	ldr	r2, [pc, #268]	; (8012c74 <xTaskIncrementTick+0x164>)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	6013      	str	r3, [r2, #0]
 8012b6c:	4b42      	ldr	r3, [pc, #264]	; (8012c78 <xTaskIncrementTick+0x168>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	3301      	adds	r3, #1
 8012b72:	4a41      	ldr	r2, [pc, #260]	; (8012c78 <xTaskIncrementTick+0x168>)
 8012b74:	6013      	str	r3, [r2, #0]
 8012b76:	f000 fbf7 	bl	8013368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012b7a:	4b40      	ldr	r3, [pc, #256]	; (8012c7c <xTaskIncrementTick+0x16c>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	693a      	ldr	r2, [r7, #16]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d351      	bcc.n	8012c28 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b84:	4b3a      	ldr	r3, [pc, #232]	; (8012c70 <xTaskIncrementTick+0x160>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d101      	bne.n	8012b92 <xTaskIncrementTick+0x82>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e000      	b.n	8012b94 <xTaskIncrementTick+0x84>
 8012b92:	2300      	movs	r3, #0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d004      	beq.n	8012ba2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b98:	4b38      	ldr	r3, [pc, #224]	; (8012c7c <xTaskIncrementTick+0x16c>)
 8012b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9e:	601a      	str	r2, [r3, #0]
					break;
 8012ba0:	e042      	b.n	8012c28 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012ba2:	4b33      	ldr	r3, [pc, #204]	; (8012c70 <xTaskIncrementTick+0x160>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012bb2:	693a      	ldr	r2, [r7, #16]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d203      	bcs.n	8012bc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012bba:	4a30      	ldr	r2, [pc, #192]	; (8012c7c <xTaskIncrementTick+0x16c>)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6013      	str	r3, [r2, #0]
						break;
 8012bc0:	e032      	b.n	8012c28 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	3304      	adds	r3, #4
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fd feb2 	bl	8010930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d004      	beq.n	8012bde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	3318      	adds	r3, #24
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fd fea9 	bl	8010930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f006 f943 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bea:	2201      	movs	r2, #1
 8012bec:	409a      	lsls	r2, r3
 8012bee:	4b24      	ldr	r3, [pc, #144]	; (8012c80 <xTaskIncrementTick+0x170>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	4a22      	ldr	r2, [pc, #136]	; (8012c80 <xTaskIncrementTick+0x170>)
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4413      	add	r3, r2
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4a1f      	ldr	r2, [pc, #124]	; (8012c84 <xTaskIncrementTick+0x174>)
 8012c06:	441a      	add	r2, r3
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	3304      	adds	r3, #4
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	4610      	mov	r0, r2
 8012c10:	f7fd fe31 	bl	8010876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c18:	4b1b      	ldr	r3, [pc, #108]	; (8012c88 <xTaskIncrementTick+0x178>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d3b0      	bcc.n	8012b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012c22:	2301      	movs	r3, #1
 8012c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c26:	e7ad      	b.n	8012b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c28:	4b17      	ldr	r3, [pc, #92]	; (8012c88 <xTaskIncrementTick+0x178>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2e:	4915      	ldr	r1, [pc, #84]	; (8012c84 <xTaskIncrementTick+0x174>)
 8012c30:	4613      	mov	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	440b      	add	r3, r1
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d907      	bls.n	8012c50 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8012c40:	2301      	movs	r3, #1
 8012c42:	617b      	str	r3, [r7, #20]
 8012c44:	e004      	b.n	8012c50 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012c46:	4b11      	ldr	r3, [pc, #68]	; (8012c8c <xTaskIncrementTick+0x17c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	4a0f      	ldr	r2, [pc, #60]	; (8012c8c <xTaskIncrementTick+0x17c>)
 8012c4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012c50:	4b0f      	ldr	r3, [pc, #60]	; (8012c90 <xTaskIncrementTick+0x180>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012c5c:	697b      	ldr	r3, [r7, #20]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3718      	adds	r7, #24
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	20000368 	.word	0x20000368
 8012c6c:	20000344 	.word	0x20000344
 8012c70:	200002f8 	.word	0x200002f8
 8012c74:	200002fc 	.word	0x200002fc
 8012c78:	20000358 	.word	0x20000358
 8012c7c:	20000360 	.word	0x20000360
 8012c80:	20000348 	.word	0x20000348
 8012c84:	20000244 	.word	0x20000244
 8012c88:	20000240 	.word	0x20000240
 8012c8c:	20000350 	.word	0x20000350
 8012c90:	20000354 	.word	0x20000354

08012c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b088      	sub	sp, #32
 8012c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c9a:	4b4d      	ldr	r3, [pc, #308]	; (8012dd0 <vTaskSwitchContext+0x13c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d003      	beq.n	8012caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ca2:	4b4c      	ldr	r3, [pc, #304]	; (8012dd4 <vTaskSwitchContext+0x140>)
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ca8:	e08d      	b.n	8012dc6 <vTaskSwitchContext+0x132>
		xYieldPending = pdFALSE;
 8012caa:	4b4a      	ldr	r3, [pc, #296]	; (8012dd4 <vTaskSwitchContext+0x140>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012cb0:	f002 f961 	bl	8014f76 <getRunTimeCounterValue>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	4a48      	ldr	r2, [pc, #288]	; (8012dd8 <vTaskSwitchContext+0x144>)
 8012cb8:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012cba:	4b47      	ldr	r3, [pc, #284]	; (8012dd8 <vTaskSwitchContext+0x144>)
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	4b47      	ldr	r3, [pc, #284]	; (8012ddc <vTaskSwitchContext+0x148>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d909      	bls.n	8012cda <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012cc6:	4b46      	ldr	r3, [pc, #280]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012ccc:	4a42      	ldr	r2, [pc, #264]	; (8012dd8 <vTaskSwitchContext+0x144>)
 8012cce:	6810      	ldr	r0, [r2, #0]
 8012cd0:	4a42      	ldr	r2, [pc, #264]	; (8012ddc <vTaskSwitchContext+0x148>)
 8012cd2:	6812      	ldr	r2, [r2, #0]
 8012cd4:	1a82      	subs	r2, r0, r2
 8012cd6:	440a      	add	r2, r1
 8012cd8:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8012cda:	4b3f      	ldr	r3, [pc, #252]	; (8012dd8 <vTaskSwitchContext+0x144>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a3f      	ldr	r2, [pc, #252]	; (8012ddc <vTaskSwitchContext+0x148>)
 8012ce0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012ce2:	4b3f      	ldr	r3, [pc, #252]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce8:	61fb      	str	r3, [r7, #28]
 8012cea:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012cee:	61bb      	str	r3, [r7, #24]
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	69ba      	ldr	r2, [r7, #24]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d111      	bne.n	8012d1e <vTaskSwitchContext+0x8a>
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	3304      	adds	r3, #4
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	69ba      	ldr	r2, [r7, #24]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d10b      	bne.n	8012d1e <vTaskSwitchContext+0x8a>
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	3308      	adds	r3, #8
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	69ba      	ldr	r2, [r7, #24]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d105      	bne.n	8012d1e <vTaskSwitchContext+0x8a>
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	330c      	adds	r3, #12
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	69ba      	ldr	r2, [r7, #24]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d008      	beq.n	8012d30 <vTaskSwitchContext+0x9c>
 8012d1e:	4b30      	ldr	r3, [pc, #192]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	4b2f      	ldr	r3, [pc, #188]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	3334      	adds	r3, #52	; 0x34
 8012d28:	4619      	mov	r1, r3
 8012d2a:	4610      	mov	r0, r2
 8012d2c:	f002 f92b 	bl	8014f86 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012d30:	4b2c      	ldr	r3, [pc, #176]	; (8012de4 <vTaskSwitchContext+0x150>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	fab3 f383 	clz	r3, r3
 8012d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012d3e:	7afb      	ldrb	r3, [r7, #11]
 8012d40:	f1c3 031f 	rsb	r3, r3, #31
 8012d44:	617b      	str	r3, [r7, #20]
 8012d46:	4928      	ldr	r1, [pc, #160]	; (8012de8 <vTaskSwitchContext+0x154>)
 8012d48:	697a      	ldr	r2, [r7, #20]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	4413      	add	r3, r2
 8012d50:	009b      	lsls	r3, r3, #2
 8012d52:	440b      	add	r3, r1
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d10a      	bne.n	8012d70 <vTaskSwitchContext+0xdc>
	__asm volatile
 8012d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d5e:	f383 8811 	msr	BASEPRI, r3
 8012d62:	f3bf 8f6f 	isb	sy
 8012d66:	f3bf 8f4f 	dsb	sy
 8012d6a:	607b      	str	r3, [r7, #4]
}
 8012d6c:	bf00      	nop
 8012d6e:	e7fe      	b.n	8012d6e <vTaskSwitchContext+0xda>
 8012d70:	697a      	ldr	r2, [r7, #20]
 8012d72:	4613      	mov	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4413      	add	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	4a1b      	ldr	r2, [pc, #108]	; (8012de8 <vTaskSwitchContext+0x154>)
 8012d7c:	4413      	add	r3, r2
 8012d7e:	613b      	str	r3, [r7, #16]
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	685a      	ldr	r2, [r3, #4]
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	605a      	str	r2, [r3, #4]
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	685a      	ldr	r2, [r3, #4]
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	3308      	adds	r3, #8
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d104      	bne.n	8012da0 <vTaskSwitchContext+0x10c>
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	685a      	ldr	r2, [r3, #4]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	605a      	str	r2, [r3, #4]
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	4a0e      	ldr	r2, [pc, #56]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012da8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8012daa:	4b0d      	ldr	r3, [pc, #52]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	4b0f      	ldr	r3, [pc, #60]	; (8012dec <vTaskSwitchContext+0x158>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d102      	bne.n	8012dbc <vTaskSwitchContext+0x128>
 8012db6:	f005 ffb5 	bl	8018d24 <SEGGER_SYSVIEW_OnIdle>
}
 8012dba:	e004      	b.n	8012dc6 <vTaskSwitchContext+0x132>
		traceTASK_SWITCHED_IN();
 8012dbc:	4b08      	ldr	r3, [pc, #32]	; (8012de0 <vTaskSwitchContext+0x14c>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f006 f80f 	bl	8018de4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8012dc6:	bf00      	nop
 8012dc8:	3720      	adds	r7, #32
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20000368 	.word	0x20000368
 8012dd4:	20000354 	.word	0x20000354
 8012dd8:	20000370 	.word	0x20000370
 8012ddc:	2000036c 	.word	0x2000036c
 8012de0:	20000240 	.word	0x20000240
 8012de4:	20000348 	.word	0x20000348
 8012de8:	20000244 	.word	0x20000244
 8012dec:	20000364 	.word	0x20000364

08012df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d10a      	bne.n	8012e16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e04:	f383 8811 	msr	BASEPRI, r3
 8012e08:	f3bf 8f6f 	isb	sy
 8012e0c:	f3bf 8f4f 	dsb	sy
 8012e10:	60fb      	str	r3, [r7, #12]
}
 8012e12:	bf00      	nop
 8012e14:	e7fe      	b.n	8012e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e16:	4b07      	ldr	r3, [pc, #28]	; (8012e34 <vTaskPlaceOnEventList+0x44>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	3318      	adds	r3, #24
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7fd fd4d 	bl	80108be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012e24:	2101      	movs	r1, #1
 8012e26:	6838      	ldr	r0, [r7, #0]
 8012e28:	f000 fee4 	bl	8013bf4 <prvAddCurrentTaskToDelayedList>
}
 8012e2c:	bf00      	nop
 8012e2e:	3710      	adds	r7, #16
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	20000240 	.word	0x20000240

08012e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b086      	sub	sp, #24
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d10a      	bne.n	8012e64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	60fb      	str	r3, [r7, #12]
}
 8012e60:	bf00      	nop
 8012e62:	e7fe      	b.n	8012e62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	3318      	adds	r3, #24
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7fd fd61 	bl	8010930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e6e:	4b1f      	ldr	r3, [pc, #124]	; (8012eec <xTaskRemoveFromEventList+0xb4>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d120      	bne.n	8012eb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	3304      	adds	r3, #4
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fd fd58 	bl	8010930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f005 fff2 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	409a      	lsls	r2, r3
 8012e90:	4b17      	ldr	r3, [pc, #92]	; (8012ef0 <xTaskRemoveFromEventList+0xb8>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4313      	orrs	r3, r2
 8012e96:	4a16      	ldr	r2, [pc, #88]	; (8012ef0 <xTaskRemoveFromEventList+0xb8>)
 8012e98:	6013      	str	r3, [r2, #0]
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	4413      	add	r3, r2
 8012ea4:	009b      	lsls	r3, r3, #2
 8012ea6:	4a13      	ldr	r2, [pc, #76]	; (8012ef4 <xTaskRemoveFromEventList+0xbc>)
 8012ea8:	441a      	add	r2, r3
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	3304      	adds	r3, #4
 8012eae:	4619      	mov	r1, r3
 8012eb0:	4610      	mov	r0, r2
 8012eb2:	f7fd fce0 	bl	8010876 <vListInsertEnd>
 8012eb6:	e005      	b.n	8012ec4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	3318      	adds	r3, #24
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	480e      	ldr	r0, [pc, #56]	; (8012ef8 <xTaskRemoveFromEventList+0xc0>)
 8012ec0:	f7fd fcd9 	bl	8010876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec8:	4b0c      	ldr	r3, [pc, #48]	; (8012efc <xTaskRemoveFromEventList+0xc4>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d905      	bls.n	8012ede <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ed6:	4b0a      	ldr	r3, [pc, #40]	; (8012f00 <xTaskRemoveFromEventList+0xc8>)
 8012ed8:	2201      	movs	r2, #1
 8012eda:	601a      	str	r2, [r3, #0]
 8012edc:	e001      	b.n	8012ee2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012ee2:	697b      	ldr	r3, [r7, #20]
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3718      	adds	r7, #24
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	20000368 	.word	0x20000368
 8012ef0:	20000348 	.word	0x20000348
 8012ef4:	20000244 	.word	0x20000244
 8012ef8:	20000300 	.word	0x20000300
 8012efc:	20000240 	.word	0x20000240
 8012f00:	20000354 	.word	0x20000354

08012f04 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d10a      	bne.n	8012f28 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8012f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f16:	f383 8811 	msr	BASEPRI, r3
 8012f1a:	f3bf 8f6f 	isb	sy
 8012f1e:	f3bf 8f4f 	dsb	sy
 8012f22:	60fb      	str	r3, [r7, #12]
}
 8012f24:	bf00      	nop
 8012f26:	e7fe      	b.n	8012f26 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8012f28:	f000 fff4 	bl	8013f14 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012f2c:	4b06      	ldr	r3, [pc, #24]	; (8012f48 <vTaskSetTimeOutState+0x44>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8012f34:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <vTaskSetTimeOutState+0x48>)
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8012f3c:	f001 f81a 	bl	8013f74 <vPortExitCritical>
}
 8012f40:	bf00      	nop
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	20000358 	.word	0x20000358
 8012f4c:	20000344 	.word	0x20000344

08012f50 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012f50:	b480      	push	{r7}
 8012f52:	b083      	sub	sp, #12
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012f58:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <vTaskInternalSetTimeOutState+0x24>)
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012f60:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <vTaskInternalSetTimeOutState+0x28>)
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	605a      	str	r2, [r3, #4]
}
 8012f68:	bf00      	nop
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr
 8012f74:	20000358 	.word	0x20000358
 8012f78:	20000344 	.word	0x20000344

08012f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b088      	sub	sp, #32
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d10a      	bne.n	8012fa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	613b      	str	r3, [r7, #16]
}
 8012f9e:	bf00      	nop
 8012fa0:	e7fe      	b.n	8012fa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fac:	f383 8811 	msr	BASEPRI, r3
 8012fb0:	f3bf 8f6f 	isb	sy
 8012fb4:	f3bf 8f4f 	dsb	sy
 8012fb8:	60fb      	str	r3, [r7, #12]
}
 8012fba:	bf00      	nop
 8012fbc:	e7fe      	b.n	8012fbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012fbe:	f000 ffa9 	bl	8013f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012fc2:	4b1d      	ldr	r3, [pc, #116]	; (8013038 <xTaskCheckForTimeOut+0xbc>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	69ba      	ldr	r2, [r7, #24]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fda:	d102      	bne.n	8012fe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	61fb      	str	r3, [r7, #28]
 8012fe0:	e023      	b.n	801302a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <xTaskCheckForTimeOut+0xc0>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d007      	beq.n	8012ffe <xTaskCheckForTimeOut+0x82>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	69ba      	ldr	r2, [r7, #24]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d302      	bcc.n	8012ffe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	61fb      	str	r3, [r7, #28]
 8012ffc:	e015      	b.n	801302a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	697a      	ldr	r2, [r7, #20]
 8013004:	429a      	cmp	r2, r3
 8013006:	d20b      	bcs.n	8013020 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	681a      	ldr	r2, [r3, #0]
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	1ad2      	subs	r2, r2, r3
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f7ff ff9b 	bl	8012f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801301a:	2300      	movs	r3, #0
 801301c:	61fb      	str	r3, [r7, #28]
 801301e:	e004      	b.n	801302a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	2200      	movs	r2, #0
 8013024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013026:	2301      	movs	r3, #1
 8013028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801302a:	f000 ffa3 	bl	8013f74 <vPortExitCritical>

	return xReturn;
 801302e:	69fb      	ldr	r3, [r7, #28]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3720      	adds	r7, #32
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	20000344 	.word	0x20000344
 801303c:	20000358 	.word	0x20000358

08013040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013040:	b480      	push	{r7}
 8013042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013044:	4b03      	ldr	r3, [pc, #12]	; (8013054 <vTaskMissedYield+0x14>)
 8013046:	2201      	movs	r2, #1
 8013048:	601a      	str	r2, [r3, #0]
}
 801304a:	bf00      	nop
 801304c:	46bd      	mov	sp, r7
 801304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013052:	4770      	bx	lr
 8013054:	20000354 	.word	0x20000354

08013058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013060:	f000 f854 	bl	801310c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013064:	4b07      	ldr	r3, [pc, #28]	; (8013084 <prvIdleTask+0x2c>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d907      	bls.n	801307c <prvIdleTask+0x24>
			{
				taskYIELD();
 801306c:	4b06      	ldr	r3, [pc, #24]	; (8013088 <prvIdleTask+0x30>)
 801306e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013072:	601a      	str	r2, [r3, #0]
 8013074:	f3bf 8f4f 	dsb	sy
 8013078:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801307c:	f002 f94a 	bl	8015314 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013080:	e7ee      	b.n	8013060 <prvIdleTask+0x8>
 8013082:	bf00      	nop
 8013084:	20000244 	.word	0x20000244
 8013088:	e000ed04 	.word	0xe000ed04

0801308c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013092:	2300      	movs	r3, #0
 8013094:	607b      	str	r3, [r7, #4]
 8013096:	e00c      	b.n	80130b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	4613      	mov	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	4413      	add	r3, r2
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	4a12      	ldr	r2, [pc, #72]	; (80130ec <prvInitialiseTaskLists+0x60>)
 80130a4:	4413      	add	r3, r2
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fd fbb8 	bl	801081c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3301      	adds	r3, #1
 80130b0:	607b      	str	r3, [r7, #4]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b06      	cmp	r3, #6
 80130b6:	d9ef      	bls.n	8013098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80130b8:	480d      	ldr	r0, [pc, #52]	; (80130f0 <prvInitialiseTaskLists+0x64>)
 80130ba:	f7fd fbaf 	bl	801081c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80130be:	480d      	ldr	r0, [pc, #52]	; (80130f4 <prvInitialiseTaskLists+0x68>)
 80130c0:	f7fd fbac 	bl	801081c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80130c4:	480c      	ldr	r0, [pc, #48]	; (80130f8 <prvInitialiseTaskLists+0x6c>)
 80130c6:	f7fd fba9 	bl	801081c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80130ca:	480c      	ldr	r0, [pc, #48]	; (80130fc <prvInitialiseTaskLists+0x70>)
 80130cc:	f7fd fba6 	bl	801081c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80130d0:	480b      	ldr	r0, [pc, #44]	; (8013100 <prvInitialiseTaskLists+0x74>)
 80130d2:	f7fd fba3 	bl	801081c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80130d6:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <prvInitialiseTaskLists+0x78>)
 80130d8:	4a05      	ldr	r2, [pc, #20]	; (80130f0 <prvInitialiseTaskLists+0x64>)
 80130da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80130dc:	4b0a      	ldr	r3, [pc, #40]	; (8013108 <prvInitialiseTaskLists+0x7c>)
 80130de:	4a05      	ldr	r2, [pc, #20]	; (80130f4 <prvInitialiseTaskLists+0x68>)
 80130e0:	601a      	str	r2, [r3, #0]
}
 80130e2:	bf00      	nop
 80130e4:	3708      	adds	r7, #8
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	20000244 	.word	0x20000244
 80130f0:	200002d0 	.word	0x200002d0
 80130f4:	200002e4 	.word	0x200002e4
 80130f8:	20000300 	.word	0x20000300
 80130fc:	20000314 	.word	0x20000314
 8013100:	2000032c 	.word	0x2000032c
 8013104:	200002f8 	.word	0x200002f8
 8013108:	200002fc 	.word	0x200002fc

0801310c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013112:	e019      	b.n	8013148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013114:	f000 fefe 	bl	8013f14 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013118:	4b10      	ldr	r3, [pc, #64]	; (801315c <prvCheckTasksWaitingTermination+0x50>)
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	3304      	adds	r3, #4
 8013124:	4618      	mov	r0, r3
 8013126:	f7fd fc03 	bl	8010930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801312a:	4b0d      	ldr	r3, [pc, #52]	; (8013160 <prvCheckTasksWaitingTermination+0x54>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	3b01      	subs	r3, #1
 8013130:	4a0b      	ldr	r2, [pc, #44]	; (8013160 <prvCheckTasksWaitingTermination+0x54>)
 8013132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013134:	4b0b      	ldr	r3, [pc, #44]	; (8013164 <prvCheckTasksWaitingTermination+0x58>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3b01      	subs	r3, #1
 801313a:	4a0a      	ldr	r2, [pc, #40]	; (8013164 <prvCheckTasksWaitingTermination+0x58>)
 801313c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801313e:	f000 ff19 	bl	8013f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 f900 	bl	8013348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013148:	4b06      	ldr	r3, [pc, #24]	; (8013164 <prvCheckTasksWaitingTermination+0x58>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1e1      	bne.n	8013114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013150:	bf00      	nop
 8013152:	bf00      	nop
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20000314 	.word	0x20000314
 8013160:	20000340 	.word	0x20000340
 8013164:	20000328 	.word	0x20000328

08013168 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8013168:	b580      	push	{r7, lr}
 801316a:	b086      	sub	sp, #24
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <vTaskGetInfo+0x1a>
 801317c:	4b2c      	ldr	r3, [pc, #176]	; (8013230 <vTaskGetInfo+0xc8>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	e000      	b.n	8013184 <vTaskGetInfo+0x1c>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	697a      	ldr	r2, [r7, #20]
 801318a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80131be:	78fb      	ldrb	r3, [r7, #3]
 80131c0:	2b05      	cmp	r3, #5
 80131c2:	d01a      	beq.n	80131fa <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80131c4:	4b1a      	ldr	r3, [pc, #104]	; (8013230 <vTaskGetInfo+0xc8>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	697a      	ldr	r2, [r7, #20]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d103      	bne.n	80131d6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	2200      	movs	r2, #0
 80131d2:	731a      	strb	r2, [r3, #12]
 80131d4:	e018      	b.n	8013208 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	78fa      	ldrb	r2, [r7, #3]
 80131da:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80131dc:	78fb      	ldrb	r3, [r7, #3]
 80131de:	2b03      	cmp	r3, #3
 80131e0:	d112      	bne.n	8013208 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80131e2:	f7ff fb29 	bl	8012838 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d002      	beq.n	80131f4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	2202      	movs	r2, #2
 80131f2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80131f4:	f7ff fb2e 	bl	8012854 <xTaskResumeAll>
 80131f8:	e006      	b.n	8013208 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80131fa:	6978      	ldr	r0, [r7, #20]
 80131fc:	f7ff fa78 	bl	80126f0 <eTaskGetState>
 8013200:	4603      	mov	r3, r0
 8013202:	461a      	mov	r2, r3
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d009      	beq.n	8013222 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013212:	4618      	mov	r0, r3
 8013214:	f000 f860 	bl	80132d8 <prvTaskCheckFreeStackSpace>
 8013218:	4603      	mov	r3, r0
 801321a:	461a      	mov	r2, r3
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8013220:	e002      	b.n	8013228 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2200      	movs	r2, #0
 8013226:	841a      	strh	r2, [r3, #32]
	}
 8013228:	bf00      	nop
 801322a:	3718      	adds	r7, #24
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	20000240 	.word	0x20000240

08013234 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8013234:	b580      	push	{r7, lr}
 8013236:	b08a      	sub	sp, #40	; 0x28
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	4613      	mov	r3, r2
 8013240:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d03f      	beq.n	80132ce <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	623b      	str	r3, [r7, #32]
 8013252:	6a3b      	ldr	r3, [r7, #32]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	685a      	ldr	r2, [r3, #4]
 8013258:	6a3b      	ldr	r3, [r7, #32]
 801325a:	605a      	str	r2, [r3, #4]
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	6a3b      	ldr	r3, [r7, #32]
 8013262:	3308      	adds	r3, #8
 8013264:	429a      	cmp	r2, r3
 8013266:	d104      	bne.n	8013272 <prvListTasksWithinSingleList+0x3e>
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	685a      	ldr	r2, [r3, #4]
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	605a      	str	r2, [r3, #4]
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	61bb      	str	r3, [r7, #24]
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	685a      	ldr	r2, [r3, #4]
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	605a      	str	r2, [r3, #4]
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	3308      	adds	r3, #8
 8013290:	429a      	cmp	r2, r3
 8013292:	d104      	bne.n	801329e <prvListTasksWithinSingleList+0x6a>
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	685a      	ldr	r2, [r3, #4]
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	605a      	str	r2, [r3, #4]
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80132a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132a8:	4613      	mov	r3, r2
 80132aa:	00db      	lsls	r3, r3, #3
 80132ac:	4413      	add	r3, r2
 80132ae:	009b      	lsls	r3, r3, #2
 80132b0:	461a      	mov	r2, r3
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	1899      	adds	r1, r3, r2
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	2201      	movs	r2, #1
 80132ba:	6978      	ldr	r0, [r7, #20]
 80132bc:	f7ff ff54 	bl	8013168 <vTaskGetInfo>
				uxTask++;
 80132c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c2:	3301      	adds	r3, #1
 80132c4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80132c6:	697a      	ldr	r2, [r7, #20]
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d1d5      	bne.n	801327a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80132ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3728      	adds	r7, #40	; 0x28
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80132d8:	b480      	push	{r7}
 80132da:	b085      	sub	sp, #20
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80132e0:	2300      	movs	r3, #0
 80132e2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80132e4:	e005      	b.n	80132f2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	3301      	adds	r3, #1
 80132ea:	607b      	str	r3, [r7, #4]
			ulCount++;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	3301      	adds	r3, #1
 80132f0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	2ba5      	cmp	r3, #165	; 0xa5
 80132f8:	d0f5      	beq.n	80132e6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	089b      	lsrs	r3, r3, #2
 80132fe:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	b29b      	uxth	r3, r3
	}
 8013304:	4618      	mov	r0, r3
 8013306:	3714      	adds	r7, #20
 8013308:	46bd      	mov	sp, r7
 801330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330e:	4770      	bx	lr

08013310 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d102      	bne.n	8013324 <uxTaskGetStackHighWaterMark+0x14>
 801331e:	4b09      	ldr	r3, [pc, #36]	; (8013344 <uxTaskGetStackHighWaterMark+0x34>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	e000      	b.n	8013326 <uxTaskGetStackHighWaterMark+0x16>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801332e:	6938      	ldr	r0, [r7, #16]
 8013330:	f7ff ffd2 	bl	80132d8 <prvTaskCheckFreeStackSpace>
 8013334:	4603      	mov	r3, r0
 8013336:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013338:	68fb      	ldr	r3, [r7, #12]
	}
 801333a:	4618      	mov	r0, r3
 801333c:	3718      	adds	r7, #24
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	20000240 	.word	0x20000240

08013348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013354:	4618      	mov	r0, r3
 8013356:	f000 ffc3 	bl	80142e0 <vPortFree>
			vPortFree( pxTCB );
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f000 ffc0 	bl	80142e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013360:	bf00      	nop
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801336e:	4b0f      	ldr	r3, [pc, #60]	; (80133ac <prvResetNextTaskUnblockTime+0x44>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d101      	bne.n	801337c <prvResetNextTaskUnblockTime+0x14>
 8013378:	2301      	movs	r3, #1
 801337a:	e000      	b.n	801337e <prvResetNextTaskUnblockTime+0x16>
 801337c:	2300      	movs	r3, #0
 801337e:	2b00      	cmp	r3, #0
 8013380:	d004      	beq.n	801338c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013382:	4b0b      	ldr	r3, [pc, #44]	; (80133b0 <prvResetNextTaskUnblockTime+0x48>)
 8013384:	f04f 32ff 	mov.w	r2, #4294967295
 8013388:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801338a:	e008      	b.n	801339e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801338c:	4b07      	ldr	r3, [pc, #28]	; (80133ac <prvResetNextTaskUnblockTime+0x44>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	68db      	ldr	r3, [r3, #12]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	4a05      	ldr	r2, [pc, #20]	; (80133b0 <prvResetNextTaskUnblockTime+0x48>)
 801339c:	6013      	str	r3, [r2, #0]
}
 801339e:	bf00      	nop
 80133a0:	370c      	adds	r7, #12
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	200002f8 	.word	0x200002f8
 80133b0:	20000360 	.word	0x20000360

080133b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80133b4:	b480      	push	{r7}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80133ba:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80133c0:	687b      	ldr	r3, [r7, #4]
	}
 80133c2:	4618      	mov	r0, r3
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	20000240 	.word	0x20000240

080133d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80133da:	4b0b      	ldr	r3, [pc, #44]	; (8013408 <xTaskGetSchedulerState+0x34>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d102      	bne.n	80133e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80133e2:	2301      	movs	r3, #1
 80133e4:	607b      	str	r3, [r7, #4]
 80133e6:	e008      	b.n	80133fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133e8:	4b08      	ldr	r3, [pc, #32]	; (801340c <xTaskGetSchedulerState+0x38>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d102      	bne.n	80133f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80133f0:	2302      	movs	r3, #2
 80133f2:	607b      	str	r3, [r7, #4]
 80133f4:	e001      	b.n	80133fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80133f6:	2300      	movs	r3, #0
 80133f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80133fa:	687b      	ldr	r3, [r7, #4]
	}
 80133fc:	4618      	mov	r0, r3
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr
 8013408:	2000034c 	.word	0x2000034c
 801340c:	20000368 	.word	0x20000368

08013410 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801341c:	2300      	movs	r3, #0
 801341e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d077      	beq.n	8013516 <xTaskPriorityInherit+0x106>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801342a:	4b3d      	ldr	r3, [pc, #244]	; (8013520 <xTaskPriorityInherit+0x110>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013430:	429a      	cmp	r2, r3
 8013432:	d267      	bcs.n	8013504 <xTaskPriorityInherit+0xf4>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	699b      	ldr	r3, [r3, #24]
 8013438:	2b00      	cmp	r3, #0
 801343a:	db06      	blt.n	801344a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801343c:	4b38      	ldr	r3, [pc, #224]	; (8013520 <xTaskPriorityInherit+0x110>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013442:	f1c3 0207 	rsb	r2, r3, #7
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	6959      	ldr	r1, [r3, #20]
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013452:	4613      	mov	r3, r2
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	4413      	add	r3, r2
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	4a32      	ldr	r2, [pc, #200]	; (8013524 <xTaskPriorityInherit+0x114>)
 801345c:	4413      	add	r3, r2
 801345e:	4299      	cmp	r1, r3
 8013460:	d101      	bne.n	8013466 <xTaskPriorityInherit+0x56>
 8013462:	2301      	movs	r3, #1
 8013464:	e000      	b.n	8013468 <xTaskPriorityInherit+0x58>
 8013466:	2300      	movs	r3, #0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d03e      	beq.n	80134ea <xTaskPriorityInherit+0xda>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	3304      	adds	r3, #4
 8013470:	4618      	mov	r0, r3
 8013472:	f7fd fa5d 	bl	8010930 <uxListRemove>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d115      	bne.n	80134a8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013480:	4928      	ldr	r1, [pc, #160]	; (8013524 <xTaskPriorityInherit+0x114>)
 8013482:	4613      	mov	r3, r2
 8013484:	009b      	lsls	r3, r3, #2
 8013486:	4413      	add	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	440b      	add	r3, r1
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d10a      	bne.n	80134a8 <xTaskPriorityInherit+0x98>
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013496:	2201      	movs	r2, #1
 8013498:	fa02 f303 	lsl.w	r3, r2, r3
 801349c:	43da      	mvns	r2, r3
 801349e:	4b22      	ldr	r3, [pc, #136]	; (8013528 <xTaskPriorityInherit+0x118>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	4013      	ands	r3, r2
 80134a4:	4a20      	ldr	r2, [pc, #128]	; (8013528 <xTaskPriorityInherit+0x118>)
 80134a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134a8:	4b1d      	ldr	r3, [pc, #116]	; (8013520 <xTaskPriorityInherit+0x110>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f005 fcd9 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134be:	2201      	movs	r2, #1
 80134c0:	409a      	lsls	r2, r3
 80134c2:	4b19      	ldr	r3, [pc, #100]	; (8013528 <xTaskPriorityInherit+0x118>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4313      	orrs	r3, r2
 80134c8:	4a17      	ldr	r2, [pc, #92]	; (8013528 <xTaskPriorityInherit+0x118>)
 80134ca:	6013      	str	r3, [r2, #0]
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d0:	4613      	mov	r3, r2
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	4413      	add	r3, r2
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	4a12      	ldr	r2, [pc, #72]	; (8013524 <xTaskPriorityInherit+0x114>)
 80134da:	441a      	add	r2, r3
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	3304      	adds	r3, #4
 80134e0:	4619      	mov	r1, r3
 80134e2:	4610      	mov	r0, r2
 80134e4:	f7fd f9c7 	bl	8010876 <vListInsertEnd>
 80134e8:	e004      	b.n	80134f4 <xTaskPriorityInherit+0xe4>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134ea:	4b0d      	ldr	r3, [pc, #52]	; (8013520 <xTaskPriorityInherit+0x110>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4619      	mov	r1, r3
 80134f8:	2049      	movs	r0, #73	; 0x49
 80134fa:	f004 fefb 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80134fe:	2301      	movs	r3, #1
 8013500:	60fb      	str	r3, [r7, #12]
 8013502:	e008      	b.n	8013516 <xTaskPriorityInherit+0x106>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013508:	4b05      	ldr	r3, [pc, #20]	; (8013520 <xTaskPriorityInherit+0x110>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350e:	429a      	cmp	r2, r3
 8013510:	d201      	bcs.n	8013516 <xTaskPriorityInherit+0x106>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013512:	2301      	movs	r3, #1
 8013514:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013516:	68fb      	ldr	r3, [r7, #12]
	}
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	20000240 	.word	0x20000240
 8013524:	20000244 	.word	0x20000244
 8013528:	20000348 	.word	0x20000348

0801352c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801352c:	b580      	push	{r7, lr}
 801352e:	b086      	sub	sp, #24
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013538:	2300      	movs	r3, #0
 801353a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d077      	beq.n	8013632 <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013542:	4b3e      	ldr	r3, [pc, #248]	; (801363c <xTaskPriorityDisinherit+0x110>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	693a      	ldr	r2, [r7, #16]
 8013548:	429a      	cmp	r2, r3
 801354a:	d00a      	beq.n	8013562 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013550:	f383 8811 	msr	BASEPRI, r3
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	f3bf 8f4f 	dsb	sy
 801355c:	60fb      	str	r3, [r7, #12]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013566:	2b00      	cmp	r3, #0
 8013568:	d10a      	bne.n	8013580 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356e:	f383 8811 	msr	BASEPRI, r3
 8013572:	f3bf 8f6f 	isb	sy
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	60bb      	str	r3, [r7, #8]
}
 801357c:	bf00      	nop
 801357e:	e7fe      	b.n	801357e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013584:	1e5a      	subs	r2, r3, #1
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013592:	429a      	cmp	r2, r3
 8013594:	d04d      	beq.n	8013632 <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801359a:	2b00      	cmp	r3, #0
 801359c:	d149      	bne.n	8013632 <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	3304      	adds	r3, #4
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fd f9c4 	bl	8010930 <uxListRemove>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d115      	bne.n	80135da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b2:	4923      	ldr	r1, [pc, #140]	; (8013640 <xTaskPriorityDisinherit+0x114>)
 80135b4:	4613      	mov	r3, r2
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	4413      	add	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	440b      	add	r3, r1
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d10a      	bne.n	80135da <xTaskPriorityDisinherit+0xae>
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c8:	2201      	movs	r2, #1
 80135ca:	fa02 f303 	lsl.w	r3, r2, r3
 80135ce:	43da      	mvns	r2, r3
 80135d0:	4b1c      	ldr	r3, [pc, #112]	; (8013644 <xTaskPriorityDisinherit+0x118>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4013      	ands	r3, r2
 80135d6:	4a1b      	ldr	r2, [pc, #108]	; (8013644 <xTaskPriorityDisinherit+0x118>)
 80135d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4619      	mov	r1, r3
 80135de:	204a      	movs	r0, #74	; 0x4a
 80135e0:	f004 fe88 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f0:	f1c3 0207 	rsb	r2, r3, #7
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f005 fc36 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013604:	2201      	movs	r2, #1
 8013606:	409a      	lsls	r2, r3
 8013608:	4b0e      	ldr	r3, [pc, #56]	; (8013644 <xTaskPriorityDisinherit+0x118>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4313      	orrs	r3, r2
 801360e:	4a0d      	ldr	r2, [pc, #52]	; (8013644 <xTaskPriorityDisinherit+0x118>)
 8013610:	6013      	str	r3, [r2, #0]
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013616:	4613      	mov	r3, r2
 8013618:	009b      	lsls	r3, r3, #2
 801361a:	4413      	add	r3, r2
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	4a08      	ldr	r2, [pc, #32]	; (8013640 <xTaskPriorityDisinherit+0x114>)
 8013620:	441a      	add	r2, r3
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	3304      	adds	r3, #4
 8013626:	4619      	mov	r1, r3
 8013628:	4610      	mov	r0, r2
 801362a:	f7fd f924 	bl	8010876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801362e:	2301      	movs	r3, #1
 8013630:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013632:	697b      	ldr	r3, [r7, #20]
	}
 8013634:	4618      	mov	r0, r3
 8013636:	3718      	adds	r7, #24
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	20000240 	.word	0x20000240
 8013640:	20000244 	.word	0x20000244
 8013644:	20000348 	.word	0x20000348

08013648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
 8013650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013656:	2301      	movs	r3, #1
 8013658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2b00      	cmp	r3, #0
 801365e:	f000 8091 	beq.w	8013784 <vTaskPriorityDisinheritAfterTimeout+0x13c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013666:	2b00      	cmp	r3, #0
 8013668:	d10a      	bne.n	8013680 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	60fb      	str	r3, [r7, #12]
}
 801367c:	bf00      	nop
 801367e:	e7fe      	b.n	801367e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d902      	bls.n	8013690 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	61fb      	str	r3, [r7, #28]
 801368e:	e002      	b.n	8013696 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013694:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801369a:	69fa      	ldr	r2, [r7, #28]
 801369c:	429a      	cmp	r2, r3
 801369e:	d071      	beq.n	8013784 <vTaskPriorityDisinheritAfterTimeout+0x13c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136a4:	697a      	ldr	r2, [r7, #20]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d16c      	bne.n	8013784 <vTaskPriorityDisinheritAfterTimeout+0x13c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80136aa:	4b38      	ldr	r3, [pc, #224]	; (801378c <vTaskPriorityDisinheritAfterTimeout+0x144>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	69ba      	ldr	r2, [r7, #24]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d10a      	bne.n	80136ca <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80136b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b8:	f383 8811 	msr	BASEPRI, r3
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	f3bf 8f4f 	dsb	sy
 80136c4:	60bb      	str	r3, [r7, #8]
}
 80136c6:	bf00      	nop
 80136c8:	e7fe      	b.n	80136c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4619      	mov	r1, r3
 80136ce:	204a      	movs	r0, #74	; 0x4a
 80136d0:	f004 fe10 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80136d4:	69bb      	ldr	r3, [r7, #24]
 80136d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	69fa      	ldr	r2, [r7, #28]
 80136de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	699b      	ldr	r3, [r3, #24]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	db04      	blt.n	80136f2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	f1c3 0207 	rsb	r2, r3, #7
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	6959      	ldr	r1, [r3, #20]
 80136f6:	693a      	ldr	r2, [r7, #16]
 80136f8:	4613      	mov	r3, r2
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4413      	add	r3, r2
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	4a23      	ldr	r2, [pc, #140]	; (8013790 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8013702:	4413      	add	r3, r2
 8013704:	4299      	cmp	r1, r3
 8013706:	d101      	bne.n	801370c <vTaskPriorityDisinheritAfterTimeout+0xc4>
 8013708:	2301      	movs	r3, #1
 801370a:	e000      	b.n	801370e <vTaskPriorityDisinheritAfterTimeout+0xc6>
 801370c:	2300      	movs	r3, #0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d038      	beq.n	8013784 <vTaskPriorityDisinheritAfterTimeout+0x13c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	3304      	adds	r3, #4
 8013716:	4618      	mov	r0, r3
 8013718:	f7fd f90a 	bl	8010930 <uxListRemove>
 801371c:	4603      	mov	r3, r0
 801371e:	2b00      	cmp	r3, #0
 8013720:	d115      	bne.n	801374e <vTaskPriorityDisinheritAfterTimeout+0x106>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013726:	491a      	ldr	r1, [pc, #104]	; (8013790 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8013728:	4613      	mov	r3, r2
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	4413      	add	r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	440b      	add	r3, r1
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <vTaskPriorityDisinheritAfterTimeout+0x106>
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801373c:	2201      	movs	r2, #1
 801373e:	fa02 f303 	lsl.w	r3, r2, r3
 8013742:	43da      	mvns	r2, r3
 8013744:	4b13      	ldr	r3, [pc, #76]	; (8013794 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	4013      	ands	r3, r2
 801374a:	4a12      	ldr	r2, [pc, #72]	; (8013794 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 801374c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	4618      	mov	r0, r3
 8013752:	f005 fb8b 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375a:	2201      	movs	r2, #1
 801375c:	409a      	lsls	r2, r3
 801375e:	4b0d      	ldr	r3, [pc, #52]	; (8013794 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	4313      	orrs	r3, r2
 8013764:	4a0b      	ldr	r2, [pc, #44]	; (8013794 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801376c:	4613      	mov	r3, r2
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4413      	add	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4a06      	ldr	r2, [pc, #24]	; (8013790 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8013776:	441a      	add	r2, r3
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	3304      	adds	r3, #4
 801377c:	4619      	mov	r1, r3
 801377e:	4610      	mov	r0, r2
 8013780:	f7fd f879 	bl	8010876 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013784:	bf00      	nop
 8013786:	3720      	adds	r7, #32
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	20000240 	.word	0x20000240
 8013790:	20000244 	.word	0x20000244
 8013794:	20000348 	.word	0x20000348

08013798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013798:	b480      	push	{r7}
 801379a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801379c:	4b07      	ldr	r3, [pc, #28]	; (80137bc <pvTaskIncrementMutexHeldCount+0x24>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d004      	beq.n	80137ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80137a4:	4b05      	ldr	r3, [pc, #20]	; (80137bc <pvTaskIncrementMutexHeldCount+0x24>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137aa:	3201      	adds	r2, #1
 80137ac:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80137ae:	4b03      	ldr	r3, [pc, #12]	; (80137bc <pvTaskIncrementMutexHeldCount+0x24>)
 80137b0:	681b      	ldr	r3, [r3, #0]
	}
 80137b2:	4618      	mov	r0, r3
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr
 80137bc:	20000240 	.word	0x20000240

080137c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b088      	sub	sp, #32
 80137c4:	af02      	add	r7, sp, #8
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
 80137cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80137ce:	f000 fba1 	bl	8013f14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80137d2:	4b2b      	ldr	r3, [pc, #172]	; (8013880 <xTaskNotifyWait+0xc0>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	2b02      	cmp	r3, #2
 80137de:	d01a      	beq.n	8013816 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80137e0:	4b27      	ldr	r3, [pc, #156]	; (8013880 <xTaskNotifyWait+0xc0>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80137e6:	68fa      	ldr	r2, [r7, #12]
 80137e8:	43d2      	mvns	r2, r2
 80137ea:	400a      	ands	r2, r1
 80137ec:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80137ee:	4b24      	ldr	r3, [pc, #144]	; (8013880 <xTaskNotifyWait+0xc0>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	2201      	movs	r2, #1
 80137f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00b      	beq.n	8013816 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80137fe:	2101      	movs	r1, #1
 8013800:	6838      	ldr	r0, [r7, #0]
 8013802:	f000 f9f7 	bl	8013bf4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013806:	4b1f      	ldr	r3, [pc, #124]	; (8013884 <xTaskNotifyWait+0xc4>)
 8013808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801380c:	601a      	str	r2, [r3, #0]
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013816:	f000 fbad 	bl	8013f74 <vPortExitCritical>

		taskENTER_CRITICAL();
 801381a:	f000 fb7b 	bl	8013f14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	4613      	mov	r3, r2
 8013826:	68ba      	ldr	r2, [r7, #8]
 8013828:	68f9      	ldr	r1, [r7, #12]
 801382a:	2040      	movs	r0, #64	; 0x40
 801382c:	f004 fe6e 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d004      	beq.n	8013840 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013836:	4b12      	ldr	r3, [pc, #72]	; (8013880 <xTaskNotifyWait+0xc0>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013840:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <xTaskNotifyWait+0xc0>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013848:	b2db      	uxtb	r3, r3
 801384a:	2b02      	cmp	r3, #2
 801384c:	d002      	beq.n	8013854 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801384e:	2300      	movs	r3, #0
 8013850:	617b      	str	r3, [r7, #20]
 8013852:	e008      	b.n	8013866 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013854:	4b0a      	ldr	r3, [pc, #40]	; (8013880 <xTaskNotifyWait+0xc0>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801385a:	68ba      	ldr	r2, [r7, #8]
 801385c:	43d2      	mvns	r2, r2
 801385e:	400a      	ands	r2, r1
 8013860:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8013862:	2301      	movs	r3, #1
 8013864:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013866:	4b06      	ldr	r3, [pc, #24]	; (8013880 <xTaskNotifyWait+0xc0>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2200      	movs	r2, #0
 801386c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8013870:	f000 fb80 	bl	8013f74 <vPortExitCritical>

		return xReturn;
 8013874:	697b      	ldr	r3, [r7, #20]
	}
 8013876:	4618      	mov	r0, r3
 8013878:	3718      	adds	r7, #24
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	20000240 	.word	0x20000240
 8013884:	e000ed04 	.word	0xe000ed04

08013888 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013888:	b580      	push	{r7, lr}
 801388a:	b08c      	sub	sp, #48	; 0x30
 801388c:	af02      	add	r7, sp, #8
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	603b      	str	r3, [r7, #0]
 8013894:	4613      	mov	r3, r2
 8013896:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013898:	2301      	movs	r3, #1
 801389a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d10a      	bne.n	80138b8 <xTaskGenericNotify+0x30>
	__asm volatile
 80138a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a6:	f383 8811 	msr	BASEPRI, r3
 80138aa:	f3bf 8f6f 	isb	sy
 80138ae:	f3bf 8f4f 	dsb	sy
 80138b2:	61bb      	str	r3, [r7, #24]
}
 80138b4:	bf00      	nop
 80138b6:	e7fe      	b.n	80138b6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80138bc:	f000 fb2a 	bl	8013f14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d003      	beq.n	80138ce <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80138c6:	6a3b      	ldr	r3, [r7, #32]
 80138c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80138ce:	6a3b      	ldr	r3, [r7, #32]
 80138d0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80138d4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80138d6:	6a3b      	ldr	r3, [r7, #32]
 80138d8:	2202      	movs	r2, #2
 80138da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80138de:	79fb      	ldrb	r3, [r7, #7]
 80138e0:	2b04      	cmp	r3, #4
 80138e2:	d828      	bhi.n	8013936 <xTaskGenericNotify+0xae>
 80138e4:	a201      	add	r2, pc, #4	; (adr r2, 80138ec <xTaskGenericNotify+0x64>)
 80138e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ea:	bf00      	nop
 80138ec:	08013937 	.word	0x08013937
 80138f0:	08013901 	.word	0x08013901
 80138f4:	0801390f 	.word	0x0801390f
 80138f8:	0801391b 	.word	0x0801391b
 80138fc:	08013923 	.word	0x08013923
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013900:	6a3b      	ldr	r3, [r7, #32]
 8013902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	431a      	orrs	r2, r3
 8013908:	6a3b      	ldr	r3, [r7, #32]
 801390a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801390c:	e013      	b.n	8013936 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801390e:	6a3b      	ldr	r3, [r7, #32]
 8013910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	6a3b      	ldr	r3, [r7, #32]
 8013916:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013918:	e00d      	b.n	8013936 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801391a:	6a3b      	ldr	r3, [r7, #32]
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013920:	e009      	b.n	8013936 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013922:	7ffb      	ldrb	r3, [r7, #31]
 8013924:	2b02      	cmp	r3, #2
 8013926:	d003      	beq.n	8013930 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801392e:	e001      	b.n	8013934 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8013930:	2300      	movs	r3, #0
 8013932:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013934:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY();
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	4618      	mov	r0, r3
 801393a:	f005 fadb 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 801393e:	4601      	mov	r1, r0
 8013940:	79fa      	ldrb	r2, [r7, #7]
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	4613      	mov	r3, r2
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	203e      	movs	r0, #62	; 0x3e
 801394c:	f004 fdde 	bl	801850c <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013950:	7ffb      	ldrb	r3, [r7, #31]
 8013952:	2b01      	cmp	r3, #1
 8013954:	d13d      	bne.n	80139d2 <xTaskGenericNotify+0x14a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013956:	6a3b      	ldr	r3, [r7, #32]
 8013958:	3304      	adds	r3, #4
 801395a:	4618      	mov	r0, r3
 801395c:	f7fc ffe8 	bl	8010930 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013960:	6a3b      	ldr	r3, [r7, #32]
 8013962:	4618      	mov	r0, r3
 8013964:	f005 fa82 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8013968:	6a3b      	ldr	r3, [r7, #32]
 801396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396c:	2201      	movs	r2, #1
 801396e:	409a      	lsls	r2, r3
 8013970:	4b1b      	ldr	r3, [pc, #108]	; (80139e0 <xTaskGenericNotify+0x158>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4313      	orrs	r3, r2
 8013976:	4a1a      	ldr	r2, [pc, #104]	; (80139e0 <xTaskGenericNotify+0x158>)
 8013978:	6013      	str	r3, [r2, #0]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397e:	4613      	mov	r3, r2
 8013980:	009b      	lsls	r3, r3, #2
 8013982:	4413      	add	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	4a17      	ldr	r2, [pc, #92]	; (80139e4 <xTaskGenericNotify+0x15c>)
 8013988:	441a      	add	r2, r3
 801398a:	6a3b      	ldr	r3, [r7, #32]
 801398c:	3304      	adds	r3, #4
 801398e:	4619      	mov	r1, r3
 8013990:	4610      	mov	r0, r2
 8013992:	f7fc ff70 	bl	8010876 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013996:	6a3b      	ldr	r3, [r7, #32]
 8013998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00a      	beq.n	80139b4 <xTaskGenericNotify+0x12c>
	__asm volatile
 801399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	617b      	str	r3, [r7, #20]
}
 80139b0:	bf00      	nop
 80139b2:	e7fe      	b.n	80139b2 <xTaskGenericNotify+0x12a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80139b4:	6a3b      	ldr	r3, [r7, #32]
 80139b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139b8:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <xTaskGenericNotify+0x160>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139be:	429a      	cmp	r2, r3
 80139c0:	d907      	bls.n	80139d2 <xTaskGenericNotify+0x14a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80139c2:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <xTaskGenericNotify+0x164>)
 80139c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139c8:	601a      	str	r2, [r3, #0]
 80139ca:	f3bf 8f4f 	dsb	sy
 80139ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80139d2:	f000 facf 	bl	8013f74 <vPortExitCritical>

		return xReturn;
 80139d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80139d8:	4618      	mov	r0, r3
 80139da:	3728      	adds	r7, #40	; 0x28
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	20000348 	.word	0x20000348
 80139e4:	20000244 	.word	0x20000244
 80139e8:	20000240 	.word	0x20000240
 80139ec:	e000ed04 	.word	0xe000ed04

080139f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b090      	sub	sp, #64	; 0x40
 80139f4:	af02      	add	r7, sp, #8
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	603b      	str	r3, [r7, #0]
 80139fc:	4613      	mov	r3, r2
 80139fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013a00:	2301      	movs	r3, #1
 8013a02:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d10a      	bne.n	8013a20 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8013a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0e:	f383 8811 	msr	BASEPRI, r3
 8013a12:	f3bf 8f6f 	isb	sy
 8013a16:	f3bf 8f4f 	dsb	sy
 8013a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a1c:	bf00      	nop
 8013a1e:	e7fe      	b.n	8013a1e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a20:	f000 fb5a 	bl	80140d8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013a28:	f3ef 8211 	mrs	r2, BASEPRI
 8013a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a30:	f383 8811 	msr	BASEPRI, r3
 8013a34:	f3bf 8f6f 	isb	sy
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	623a      	str	r2, [r7, #32]
 8013a3e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013a40:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a42:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d003      	beq.n	8013a52 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5e:	2202      	movs	r2, #2
 8013a60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8013a64:	79fb      	ldrb	r3, [r7, #7]
 8013a66:	2b04      	cmp	r3, #4
 8013a68:	d828      	bhi.n	8013abc <xTaskGenericNotifyFromISR+0xcc>
 8013a6a:	a201      	add	r2, pc, #4	; (adr r2, 8013a70 <xTaskGenericNotifyFromISR+0x80>)
 8013a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a70:	08013abd 	.word	0x08013abd
 8013a74:	08013a85 	.word	0x08013a85
 8013a78:	08013a93 	.word	0x08013a93
 8013a7c:	08013a9f 	.word	0x08013a9f
 8013a80:	08013aa7 	.word	0x08013aa7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	431a      	orrs	r2, r3
 8013a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013a90:	e014      	b.n	8013abc <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a96:	1c5a      	adds	r2, r3, #1
 8013a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013a9c:	e00e      	b.n	8013abc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	68ba      	ldr	r2, [r7, #8]
 8013aa2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013aa4:	e00a      	b.n	8013abc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	d003      	beq.n	8013ab6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013ab4:	e001      	b.n	8013aba <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013aba:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY_FROM_ISR();
 8013abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f005 fa18 	bl	8018ef4 <SEGGER_SYSVIEW_ShrinkId>
 8013ac4:	79f9      	ldrb	r1, [r7, #7]
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013aca:	9201      	str	r2, [sp, #4]
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	460b      	mov	r3, r1
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	4601      	mov	r1, r0
 8013ad4:	203f      	movs	r0, #63	; 0x3f
 8013ad6:	f004 fdab 	bl	8018630 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d14a      	bne.n	8013b78 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00a      	beq.n	8013b00 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8013aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aee:	f383 8811 	msr	BASEPRI, r3
 8013af2:	f3bf 8f6f 	isb	sy
 8013af6:	f3bf 8f4f 	dsb	sy
 8013afa:	61bb      	str	r3, [r7, #24]
}
 8013afc:	bf00      	nop
 8013afe:	e7fe      	b.n	8013afe <xTaskGenericNotifyFromISR+0x10e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b00:	4b23      	ldr	r3, [pc, #140]	; (8013b90 <xTaskGenericNotifyFromISR+0x1a0>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d120      	bne.n	8013b4a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fc ff0f 	bl	8010930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	4618      	mov	r0, r3
 8013b16:	f005 f9a9 	bl	8018e6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8013b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1e:	2201      	movs	r2, #1
 8013b20:	409a      	lsls	r2, r3
 8013b22:	4b1c      	ldr	r3, [pc, #112]	; (8013b94 <xTaskGenericNotifyFromISR+0x1a4>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4313      	orrs	r3, r2
 8013b28:	4a1a      	ldr	r2, [pc, #104]	; (8013b94 <xTaskGenericNotifyFromISR+0x1a4>)
 8013b2a:	6013      	str	r3, [r2, #0]
 8013b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b30:	4613      	mov	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	4a17      	ldr	r2, [pc, #92]	; (8013b98 <xTaskGenericNotifyFromISR+0x1a8>)
 8013b3a:	441a      	add	r2, r3
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3e:	3304      	adds	r3, #4
 8013b40:	4619      	mov	r1, r3
 8013b42:	4610      	mov	r0, r2
 8013b44:	f7fc fe97 	bl	8010876 <vListInsertEnd>
 8013b48:	e005      	b.n	8013b56 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	3318      	adds	r3, #24
 8013b4e:	4619      	mov	r1, r3
 8013b50:	4812      	ldr	r0, [pc, #72]	; (8013b9c <xTaskGenericNotifyFromISR+0x1ac>)
 8013b52:	f7fc fe90 	bl	8010876 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b5a:	4b11      	ldr	r3, [pc, #68]	; (8013ba0 <xTaskGenericNotifyFromISR+0x1b0>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d909      	bls.n	8013b78 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d003      	beq.n	8013b72 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	601a      	str	r2, [r3, #0]
 8013b70:	e002      	b.n	8013b78 <xTaskGenericNotifyFromISR+0x188>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8013b72:	4b0c      	ldr	r3, [pc, #48]	; (8013ba4 <xTaskGenericNotifyFromISR+0x1b4>)
 8013b74:	2201      	movs	r2, #1
 8013b76:	601a      	str	r2, [r3, #0]
 8013b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b7a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	f383 8811 	msr	BASEPRI, r3
}
 8013b82:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3738      	adds	r7, #56	; 0x38
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	20000368 	.word	0x20000368
 8013b94:	20000348 	.word	0x20000348
 8013b98:	20000244 	.word	0x20000244
 8013b9c:	20000300 	.word	0x20000300
 8013ba0:	20000240 	.word	0x20000240
 8013ba4:	20000354 	.word	0x20000354

08013ba8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d102      	bne.n	8013bbc <xTaskNotifyStateClear+0x14>
 8013bb6:	4b0e      	ldr	r3, [pc, #56]	; (8013bf0 <xTaskNotifyStateClear+0x48>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	e000      	b.n	8013bbe <xTaskNotifyStateClear+0x16>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8013bc0:	f000 f9a8 	bl	8013f14 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	d106      	bne.n	8013bde <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				xReturn = pdPASS;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	60fb      	str	r3, [r7, #12]
 8013bdc:	e001      	b.n	8013be2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8013bde:	2300      	movs	r3, #0
 8013be0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8013be2:	f000 f9c7 	bl	8013f74 <vPortExitCritical>

		return xReturn;
 8013be6:	68fb      	ldr	r3, [r7, #12]
	}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3710      	adds	r7, #16
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	20000240 	.word	0x20000240

08013bf4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013bfe:	4b29      	ldr	r3, [pc, #164]	; (8013ca4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c04:	4b28      	ldr	r3, [pc, #160]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fc fe90 	bl	8010930 <uxListRemove>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d10b      	bne.n	8013c2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013c16:	4b24      	ldr	r3, [pc, #144]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c22:	43da      	mvns	r2, r3
 8013c24:	4b21      	ldr	r3, [pc, #132]	; (8013cac <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	4013      	ands	r3, r2
 8013c2a:	4a20      	ldr	r2, [pc, #128]	; (8013cac <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c34:	d10a      	bne.n	8013c4c <prvAddCurrentTaskToDelayedList+0x58>
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d007      	beq.n	8013c4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c3c:	4b1a      	ldr	r3, [pc, #104]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	3304      	adds	r3, #4
 8013c42:	4619      	mov	r1, r3
 8013c44:	481a      	ldr	r0, [pc, #104]	; (8013cb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013c46:	f7fc fe16 	bl	8010876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013c4a:	e026      	b.n	8013c9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4413      	add	r3, r2
 8013c52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c54:	4b14      	ldr	r3, [pc, #80]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	68ba      	ldr	r2, [r7, #8]
 8013c5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013c5c:	68ba      	ldr	r2, [r7, #8]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d209      	bcs.n	8013c78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c64:	4b13      	ldr	r3, [pc, #76]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	4b0f      	ldr	r3, [pc, #60]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	3304      	adds	r3, #4
 8013c6e:	4619      	mov	r1, r3
 8013c70:	4610      	mov	r0, r2
 8013c72:	f7fc fe24 	bl	80108be <vListInsert>
}
 8013c76:	e010      	b.n	8013c9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c78:	4b0f      	ldr	r3, [pc, #60]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ca8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	3304      	adds	r3, #4
 8013c82:	4619      	mov	r1, r3
 8013c84:	4610      	mov	r0, r2
 8013c86:	f7fc fe1a 	bl	80108be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c8a:	4b0c      	ldr	r3, [pc, #48]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d202      	bcs.n	8013c9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013c94:	4a09      	ldr	r2, [pc, #36]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	6013      	str	r3, [r2, #0]
}
 8013c9a:	bf00      	nop
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	20000344 	.word	0x20000344
 8013ca8:	20000240 	.word	0x20000240
 8013cac:	20000348 	.word	0x20000348
 8013cb0:	2000032c 	.word	0x2000032c
 8013cb4:	200002fc 	.word	0x200002fc
 8013cb8:	200002f8 	.word	0x200002f8
 8013cbc:	20000360 	.word	0x20000360

08013cc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3b04      	subs	r3, #4
 8013cd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	3b04      	subs	r3, #4
 8013cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	f023 0201 	bic.w	r2, r3, #1
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	3b04      	subs	r3, #4
 8013cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013cf0:	4a0c      	ldr	r2, [pc, #48]	; (8013d24 <pxPortInitialiseStack+0x64>)
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	3b14      	subs	r3, #20
 8013cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3b04      	subs	r3, #4
 8013d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f06f 0202 	mvn.w	r2, #2
 8013d0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	3b20      	subs	r3, #32
 8013d14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013d16:	68fb      	ldr	r3, [r7, #12]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3714      	adds	r7, #20
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr
 8013d24:	08013d29 	.word	0x08013d29

08013d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013d32:	4b12      	ldr	r3, [pc, #72]	; (8013d7c <prvTaskExitError+0x54>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3a:	d00a      	beq.n	8013d52 <prvTaskExitError+0x2a>
	__asm volatile
 8013d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d40:	f383 8811 	msr	BASEPRI, r3
 8013d44:	f3bf 8f6f 	isb	sy
 8013d48:	f3bf 8f4f 	dsb	sy
 8013d4c:	60fb      	str	r3, [r7, #12]
}
 8013d4e:	bf00      	nop
 8013d50:	e7fe      	b.n	8013d50 <prvTaskExitError+0x28>
	__asm volatile
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	f383 8811 	msr	BASEPRI, r3
 8013d5a:	f3bf 8f6f 	isb	sy
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	60bb      	str	r3, [r7, #8]
}
 8013d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d66:	bf00      	nop
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d0fc      	beq.n	8013d68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d6e:	bf00      	nop
 8013d70:	bf00      	nop
 8013d72:	3714      	adds	r7, #20
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	200000ac 	.word	0x200000ac

08013d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d80:	4b07      	ldr	r3, [pc, #28]	; (8013da0 <pxCurrentTCBConst2>)
 8013d82:	6819      	ldr	r1, [r3, #0]
 8013d84:	6808      	ldr	r0, [r1, #0]
 8013d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8a:	f380 8809 	msr	PSP, r0
 8013d8e:	f3bf 8f6f 	isb	sy
 8013d92:	f04f 0000 	mov.w	r0, #0
 8013d96:	f380 8811 	msr	BASEPRI, r0
 8013d9a:	4770      	bx	lr
 8013d9c:	f3af 8000 	nop.w

08013da0 <pxCurrentTCBConst2>:
 8013da0:	20000240 	.word	0x20000240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013da4:	bf00      	nop
 8013da6:	bf00      	nop

08013da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013da8:	4808      	ldr	r0, [pc, #32]	; (8013dcc <prvPortStartFirstTask+0x24>)
 8013daa:	6800      	ldr	r0, [r0, #0]
 8013dac:	6800      	ldr	r0, [r0, #0]
 8013dae:	f380 8808 	msr	MSP, r0
 8013db2:	f04f 0000 	mov.w	r0, #0
 8013db6:	f380 8814 	msr	CONTROL, r0
 8013dba:	b662      	cpsie	i
 8013dbc:	b661      	cpsie	f
 8013dbe:	f3bf 8f4f 	dsb	sy
 8013dc2:	f3bf 8f6f 	isb	sy
 8013dc6:	df00      	svc	0
 8013dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013dca:	bf00      	nop
 8013dcc:	e000ed08 	.word	0xe000ed08

08013dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b086      	sub	sp, #24
 8013dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013dd6:	4b46      	ldr	r3, [pc, #280]	; (8013ef0 <xPortStartScheduler+0x120>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4a46      	ldr	r2, [pc, #280]	; (8013ef4 <xPortStartScheduler+0x124>)
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	d10a      	bne.n	8013df6 <xPortStartScheduler+0x26>
	__asm volatile
 8013de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de4:	f383 8811 	msr	BASEPRI, r3
 8013de8:	f3bf 8f6f 	isb	sy
 8013dec:	f3bf 8f4f 	dsb	sy
 8013df0:	613b      	str	r3, [r7, #16]
}
 8013df2:	bf00      	nop
 8013df4:	e7fe      	b.n	8013df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013df6:	4b3e      	ldr	r3, [pc, #248]	; (8013ef0 <xPortStartScheduler+0x120>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4a3f      	ldr	r2, [pc, #252]	; (8013ef8 <xPortStartScheduler+0x128>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d10a      	bne.n	8013e16 <xPortStartScheduler+0x46>
	__asm volatile
 8013e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	60fb      	str	r3, [r7, #12]
}
 8013e12:	bf00      	nop
 8013e14:	e7fe      	b.n	8013e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013e16:	4b39      	ldr	r3, [pc, #228]	; (8013efc <xPortStartScheduler+0x12c>)
 8013e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	22ff      	movs	r2, #255	; 0xff
 8013e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013e30:	78fb      	ldrb	r3, [r7, #3]
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	4b31      	ldr	r3, [pc, #196]	; (8013f00 <xPortStartScheduler+0x130>)
 8013e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013e3e:	4b31      	ldr	r3, [pc, #196]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e40:	2207      	movs	r2, #7
 8013e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e44:	e009      	b.n	8013e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013e46:	4b2f      	ldr	r3, [pc, #188]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3b01      	subs	r3, #1
 8013e4c:	4a2d      	ldr	r2, [pc, #180]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013e50:	78fb      	ldrb	r3, [r7, #3]
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e5a:	78fb      	ldrb	r3, [r7, #3]
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e62:	2b80      	cmp	r3, #128	; 0x80
 8013e64:	d0ef      	beq.n	8013e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013e66:	4b27      	ldr	r3, [pc, #156]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	f1c3 0307 	rsb	r3, r3, #7
 8013e6e:	2b04      	cmp	r3, #4
 8013e70:	d00a      	beq.n	8013e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8013e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e76:	f383 8811 	msr	BASEPRI, r3
 8013e7a:	f3bf 8f6f 	isb	sy
 8013e7e:	f3bf 8f4f 	dsb	sy
 8013e82:	60bb      	str	r3, [r7, #8]
}
 8013e84:	bf00      	nop
 8013e86:	e7fe      	b.n	8013e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013e88:	4b1e      	ldr	r3, [pc, #120]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	021b      	lsls	r3, r3, #8
 8013e8e:	4a1d      	ldr	r2, [pc, #116]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e92:	4b1c      	ldr	r3, [pc, #112]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e9a:	4a1a      	ldr	r2, [pc, #104]	; (8013f04 <xPortStartScheduler+0x134>)
 8013e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	b2da      	uxtb	r2, r3
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013ea6:	4b18      	ldr	r3, [pc, #96]	; (8013f08 <xPortStartScheduler+0x138>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a17      	ldr	r2, [pc, #92]	; (8013f08 <xPortStartScheduler+0x138>)
 8013eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013eb2:	4b15      	ldr	r3, [pc, #84]	; (8013f08 <xPortStartScheduler+0x138>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4a14      	ldr	r2, [pc, #80]	; (8013f08 <xPortStartScheduler+0x138>)
 8013eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013ebe:	f000 f8dd 	bl	801407c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013ec2:	4b12      	ldr	r3, [pc, #72]	; (8013f0c <xPortStartScheduler+0x13c>)
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013ec8:	f000 f8fc 	bl	80140c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013ecc:	4b10      	ldr	r3, [pc, #64]	; (8013f10 <xPortStartScheduler+0x140>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4a0f      	ldr	r2, [pc, #60]	; (8013f10 <xPortStartScheduler+0x140>)
 8013ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013ed8:	f7ff ff66 	bl	8013da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013edc:	f7fe feda 	bl	8012c94 <vTaskSwitchContext>
	prvTaskExitError();
 8013ee0:	f7ff ff22 	bl	8013d28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ee4:	2300      	movs	r3, #0
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3718      	adds	r7, #24
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	e000ed00 	.word	0xe000ed00
 8013ef4:	410fc271 	.word	0x410fc271
 8013ef8:	410fc270 	.word	0x410fc270
 8013efc:	e000e400 	.word	0xe000e400
 8013f00:	20000374 	.word	0x20000374
 8013f04:	20000378 	.word	0x20000378
 8013f08:	e000ed20 	.word	0xe000ed20
 8013f0c:	200000ac 	.word	0x200000ac
 8013f10:	e000ef34 	.word	0xe000ef34

08013f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
	__asm volatile
 8013f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	607b      	str	r3, [r7, #4]
}
 8013f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013f2e:	4b0f      	ldr	r3, [pc, #60]	; (8013f6c <vPortEnterCritical+0x58>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	3301      	adds	r3, #1
 8013f34:	4a0d      	ldr	r2, [pc, #52]	; (8013f6c <vPortEnterCritical+0x58>)
 8013f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013f38:	4b0c      	ldr	r3, [pc, #48]	; (8013f6c <vPortEnterCritical+0x58>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d10f      	bne.n	8013f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f40:	4b0b      	ldr	r3, [pc, #44]	; (8013f70 <vPortEnterCritical+0x5c>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d00a      	beq.n	8013f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8013f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4e:	f383 8811 	msr	BASEPRI, r3
 8013f52:	f3bf 8f6f 	isb	sy
 8013f56:	f3bf 8f4f 	dsb	sy
 8013f5a:	603b      	str	r3, [r7, #0]
}
 8013f5c:	bf00      	nop
 8013f5e:	e7fe      	b.n	8013f5e <vPortEnterCritical+0x4a>
	}
}
 8013f60:	bf00      	nop
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6a:	4770      	bx	lr
 8013f6c:	200000ac 	.word	0x200000ac
 8013f70:	e000ed04 	.word	0xe000ed04

08013f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013f7a:	4b12      	ldr	r3, [pc, #72]	; (8013fc4 <vPortExitCritical+0x50>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d10a      	bne.n	8013f98 <vPortExitCritical+0x24>
	__asm volatile
 8013f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f86:	f383 8811 	msr	BASEPRI, r3
 8013f8a:	f3bf 8f6f 	isb	sy
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	607b      	str	r3, [r7, #4]
}
 8013f94:	bf00      	nop
 8013f96:	e7fe      	b.n	8013f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013f98:	4b0a      	ldr	r3, [pc, #40]	; (8013fc4 <vPortExitCritical+0x50>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	3b01      	subs	r3, #1
 8013f9e:	4a09      	ldr	r2, [pc, #36]	; (8013fc4 <vPortExitCritical+0x50>)
 8013fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013fa2:	4b08      	ldr	r3, [pc, #32]	; (8013fc4 <vPortExitCritical+0x50>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d105      	bne.n	8013fb6 <vPortExitCritical+0x42>
 8013faa:	2300      	movs	r3, #0
 8013fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	f383 8811 	msr	BASEPRI, r3
}
 8013fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013fb6:	bf00      	nop
 8013fb8:	370c      	adds	r7, #12
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	200000ac 	.word	0x200000ac
	...

08013fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013fd0:	f3ef 8009 	mrs	r0, PSP
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	4b15      	ldr	r3, [pc, #84]	; (8014030 <pxCurrentTCBConst>)
 8013fda:	681a      	ldr	r2, [r3, #0]
 8013fdc:	f01e 0f10 	tst.w	lr, #16
 8013fe0:	bf08      	it	eq
 8013fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fea:	6010      	str	r0, [r2, #0]
 8013fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013ff4:	f380 8811 	msr	BASEPRI, r0
 8013ff8:	f3bf 8f4f 	dsb	sy
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f7fe fe48 	bl	8012c94 <vTaskSwitchContext>
 8014004:	f04f 0000 	mov.w	r0, #0
 8014008:	f380 8811 	msr	BASEPRI, r0
 801400c:	bc09      	pop	{r0, r3}
 801400e:	6819      	ldr	r1, [r3, #0]
 8014010:	6808      	ldr	r0, [r1, #0]
 8014012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014016:	f01e 0f10 	tst.w	lr, #16
 801401a:	bf08      	it	eq
 801401c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014020:	f380 8809 	msr	PSP, r0
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	f3af 8000 	nop.w

08014030 <pxCurrentTCBConst>:
 8014030:	20000240 	.word	0x20000240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014034:	bf00      	nop
 8014036:	bf00      	nop

08014038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
	__asm volatile
 801403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014042:	f383 8811 	msr	BASEPRI, r3
 8014046:	f3bf 8f6f 	isb	sy
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	607b      	str	r3, [r7, #4]
}
 8014050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014052:	f7fe fd5d 	bl	8012b10 <xTaskIncrementTick>
 8014056:	4603      	mov	r3, r0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d003      	beq.n	8014064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801405c:	4b06      	ldr	r3, [pc, #24]	; (8014078 <SysTick_Handler+0x40>)
 801405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014062:	601a      	str	r2, [r3, #0]
 8014064:	2300      	movs	r3, #0
 8014066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	f383 8811 	msr	BASEPRI, r3
}
 801406e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014070:	bf00      	nop
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	e000ed04 	.word	0xe000ed04

0801407c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801407c:	b480      	push	{r7}
 801407e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014080:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <vPortSetupTimerInterrupt+0x34>)
 8014082:	2200      	movs	r2, #0
 8014084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014086:	4b0b      	ldr	r3, [pc, #44]	; (80140b4 <vPortSetupTimerInterrupt+0x38>)
 8014088:	2200      	movs	r2, #0
 801408a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801408c:	4b0a      	ldr	r3, [pc, #40]	; (80140b8 <vPortSetupTimerInterrupt+0x3c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4a0a      	ldr	r2, [pc, #40]	; (80140bc <vPortSetupTimerInterrupt+0x40>)
 8014092:	fba2 2303 	umull	r2, r3, r2, r3
 8014096:	099b      	lsrs	r3, r3, #6
 8014098:	4a09      	ldr	r2, [pc, #36]	; (80140c0 <vPortSetupTimerInterrupt+0x44>)
 801409a:	3b01      	subs	r3, #1
 801409c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801409e:	4b04      	ldr	r3, [pc, #16]	; (80140b0 <vPortSetupTimerInterrupt+0x34>)
 80140a0:	2207      	movs	r2, #7
 80140a2:	601a      	str	r2, [r3, #0]
}
 80140a4:	bf00      	nop
 80140a6:	46bd      	mov	sp, r7
 80140a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	e000e010 	.word	0xe000e010
 80140b4:	e000e018 	.word	0xe000e018
 80140b8:	200000c0 	.word	0x200000c0
 80140bc:	10624dd3 	.word	0x10624dd3
 80140c0:	e000e014 	.word	0xe000e014

080140c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80140c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80140d4 <vPortEnableVFP+0x10>
 80140c8:	6801      	ldr	r1, [r0, #0]
 80140ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80140ce:	6001      	str	r1, [r0, #0]
 80140d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80140d2:	bf00      	nop
 80140d4:	e000ed88 	.word	0xe000ed88

080140d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80140d8:	b480      	push	{r7}
 80140da:	b085      	sub	sp, #20
 80140dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80140de:	f3ef 8305 	mrs	r3, IPSR
 80140e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	2b0f      	cmp	r3, #15
 80140e8:	d914      	bls.n	8014114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80140ea:	4a17      	ldr	r2, [pc, #92]	; (8014148 <vPortValidateInterruptPriority+0x70>)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	4413      	add	r3, r2
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80140f4:	4b15      	ldr	r3, [pc, #84]	; (801414c <vPortValidateInterruptPriority+0x74>)
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	7afa      	ldrb	r2, [r7, #11]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d20a      	bcs.n	8014114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80140fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	607b      	str	r3, [r7, #4]
}
 8014110:	bf00      	nop
 8014112:	e7fe      	b.n	8014112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014114:	4b0e      	ldr	r3, [pc, #56]	; (8014150 <vPortValidateInterruptPriority+0x78>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801411c:	4b0d      	ldr	r3, [pc, #52]	; (8014154 <vPortValidateInterruptPriority+0x7c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	429a      	cmp	r2, r3
 8014122:	d90a      	bls.n	801413a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014128:	f383 8811 	msr	BASEPRI, r3
 801412c:	f3bf 8f6f 	isb	sy
 8014130:	f3bf 8f4f 	dsb	sy
 8014134:	603b      	str	r3, [r7, #0]
}
 8014136:	bf00      	nop
 8014138:	e7fe      	b.n	8014138 <vPortValidateInterruptPriority+0x60>
	}
 801413a:	bf00      	nop
 801413c:	3714      	adds	r7, #20
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	e000e3f0 	.word	0xe000e3f0
 801414c:	20000374 	.word	0x20000374
 8014150:	e000ed0c 	.word	0xe000ed0c
 8014154:	20000378 	.word	0x20000378

08014158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b08a      	sub	sp, #40	; 0x28
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014160:	2300      	movs	r3, #0
 8014162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014164:	f7fe fb68 	bl	8012838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014168:	4b58      	ldr	r3, [pc, #352]	; (80142cc <pvPortMalloc+0x174>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d101      	bne.n	8014174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014170:	f000 f928 	bl	80143c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014174:	4b56      	ldr	r3, [pc, #344]	; (80142d0 <pvPortMalloc+0x178>)
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	4013      	ands	r3, r2
 801417c:	2b00      	cmp	r3, #0
 801417e:	f040 808e 	bne.w	801429e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d01d      	beq.n	80141c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014188:	2208      	movs	r2, #8
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	4413      	add	r3, r2
 801418e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f003 0307 	and.w	r3, r3, #7
 8014196:	2b00      	cmp	r3, #0
 8014198:	d014      	beq.n	80141c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f023 0307 	bic.w	r3, r3, #7
 80141a0:	3308      	adds	r3, #8
 80141a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f003 0307 	and.w	r3, r3, #7
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d00a      	beq.n	80141c4 <pvPortMalloc+0x6c>
	__asm volatile
 80141ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b2:	f383 8811 	msr	BASEPRI, r3
 80141b6:	f3bf 8f6f 	isb	sy
 80141ba:	f3bf 8f4f 	dsb	sy
 80141be:	617b      	str	r3, [r7, #20]
}
 80141c0:	bf00      	nop
 80141c2:	e7fe      	b.n	80141c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d069      	beq.n	801429e <pvPortMalloc+0x146>
 80141ca:	4b42      	ldr	r3, [pc, #264]	; (80142d4 <pvPortMalloc+0x17c>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d864      	bhi.n	801429e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80141d4:	4b40      	ldr	r3, [pc, #256]	; (80142d8 <pvPortMalloc+0x180>)
 80141d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80141d8:	4b3f      	ldr	r3, [pc, #252]	; (80142d8 <pvPortMalloc+0x180>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141de:	e004      	b.n	80141ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d903      	bls.n	80141fc <pvPortMalloc+0xa4>
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d1f1      	bne.n	80141e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80141fc:	4b33      	ldr	r3, [pc, #204]	; (80142cc <pvPortMalloc+0x174>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014202:	429a      	cmp	r2, r3
 8014204:	d04b      	beq.n	801429e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014206:	6a3b      	ldr	r3, [r7, #32]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2208      	movs	r2, #8
 801420c:	4413      	add	r3, r2
 801420e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	6a3b      	ldr	r3, [r7, #32]
 8014216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421a:	685a      	ldr	r2, [r3, #4]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	1ad2      	subs	r2, r2, r3
 8014220:	2308      	movs	r3, #8
 8014222:	005b      	lsls	r3, r3, #1
 8014224:	429a      	cmp	r2, r3
 8014226:	d91f      	bls.n	8014268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	4413      	add	r3, r2
 801422e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	f003 0307 	and.w	r3, r3, #7
 8014236:	2b00      	cmp	r3, #0
 8014238:	d00a      	beq.n	8014250 <pvPortMalloc+0xf8>
	__asm volatile
 801423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423e:	f383 8811 	msr	BASEPRI, r3
 8014242:	f3bf 8f6f 	isb	sy
 8014246:	f3bf 8f4f 	dsb	sy
 801424a:	613b      	str	r3, [r7, #16]
}
 801424c:	bf00      	nop
 801424e:	e7fe      	b.n	801424e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014252:	685a      	ldr	r2, [r3, #4]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	1ad2      	subs	r2, r2, r3
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014262:	69b8      	ldr	r0, [r7, #24]
 8014264:	f000 f910 	bl	8014488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014268:	4b1a      	ldr	r3, [pc, #104]	; (80142d4 <pvPortMalloc+0x17c>)
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	1ad3      	subs	r3, r2, r3
 8014272:	4a18      	ldr	r2, [pc, #96]	; (80142d4 <pvPortMalloc+0x17c>)
 8014274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014276:	4b17      	ldr	r3, [pc, #92]	; (80142d4 <pvPortMalloc+0x17c>)
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	4b18      	ldr	r3, [pc, #96]	; (80142dc <pvPortMalloc+0x184>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	429a      	cmp	r2, r3
 8014280:	d203      	bcs.n	801428a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014282:	4b14      	ldr	r3, [pc, #80]	; (80142d4 <pvPortMalloc+0x17c>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	4a15      	ldr	r2, [pc, #84]	; (80142dc <pvPortMalloc+0x184>)
 8014288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	4b10      	ldr	r3, [pc, #64]	; (80142d0 <pvPortMalloc+0x178>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	431a      	orrs	r2, r3
 8014294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	2200      	movs	r2, #0
 801429c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801429e:	f7fe fad9 	bl	8012854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	f003 0307 	and.w	r3, r3, #7
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00a      	beq.n	80142c2 <pvPortMalloc+0x16a>
	__asm volatile
 80142ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b0:	f383 8811 	msr	BASEPRI, r3
 80142b4:	f3bf 8f6f 	isb	sy
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	60fb      	str	r3, [r7, #12]
}
 80142be:	bf00      	nop
 80142c0:	e7fe      	b.n	80142c0 <pvPortMalloc+0x168>
	return pvReturn;
 80142c2:	69fb      	ldr	r3, [r7, #28]
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3728      	adds	r7, #40	; 0x28
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	20032384 	.word	0x20032384
 80142d0:	20032390 	.word	0x20032390
 80142d4:	20032388 	.word	0x20032388
 80142d8:	2003237c 	.word	0x2003237c
 80142dc:	2003238c 	.word	0x2003238c

080142e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d048      	beq.n	8014384 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80142f2:	2308      	movs	r3, #8
 80142f4:	425b      	negs	r3, r3
 80142f6:	697a      	ldr	r2, [r7, #20]
 80142f8:	4413      	add	r3, r2
 80142fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	685a      	ldr	r2, [r3, #4]
 8014304:	4b21      	ldr	r3, [pc, #132]	; (801438c <vPortFree+0xac>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	4013      	ands	r3, r2
 801430a:	2b00      	cmp	r3, #0
 801430c:	d10a      	bne.n	8014324 <vPortFree+0x44>
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	60fb      	str	r3, [r7, #12]
}
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d00a      	beq.n	8014342 <vPortFree+0x62>
	__asm volatile
 801432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	60bb      	str	r3, [r7, #8]
}
 801433e:	bf00      	nop
 8014340:	e7fe      	b.n	8014340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	685a      	ldr	r2, [r3, #4]
 8014346:	4b11      	ldr	r3, [pc, #68]	; (801438c <vPortFree+0xac>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4013      	ands	r3, r2
 801434c:	2b00      	cmp	r3, #0
 801434e:	d019      	beq.n	8014384 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d115      	bne.n	8014384 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	685a      	ldr	r2, [r3, #4]
 801435c:	4b0b      	ldr	r3, [pc, #44]	; (801438c <vPortFree+0xac>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	43db      	mvns	r3, r3
 8014362:	401a      	ands	r2, r3
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014368:	f7fe fa66 	bl	8012838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	685a      	ldr	r2, [r3, #4]
 8014370:	4b07      	ldr	r3, [pc, #28]	; (8014390 <vPortFree+0xb0>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	4413      	add	r3, r2
 8014376:	4a06      	ldr	r2, [pc, #24]	; (8014390 <vPortFree+0xb0>)
 8014378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801437a:	6938      	ldr	r0, [r7, #16]
 801437c:	f000 f884 	bl	8014488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014380:	f7fe fa68 	bl	8012854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014384:	bf00      	nop
 8014386:	3718      	adds	r7, #24
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20032390 	.word	0x20032390
 8014390:	20032388 	.word	0x20032388

08014394 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8014394:	b480      	push	{r7}
 8014396:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8014398:	4b03      	ldr	r3, [pc, #12]	; (80143a8 <xPortGetFreeHeapSize+0x14>)
 801439a:	681b      	ldr	r3, [r3, #0]
}
 801439c:	4618      	mov	r0, r3
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr
 80143a6:	bf00      	nop
 80143a8:	20032388 	.word	0x20032388

080143ac <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80143ac:	b480      	push	{r7}
 80143ae:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80143b0:	4b03      	ldr	r3, [pc, #12]	; (80143c0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80143b2:	681b      	ldr	r3, [r3, #0]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	2003238c 	.word	0x2003238c

080143c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80143c4:	b480      	push	{r7}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80143ca:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 80143ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80143d0:	4b27      	ldr	r3, [pc, #156]	; (8014470 <prvHeapInit+0xac>)
 80143d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	f003 0307 	and.w	r3, r3, #7
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00c      	beq.n	80143f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3307      	adds	r3, #7
 80143e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f023 0307 	bic.w	r3, r3, #7
 80143ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80143ec:	68ba      	ldr	r2, [r7, #8]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	4a1f      	ldr	r2, [pc, #124]	; (8014470 <prvHeapInit+0xac>)
 80143f4:	4413      	add	r3, r2
 80143f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80143fc:	4a1d      	ldr	r2, [pc, #116]	; (8014474 <prvHeapInit+0xb0>)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014402:	4b1c      	ldr	r3, [pc, #112]	; (8014474 <prvHeapInit+0xb0>)
 8014404:	2200      	movs	r2, #0
 8014406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	68ba      	ldr	r2, [r7, #8]
 801440c:	4413      	add	r3, r2
 801440e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014410:	2208      	movs	r2, #8
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	1a9b      	subs	r3, r3, r2
 8014416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f023 0307 	bic.w	r3, r3, #7
 801441e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	4a15      	ldr	r2, [pc, #84]	; (8014478 <prvHeapInit+0xb4>)
 8014424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014426:	4b14      	ldr	r3, [pc, #80]	; (8014478 <prvHeapInit+0xb4>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2200      	movs	r2, #0
 801442c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801442e:	4b12      	ldr	r3, [pc, #72]	; (8014478 <prvHeapInit+0xb4>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2200      	movs	r2, #0
 8014434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	1ad2      	subs	r2, r2, r3
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014444:	4b0c      	ldr	r3, [pc, #48]	; (8014478 <prvHeapInit+0xb4>)
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	4a0a      	ldr	r2, [pc, #40]	; (801447c <prvHeapInit+0xb8>)
 8014452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	4a09      	ldr	r2, [pc, #36]	; (8014480 <prvHeapInit+0xbc>)
 801445a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801445c:	4b09      	ldr	r3, [pc, #36]	; (8014484 <prvHeapInit+0xc0>)
 801445e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014462:	601a      	str	r2, [r3, #0]
}
 8014464:	bf00      	nop
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	2000037c 	.word	0x2000037c
 8014474:	2003237c 	.word	0x2003237c
 8014478:	20032384 	.word	0x20032384
 801447c:	2003238c 	.word	0x2003238c
 8014480:	20032388 	.word	0x20032388
 8014484:	20032390 	.word	0x20032390

08014488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014488:	b480      	push	{r7}
 801448a:	b085      	sub	sp, #20
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014490:	4b28      	ldr	r3, [pc, #160]	; (8014534 <prvInsertBlockIntoFreeList+0xac>)
 8014492:	60fb      	str	r3, [r7, #12]
 8014494:	e002      	b.n	801449c <prvInsertBlockIntoFreeList+0x14>
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	60fb      	str	r3, [r7, #12]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d8f7      	bhi.n	8014496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	4413      	add	r3, r2
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d108      	bne.n	80144ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	685a      	ldr	r2, [r3, #4]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	441a      	add	r2, r3
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	68ba      	ldr	r2, [r7, #8]
 80144d4:	441a      	add	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d118      	bne.n	8014510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	4b15      	ldr	r3, [pc, #84]	; (8014538 <prvInsertBlockIntoFreeList+0xb0>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d00d      	beq.n	8014506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	685a      	ldr	r2, [r3, #4]
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	441a      	add	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	601a      	str	r2, [r3, #0]
 8014504:	e008      	b.n	8014518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014506:	4b0c      	ldr	r3, [pc, #48]	; (8014538 <prvInsertBlockIntoFreeList+0xb0>)
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	601a      	str	r2, [r3, #0]
 801450e:	e003      	b.n	8014518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014518:	68fa      	ldr	r2, [r7, #12]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	429a      	cmp	r2, r3
 801451e:	d002      	beq.n	8014526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014526:	bf00      	nop
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	2003237c 	.word	0x2003237c
 8014538:	20032384 	.word	0x20032384

0801453c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b086      	sub	sp, #24
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8014544:	2300      	movs	r3, #0
 8014546:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d10a      	bne.n	8014564 <FreeRTOS_CLIRegisterCommand+0x28>
	__asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	60fb      	str	r3, [r7, #12]
}
 8014560:	bf00      	nop
 8014562:	e7fe      	b.n	8014562 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8014564:	2008      	movs	r0, #8
 8014566:	f7ff fdf7 	bl	8014158 <pvPortMalloc>
 801456a:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d10a      	bne.n	8014588 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8014572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014576:	f383 8811 	msr	BASEPRI, r3
 801457a:	f3bf 8f6f 	isb	sy
 801457e:	f3bf 8f4f 	dsb	sy
 8014582:	60bb      	str	r3, [r7, #8]
}
 8014584:	bf00      	nop
 8014586:	e7fe      	b.n	8014586 <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d012      	beq.n	80145b4 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 801458e:	f7ff fcc1 	bl	8013f14 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	2200      	movs	r2, #0
 801459c:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 801459e:	4b08      	ldr	r3, [pc, #32]	; (80145c0 <FreeRTOS_CLIRegisterCommand+0x84>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	693a      	ldr	r2, [r7, #16]
 80145a4:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80145a6:	4a06      	ldr	r2, [pc, #24]	; (80145c0 <FreeRTOS_CLIRegisterCommand+0x84>)
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 80145ac:	f7ff fce2 	bl	8013f74 <vPortExitCritical>

		xReturn = pdPASS;
 80145b0:	2301      	movs	r3, #1
 80145b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80145b4:	697b      	ldr	r3, [r7, #20]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3718      	adds	r7, #24
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	200000b8 	.word	0x200000b8

080145c4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b088      	sub	sp, #32
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 80145d0:	2301      	movs	r3, #1
 80145d2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80145d4:	4b3a      	ldr	r3, [pc, #232]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d141      	bne.n	8014660 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80145dc:	4b38      	ldr	r3, [pc, #224]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80145de:	4a39      	ldr	r2, [pc, #228]	; (80146c4 <FreeRTOS_CLIProcessCommand+0x100>)
 80145e0:	601a      	str	r2, [r3, #0]
 80145e2:	e037      	b.n	8014654 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80145e4:	4b36      	ldr	r3, [pc, #216]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80145ee:	69b8      	ldr	r0, [r7, #24]
 80145f0:	f7eb fdfe 	bl	80001f0 <strlen>
 80145f4:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80145f6:	68fa      	ldr	r2, [r7, #12]
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	4413      	add	r3, r2
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	2b20      	cmp	r3, #32
 8014600:	d005      	beq.n	801460e <FreeRTOS_CLIProcessCommand+0x4a>
 8014602:	68fa      	ldr	r2, [r7, #12]
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	4413      	add	r3, r2
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d11d      	bne.n	801464a <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 801460e:	697a      	ldr	r2, [r7, #20]
 8014610:	69b9      	ldr	r1, [r7, #24]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f005 f86d 	bl	80196f2 <strncmp>
 8014618:	4603      	mov	r3, r0
 801461a:	2b00      	cmp	r3, #0
 801461c:	d115      	bne.n	801464a <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 801461e:	4b28      	ldr	r3, [pc, #160]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014628:	2b00      	cmp	r3, #0
 801462a:	db18      	blt.n	801465e <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f000 f87d 	bl	801472c <prvGetNumberOfParameters>
 8014632:	4603      	mov	r3, r0
 8014634:	461a      	mov	r2, r3
 8014636:	4b22      	ldr	r3, [pc, #136]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014640:	429a      	cmp	r2, r3
 8014642:	d00c      	beq.n	801465e <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8014644:	2300      	movs	r3, #0
 8014646:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8014648:	e009      	b.n	801465e <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 801464a:	4b1d      	ldr	r3, [pc, #116]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	4a1b      	ldr	r2, [pc, #108]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	4b1a      	ldr	r3, [pc, #104]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d1c3      	bne.n	80145e4 <FreeRTOS_CLIProcessCommand+0x20>
 801465c:	e000      	b.n	8014660 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 801465e:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8014660:	4b17      	ldr	r3, [pc, #92]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00b      	beq.n	8014680 <FreeRTOS_CLIProcessCommand+0xbc>
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d108      	bne.n	8014680 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	4915      	ldr	r1, [pc, #84]	; (80146c8 <FreeRTOS_CLIProcessCommand+0x104>)
 8014672:	68b8      	ldr	r0, [r7, #8]
 8014674:	f005 f851 	bl	801971a <strncpy>
		pxCommand = NULL;
 8014678:	4b11      	ldr	r3, [pc, #68]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 801467a:	2200      	movs	r2, #0
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	e01a      	b.n	80146b6 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8014680:	4b0f      	ldr	r3, [pc, #60]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d00f      	beq.n	80146a8 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8014688:	4b0d      	ldr	r3, [pc, #52]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	68fa      	ldr	r2, [r7, #12]
 8014692:	6879      	ldr	r1, [r7, #4]
 8014694:	68b8      	ldr	r0, [r7, #8]
 8014696:	4798      	blx	r3
 8014698:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 801469a:	69fb      	ldr	r3, [r7, #28]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10a      	bne.n	80146b6 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80146a0:	4b07      	ldr	r3, [pc, #28]	; (80146c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80146a2:	2200      	movs	r2, #0
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	e006      	b.n	80146b6 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	4908      	ldr	r1, [pc, #32]	; (80146cc <FreeRTOS_CLIProcessCommand+0x108>)
 80146ac:	68b8      	ldr	r0, [r7, #8]
 80146ae:	f005 f834 	bl	801971a <strncpy>
		xReturn = pdFALSE;
 80146b2:	2300      	movs	r3, #0
 80146b4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80146b6:	69fb      	ldr	r3, [r7, #28]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3720      	adds	r7, #32
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	20032394 	.word	0x20032394
 80146c4:	200000b0 	.word	0x200000b0
 80146c8:	0801a088 	.word	0x0801a088
 80146cc:	0801a0e0 	.word	0x0801a0e0

080146d0 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 80146dc:	4b11      	ldr	r3, [pc, #68]	; (8014724 <prvHelpCommand+0x54>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d102      	bne.n	80146ea <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80146e4:	4b0f      	ldr	r3, [pc, #60]	; (8014724 <prvHelpCommand+0x54>)
 80146e6:	4a10      	ldr	r2, [pc, #64]	; (8014728 <prvHelpCommand+0x58>)
 80146e8:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80146ea:	4b0e      	ldr	r3, [pc, #56]	; (8014724 <prvHelpCommand+0x54>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	68ba      	ldr	r2, [r7, #8]
 80146f4:	4619      	mov	r1, r3
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f005 f80f 	bl	801971a <strncpy>
	pxCommand = pxCommand->pxNext;
 80146fc:	4b09      	ldr	r3, [pc, #36]	; (8014724 <prvHelpCommand+0x54>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	4a08      	ldr	r2, [pc, #32]	; (8014724 <prvHelpCommand+0x54>)
 8014704:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8014706:	4b07      	ldr	r3, [pc, #28]	; (8014724 <prvHelpCommand+0x54>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d102      	bne.n	8014714 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 801470e:	2300      	movs	r3, #0
 8014710:	617b      	str	r3, [r7, #20]
 8014712:	e001      	b.n	8014718 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8014714:	2301      	movs	r3, #1
 8014716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014718:	697b      	ldr	r3, [r7, #20]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3718      	adds	r7, #24
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20032398 	.word	0x20032398
 8014728:	200000b0 	.word	0x200000b0

0801472c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 801472c:	b480      	push	{r7}
 801472e:	b085      	sub	sp, #20
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8014734:	2300      	movs	r3, #0
 8014736:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8014738:	2300      	movs	r3, #0
 801473a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 801473c:	e014      	b.n	8014768 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	2b20      	cmp	r3, #32
 8014744:	d10b      	bne.n	801475e <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	2b01      	cmp	r3, #1
 801474a:	d00a      	beq.n	8014762 <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 801474c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014750:	b2db      	uxtb	r3, r3
 8014752:	3301      	adds	r3, #1
 8014754:	b2db      	uxtb	r3, r3
 8014756:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8014758:	2301      	movs	r3, #1
 801475a:	60bb      	str	r3, [r7, #8]
 801475c:	e001      	b.n	8014762 <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 801475e:	2300      	movs	r3, #0
 8014760:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3301      	adds	r3, #1
 8014766:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d1e6      	bne.n	801473e <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	2b01      	cmp	r3, #1
 8014774:	d105      	bne.n	8014782 <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8014776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801477a:	b2db      	uxtb	r3, r3
 801477c:	3b01      	subs	r3, #1
 801477e:	b2db      	uxtb	r3, r3
 8014780:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8014782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014786:	4618      	mov	r0, r3
 8014788:	3714      	adds	r7, #20
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
	...

08014794 <SD_DMAConfig>:
 *         only one channel for TX/RX, see MX_SDMMC1_SD_Init
 * @param  direction: Channel direction
 * @retval Status
 * ==================================================================== */
HAL_StatusTypeDef SD_DMAConfig( uint32_t direction )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]

  // Set transmit direction
  hdma_sdmmc1.Init.Direction = direction;
 801479c:	4a08      	ldr	r2, [pc, #32]	; (80147c0 <SD_DMAConfig+0x2c>)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6093      	str	r3, [r2, #8]

  // Stop any DMA activity
  HAL_DMA_Abort( &hdma_sdmmc1 );
 80147a2:	4807      	ldr	r0, [pc, #28]	; (80147c0 <SD_DMAConfig+0x2c>)
 80147a4:	f7ec fa14 	bl	8000bd0 <HAL_DMA_Abort>

  // Deinit DMA
  HAL_DMA_DeInit( &hdma_sdmmc1 );
 80147a8:	4805      	ldr	r0, [pc, #20]	; (80147c0 <SD_DMAConfig+0x2c>)
 80147aa:	f7ec f91f 	bl	80009ec <HAL_DMA_DeInit>

  // Initialize DMA
  return HAL_DMA_Init( &hdma_sdmmc1 );
 80147ae:	4804      	ldr	r0, [pc, #16]	; (80147c0 <SD_DMAConfig+0x2c>)
 80147b0:	f7ec f864 	bl	800087c <HAL_DMA_Init>
 80147b4:	4603      	mov	r3, r0
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3708      	adds	r7, #8
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
 80147be:	bf00      	nop
 80147c0:	2003294c 	.word	0x2003294c

080147c4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA( uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80147d0:	2300      	movs	r3, #0
 80147d2:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_PERIPH_TO_MEMORY;
 80147d4:	2300      	movs	r3, #0
 80147d6:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to receive
  if ( hsd1.hdmarx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 80147d8:	4b0e      	ldr	r3, [pc, #56]	; (8014814 <BSP_SD_ReadBlocks_DMA+0x50>)
 80147da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147dc:	689b      	ldr	r3, [r3, #8]
 80147de:	693a      	ldr	r2, [r7, #16]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d004      	beq.n	80147ee <BSP_SD_ReadBlocks_DMA+0x2a>
 80147e4:	6938      	ldr	r0, [r7, #16]
 80147e6:	f7ff ffd5 	bl	8014794 <SD_DMAConfig>
 80147ea:	4603      	mov	r3, r0
 80147ec:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_ReadBlocks_DMA( &hsd1, (uint8_t *) pData, ReadAddr, NumOfBlocks ) != HAL_OK ) {
 80147ee:	7dfb      	ldrb	r3, [r7, #23]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d108      	bne.n	8014806 <BSP_SD_ReadBlocks_DMA+0x42>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	68f9      	ldr	r1, [r7, #12]
 80147fa:	4806      	ldr	r0, [pc, #24]	; (8014814 <BSP_SD_ReadBlocks_DMA+0x50>)
 80147fc:	f7f0 fb00 	bl	8004e00 <HAL_SD_ReadBlocks_DMA>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d001      	beq.n	801480a <BSP_SD_ReadBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 8014806:	2301      	movs	r3, #1
 8014808:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801480a:	7dfb      	ldrb	r3, [r7, #23]
}
 801480c:	4618      	mov	r0, r3
 801480e:	3718      	adds	r7, #24
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	200328c8 	.word	0x200328c8

08014818 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA( uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b086      	sub	sp, #24
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014824:	2300      	movs	r3, #0
 8014826:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_MEMORY_TO_PERIPH;
 8014828:	2310      	movs	r3, #16
 801482a:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to transmit
  if ( hsd1.hdmatx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 801482c:	4b0e      	ldr	r3, [pc, #56]	; (8014868 <BSP_SD_WriteBlocks_DMA+0x50>)
 801482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014830:	689b      	ldr	r3, [r3, #8]
 8014832:	693a      	ldr	r2, [r7, #16]
 8014834:	429a      	cmp	r2, r3
 8014836:	d004      	beq.n	8014842 <BSP_SD_WriteBlocks_DMA+0x2a>
 8014838:	6938      	ldr	r0, [r7, #16]
 801483a:	f7ff ffab 	bl	8014794 <SD_DMAConfig>
 801483e:	4603      	mov	r3, r0
 8014840:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_WriteBlocks_DMA( &hsd1, (uint8_t *) pData, WriteAddr, NumOfBlocks ) != HAL_OK ) {
 8014842:	7dfb      	ldrb	r3, [r7, #23]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d108      	bne.n	801485a <BSP_SD_WriteBlocks_DMA+0x42>
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	68ba      	ldr	r2, [r7, #8]
 801484c:	68f9      	ldr	r1, [r7, #12]
 801484e:	4806      	ldr	r0, [pc, #24]	; (8014868 <BSP_SD_WriteBlocks_DMA+0x50>)
 8014850:	f7f0 fbc2 	bl	8004fd8 <HAL_SD_WriteBlocks_DMA>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <BSP_SD_WriteBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 801485a:	2301      	movs	r3, #1
 801485c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801485e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3718      	adds	r7, #24
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	200328c8 	.word	0x200328c8

0801486c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014872:	2300      	movs	r3, #0
 8014874:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014876:	f000 f862 	bl	801493e <BSP_SD_IsDetected>
 801487a:	4603      	mov	r3, r0
 801487c:	2b01      	cmp	r3, #1
 801487e:	d001      	beq.n	8014884 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014880:	2302      	movs	r3, #2
 8014882:	e012      	b.n	80148aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014884:	480b      	ldr	r0, [pc, #44]	; (80148b4 <BSP_SD_Init+0x48>)
 8014886:	f7ef fe7f 	bl	8004588 <HAL_SD_Init>
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801488e:	79fb      	ldrb	r3, [r7, #7]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d109      	bne.n	80148a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014898:	4806      	ldr	r0, [pc, #24]	; (80148b4 <BSP_SD_Init+0x48>)
 801489a:	f7f0 ffdb 	bl	8005854 <HAL_SD_ConfigWideBusOperation>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d001      	beq.n	80148a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80148a4:	2301      	movs	r3, #1
 80148a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80148a8:	79fb      	ldrb	r3, [r7, #7]
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3708      	adds	r7, #8
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	200328c8 	.word	0x200328c8

080148b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80148bc:	4805      	ldr	r0, [pc, #20]	; (80148d4 <BSP_SD_GetCardState+0x1c>)
 80148be:	f7f1 f845 	bl	800594c <HAL_SD_GetCardState>
 80148c2:	4603      	mov	r3, r0
 80148c4:	2b04      	cmp	r3, #4
 80148c6:	bf14      	ite	ne
 80148c8:	2301      	movne	r3, #1
 80148ca:	2300      	moveq	r3, #0
 80148cc:	b2db      	uxtb	r3, r3
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	200328c8 	.word	0x200328c8

080148d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80148e0:	6879      	ldr	r1, [r7, #4]
 80148e2:	4803      	ldr	r0, [pc, #12]	; (80148f0 <BSP_SD_GetCardInfo+0x18>)
 80148e4:	f7f0 ff8a 	bl	80057fc <HAL_SD_GetCardInfo>
}
 80148e8:	bf00      	nop
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	200328c8 	.word	0x200328c8

080148f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80148fc:	f000 f818 	bl	8014930 <BSP_SD_AbortCallback>
}
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014910:	f001 f8ee 	bl	8015af0 <BSP_SD_WriteCpltCallback>
}
 8014914:	bf00      	nop
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014924:	f001 f8f2 	bl	8015b0c <BSP_SD_ReadCpltCallback>
}
 8014928:	bf00      	nop
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8014930:	b480      	push	{r7}
 8014932:	af00      	add	r7, sp, #0

}
 8014934:	bf00      	nop
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr

0801493e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801493e:	b580      	push	{r7, lr}
 8014940:	b082      	sub	sp, #8
 8014942:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014944:	2301      	movs	r3, #1
 8014946:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8014948:	f000 faf8 	bl	8014f3c <BSP_PlatformIsDetected>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d101      	bne.n	8014956 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014952:	2300      	movs	r3, #0
 8014954:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014956:	79fb      	ldrb	r3, [r7, #7]
 8014958:	b2db      	uxtb	r3, r3
}
 801495a:	4618      	mov	r0, r3
 801495c:	3708      	adds	r7, #8
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
	...

08014964 <button_init>:
 * @brief  Initialize button
 * @param  None
 * @retval None
 * ==================================================================== */
void button_init( void )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af02      	add	r7, sp, #8
  // Create button handling task
  BaseType_t ret;
  ret = xTaskCreate( buttonTask, "Button task", BUTTON_STACK_SIZE, NULL, 1, &buttonTaskHandle );
 801496a:	4b0b      	ldr	r3, [pc, #44]	; (8014998 <button_init+0x34>)
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	2301      	movs	r3, #1
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	2300      	movs	r3, #0
 8014974:	2280      	movs	r2, #128	; 0x80
 8014976:	4909      	ldr	r1, [pc, #36]	; (801499c <button_init+0x38>)
 8014978:	4809      	ldr	r0, [pc, #36]	; (80149a0 <button_init+0x3c>)
 801497a:	f7fd fc8b 	bl	8012294 <xTaskCreate>
 801497e:	6078      	str	r0, [r7, #4]
  if ( ret != pdPASS ) for ( ;; ) { }
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d000      	beq.n	8014988 <button_init+0x24>
 8014986:	e7fe      	b.n	8014986 <button_init+0x22>

  // Set button status
  DEVICE_STATUS.button = DEVICE_OKAY;
 8014988:	4b06      	ldr	r3, [pc, #24]	; (80149a4 <button_init+0x40>)
 801498a:	2200      	movs	r2, #0
 801498c:	701a      	strb	r2, [r3, #0]
}
 801498e:	bf00      	nop
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	2003239c 	.word	0x2003239c
 801499c:	0801a130 	.word	0x0801a130
 80149a0:	080149a9 	.word	0x080149a9
 80149a4:	2003260c 	.word	0x2003260c

080149a8 <buttonTask>:
 * @brief  Button task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void buttonTask( void * pvParameters )
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  // Button press status, press duration, button event
  uint16_t state = 1;
 80149b0:	2301      	movs	r3, #1
 80149b2:	81fb      	strh	r3, [r7, #14]
  uint16_t duration = 0;
 80149b4:	2300      	movs	r3, #0
 80149b6:	81bb      	strh	r3, [r7, #12]

  // Endless loop
  for ( ;; ) {

    // Clear all pending events and wait for new button press event
    xTaskNotifyStateClear( NULL );
 80149b8:	2000      	movs	r0, #0
 80149ba:	f7ff f8f5 	bl	8013ba8 <xTaskNotifyStateClear>
    xTaskNotifyWait( 0x00, 0x00, NULL, portMAX_DELAY );
 80149be:	f04f 33ff 	mov.w	r3, #4294967295
 80149c2:	2200      	movs	r2, #0
 80149c4:	2100      	movs	r1, #0
 80149c6:	2000      	movs	r0, #0
 80149c8:	f7fe fefa 	bl	80137c0 <xTaskNotifyWait>

    // Reset state and press duration
    state = 1;
 80149cc:	2301      	movs	r3, #1
 80149ce:	81fb      	strh	r3, [r7, #14]
    duration = 0;
 80149d0:	2300      	movs	r3, #0
 80149d2:	81bb      	strh	r3, [r7, #12]

    // De-bounce and check if pressed or released
    while ( 1 ) {
      state = (state << 1) | HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port, BUTTON_1_Pin ); // Shift to left and set bit[0] to GPIO
 80149d4:	89fb      	ldrh	r3, [r7, #14]
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	b21c      	sxth	r4, r3
 80149da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80149de:	4825      	ldr	r0, [pc, #148]	; (8014a74 <buttonTask+0xcc>)
 80149e0:	f7ec fce4 	bl	80013ac <HAL_GPIO_ReadPin>
 80149e4:	4603      	mov	r3, r0
 80149e6:	b21b      	sxth	r3, r3
 80149e8:	4323      	orrs	r3, r4
 80149ea:	b21b      	sxth	r3, r3
 80149ec:	81fb      	strh	r3, [r7, #14]
      if ( state == 0xFFFF ) break;                                                // 16 ones  -> pressed
 80149ee:	89fb      	ldrh	r3, [r7, #14]
 80149f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d006      	beq.n	8014a06 <buttonTask+0x5e>
      if ( state == 0x0000 ) break;                                                // 16 zeros -> released
 80149f8:	89fb      	ldrh	r3, [r7, #14]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d005      	beq.n	8014a0a <buttonTask+0x62>
      vTaskDelay( pdMS_TO_TICKS( 1 ) );
 80149fe:	2001      	movs	r0, #1
 8014a00:	f7fd fe3e 	bl	8012680 <vTaskDelay>
      state = (state << 1) | HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port, BUTTON_1_Pin ); // Shift to left and set bit[0] to GPIO
 8014a04:	e7e6      	b.n	80149d4 <buttonTask+0x2c>
      if ( state == 0xFFFF ) break;                                                // 16 ones  -> pressed
 8014a06:	bf00      	nop
 8014a08:	e000      	b.n	8014a0c <buttonTask+0x64>
      if ( state == 0x0000 ) break;                                                // 16 zeros -> released
 8014a0a:	bf00      	nop
    }

    // Skip button released event
    if ( state == 0x0000 ) continue;
 8014a0c:	89fb      	ldrh	r3, [r7, #14]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d02e      	beq.n	8014a70 <buttonTask+0xc8>

    // Check button (in 10 ms steps) for release
    while ( 1 ) {
      if ( !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port, BUTTON_1_Pin ) || duration > LONG_DURATION ) break;
 8014a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014a16:	4817      	ldr	r0, [pc, #92]	; (8014a74 <buttonTask+0xcc>)
 8014a18:	f7ec fcc8 	bl	80013ac <HAL_GPIO_ReadPin>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00b      	beq.n	8014a3a <buttonTask+0x92>
 8014a22:	89bb      	ldrh	r3, [r7, #12]
 8014a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d806      	bhi.n	8014a3a <buttonTask+0x92>
      duration += 10;
 8014a2c:	89bb      	ldrh	r3, [r7, #12]
 8014a2e:	330a      	adds	r3, #10
 8014a30:	81bb      	strh	r3, [r7, #12]
      vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8014a32:	200a      	movs	r0, #10
 8014a34:	f7fd fe24 	bl	8012680 <vTaskDelay>
      if ( !HAL_GPIO_ReadPin( BUTTON_1_GPIO_Port, BUTTON_1_Pin ) || duration > LONG_DURATION ) break;
 8014a38:	e7eb      	b.n	8014a12 <buttonTask+0x6a>
    }

    // Set press duration
    if ( duration < MEDIUM_DURATION ) evt = EVENT_BUTTON_SHORT;
 8014a3a:	89bb      	ldrh	r3, [r7, #12]
 8014a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a40:	d202      	bcs.n	8014a48 <buttonTask+0xa0>
 8014a42:	2300      	movs	r3, #0
 8014a44:	72fb      	strb	r3, [r7, #11]
 8014a46:	e009      	b.n	8014a5c <buttonTask+0xb4>
    else if ( duration > LONG_DURATION ) evt = EVENT_BUTTON_LONG;
 8014a48:	89bb      	ldrh	r3, [r7, #12]
 8014a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a4e:	4293      	cmp	r3, r2
 8014a50:	d902      	bls.n	8014a58 <buttonTask+0xb0>
 8014a52:	2302      	movs	r3, #2
 8014a54:	72fb      	strb	r3, [r7, #11]
 8014a56:	e001      	b.n	8014a5c <buttonTask+0xb4>
    else evt = EVENT_BUTTON_MEDIUM;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	72fb      	strb	r3, [r7, #11]

    // Enqueue button press event
    xQueueSend( eventQueueHandle, &evt, portMAX_DELAY );
 8014a5c:	4b06      	ldr	r3, [pc, #24]	; (8014a78 <buttonTask+0xd0>)
 8014a5e:	6818      	ldr	r0, [r3, #0]
 8014a60:	f107 010b 	add.w	r1, r7, #11
 8014a64:	2300      	movs	r3, #0
 8014a66:	f04f 32ff 	mov.w	r2, #4294967295
 8014a6a:	f7fc f889 	bl	8010b80 <xQueueGenericSend>
 8014a6e:	e7a3      	b.n	80149b8 <buttonTask+0x10>
    if ( state == 0x0000 ) continue;
 8014a70:	bf00      	nop
    xTaskNotifyStateClear( NULL );
 8014a72:	e7a1      	b.n	80149b8 <buttonTask+0x10>
 8014a74:	48000800 	.word	0x48000800
 8014a78:	200325fc 	.word	0x200325fc

08014a7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014a80:	f3bf 8f4f 	dsb	sy
}
 8014a84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014a86:	4b06      	ldr	r3, [pc, #24]	; (8014aa0 <__NVIC_SystemReset+0x24>)
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014a8e:	4904      	ldr	r1, [pc, #16]	; (8014aa0 <__NVIC_SystemReset+0x24>)
 8014a90:	4b04      	ldr	r3, [pc, #16]	; (8014aa4 <__NVIC_SystemReset+0x28>)
 8014a92:	4313      	orrs	r3, r2
 8014a94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014a96:	f3bf 8f4f 	dsb	sy
}
 8014a9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014a9c:	bf00      	nop
 8014a9e:	e7fd      	b.n	8014a9c <__NVIC_SystemReset+0x20>
 8014aa0:	e000ed00 	.word	0xe000ed00
 8014aa4:	05fa0004 	.word	0x05fa0004

08014aa8 <cli_init>:
 * @brief  Initialize the cli
 * @param  None
 * @retval None
 * ==================================================================== */
void cli_init( void )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	af00      	add	r7, sp, #0
  // Register all known commands
  FreeRTOS_CLIRegisterCommand( &whoami_def );
 8014aac:	4809      	ldr	r0, [pc, #36]	; (8014ad4 <cli_init+0x2c>)
 8014aae:	f7ff fd45 	bl	801453c <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &reset_def );
 8014ab2:	4809      	ldr	r0, [pc, #36]	; (8014ad8 <cli_init+0x30>)
 8014ab4:	f7ff fd42 	bl	801453c <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &sysinfo_def );
 8014ab8:	4808      	ldr	r0, [pc, #32]	; (8014adc <cli_init+0x34>)
 8014aba:	f7ff fd3f 	bl	801453c <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &fsdcard_def );
 8014abe:	4808      	ldr	r0, [pc, #32]	; (8014ae0 <cli_init+0x38>)
 8014ac0:	f7ff fd3c 	bl	801453c <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &startmsc_def );
 8014ac4:	4807      	ldr	r0, [pc, #28]	; (8014ae4 <cli_init+0x3c>)
 8014ac6:	f7ff fd39 	bl	801453c <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &stopmsc_def );
 8014aca:	4807      	ldr	r0, [pc, #28]	; (8014ae8 <cli_init+0x40>)
 8014acc:	f7ff fd36 	bl	801453c <FreeRTOS_CLIRegisterCommand>

}
 8014ad0:	bf00      	nop
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	0801aba4 	.word	0x0801aba4
 8014ad8:	0801abb4 	.word	0x0801abb4
 8014adc:	0801abc4 	.word	0x0801abc4
 8014ae0:	0801abd4 	.word	0x0801abd4
 8014ae4:	0801abe4 	.word	0x0801abe4
 8014ae8:	0801abf4 	.word	0x0801abf4

08014aec <whoami_cmd>:
 * @brief  Command: whoami
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t whoami_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	2200      	movs	r2, #0
 8014afc:	701a      	strb	r2, [r3, #0]

  printHeader();
 8014afe:	f000 fdaf 	bl	8015660 <printHeader>

  // No more data to write
  return pdFALSE;
 8014b02:	2300      	movs	r3, #0
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <reset_cmd>:
 * @brief  Command: reset
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t reset_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	701a      	strb	r2, [r3, #0]

  NVIC_SystemReset();
 8014b1e:	f7ff ffad 	bl	8014a7c <__NVIC_SystemReset>
	...

08014b24 <fsdcard_cmd>:
 * @brief  Command: whoami
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t fsdcard_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b26:	b087      	sub	sp, #28
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	607a      	str	r2, [r7, #4]
  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	701a      	strb	r2, [r3, #0]

  // Write output to buffer
  strcpy( pcWriteBuffer, "sd format started, please wait ...\r\n" );
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	4a29      	ldr	r2, [pc, #164]	; (8014be0 <fsdcard_cmd+0xbc>)
 8014b3a:	4614      	mov	r4, r2
 8014b3c:	469c      	mov	ip, r3
 8014b3e:	f104 0e20 	add.w	lr, r4, #32
 8014b42:	4665      	mov	r5, ip
 8014b44:	4626      	mov	r6, r4
 8014b46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014b48:	6028      	str	r0, [r5, #0]
 8014b4a:	6069      	str	r1, [r5, #4]
 8014b4c:	60aa      	str	r2, [r5, #8]
 8014b4e:	60eb      	str	r3, [r5, #12]
 8014b50:	3410      	adds	r4, #16
 8014b52:	f10c 0c10 	add.w	ip, ip, #16
 8014b56:	4574      	cmp	r4, lr
 8014b58:	d1f3      	bne.n	8014b42 <fsdcard_cmd+0x1e>
 8014b5a:	4663      	mov	r3, ip
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	6810      	ldr	r0, [r2, #0]
 8014b60:	6018      	str	r0, [r3, #0]
 8014b62:	7912      	ldrb	r2, [r2, #4]
 8014b64:	711a      	strb	r2, [r3, #4]
  short ret = sdcard_formatSdCard();
 8014b66:	f001 f8ab 	bl	8015cc0 <sdcard_formatSdCard>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	82fb      	strh	r3, [r7, #22]
  if (ret == DEVICE_OKAY){
 8014b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d117      	bne.n	8014ba6 <fsdcard_cmd+0x82>
	  strcpy( pcWriteBuffer, "format success\r\n" );
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	4a1a      	ldr	r2, [pc, #104]	; (8014be4 <fsdcard_cmd+0xc0>)
 8014b7a:	461d      	mov	r5, r3
 8014b7c:	4614      	mov	r4, r2
 8014b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b80:	6028      	str	r0, [r5, #0]
 8014b82:	6069      	str	r1, [r5, #4]
 8014b84:	60aa      	str	r2, [r5, #8]
 8014b86:	60eb      	str	r3, [r5, #12]
 8014b88:	7823      	ldrb	r3, [r4, #0]
 8014b8a:	742b      	strb	r3, [r5, #16]
	  strcat( pcWriteBuffer, "\r\n\r\n" );
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	f7eb fb2f 	bl	80001f0 <strlen>
 8014b92:	4603      	mov	r3, r0
 8014b94:	461a      	mov	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	4413      	add	r3, r2
 8014b9a:	4a13      	ldr	r2, [pc, #76]	; (8014be8 <fsdcard_cmd+0xc4>)
 8014b9c:	6810      	ldr	r0, [r2, #0]
 8014b9e:	6018      	str	r0, [r3, #0]
 8014ba0:	7912      	ldrb	r2, [r2, #4]
 8014ba2:	711a      	strb	r2, [r3, #4]
 8014ba4:	e017      	b.n	8014bd6 <fsdcard_cmd+0xb2>
  }
  else{
	  strcpy( pcWriteBuffer, "format ERROR\r\n" );
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	4a10      	ldr	r2, [pc, #64]	; (8014bec <fsdcard_cmd+0xc8>)
 8014baa:	461c      	mov	r4, r3
 8014bac:	4613      	mov	r3, r2
 8014bae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014bb0:	6020      	str	r0, [r4, #0]
 8014bb2:	6061      	str	r1, [r4, #4]
 8014bb4:	60a2      	str	r2, [r4, #8]
 8014bb6:	881a      	ldrh	r2, [r3, #0]
 8014bb8:	789b      	ldrb	r3, [r3, #2]
 8014bba:	81a2      	strh	r2, [r4, #12]
 8014bbc:	73a3      	strb	r3, [r4, #14]
	  strcat( pcWriteBuffer, "\r\n\r\n" );
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f7eb fb16 	bl	80001f0 <strlen>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	4413      	add	r3, r2
 8014bcc:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <fsdcard_cmd+0xc4>)
 8014bce:	6810      	ldr	r0, [r2, #0]
 8014bd0:	6018      	str	r0, [r3, #0]
 8014bd2:	7912      	ldrb	r2, [r2, #4]
 8014bd4:	711a      	strb	r2, [r3, #4]
  }

  // No more data to write
  return pdFALSE;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	371c      	adds	r7, #28
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be0:	0801a26c 	.word	0x0801a26c
 8014be4:	0801a294 	.word	0x0801a294
 8014be8:	0801a2a8 	.word	0x0801a2a8
 8014bec:	0801a2b0 	.word	0x0801a2b0

08014bf0 <sysinfo_cmd>:
 * @brief  Command: sysinfo
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t sysinfo_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bf2:	b097      	sub	sp, #92	; 0x5c
 8014bf4:	af02      	add	r7, sp, #8
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	607a      	str	r2, [r7, #4]
  static UBaseType_t iTask = 0;
  static unsigned long totalRunTime = 0;
  unsigned long percTime;

  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	701a      	strb	r2, [r3, #0]

  // Function called for the first time
  if ( nTasks == 0 ) {
 8014c02:	4b80      	ldr	r3, [pc, #512]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d150      	bne.n	8014cac <sysinfo_cmd+0xbc>

    // Number of tasks
    nTasks = uxTaskGetNumberOfTasks();
 8014c0a:	f7fd fee5 	bl	80129d8 <uxTaskGetNumberOfTasks>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	4a7c      	ldr	r2, [pc, #496]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c12:	6013      	str	r3, [r2, #0]

    // Allocate the array containing the task info
    tasks = pvPortMalloc( nTasks * sizeof(TaskStatus_t) );
 8014c14:	4b7b      	ldr	r3, [pc, #492]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	4613      	mov	r3, r2
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	4413      	add	r3, r2
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7ff fa99 	bl	8014158 <pvPortMalloc>
 8014c26:	4603      	mov	r3, r0
 8014c28:	4a77      	ldr	r2, [pc, #476]	; (8014e08 <sysinfo_cmd+0x218>)
 8014c2a:	6013      	str	r3, [r2, #0]

    // Return error message if memory can not be allocated
    if ( tasks == NULL ) {
 8014c2c:	4b76      	ldr	r3, [pc, #472]	; (8014e08 <sysinfo_cmd+0x218>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d11e      	bne.n	8014c72 <sysinfo_cmd+0x82>
      nTasks = 0;
 8014c34:	4b73      	ldr	r3, [pc, #460]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	601a      	str	r2, [r3, #0]
      strcpy( pcWriteBuffer, "Error: Task list could not be generated.\r\n\r\n" );
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	4a73      	ldr	r2, [pc, #460]	; (8014e0c <sysinfo_cmd+0x21c>)
 8014c3e:	4614      	mov	r4, r2
 8014c40:	469c      	mov	ip, r3
 8014c42:	f104 0e20 	add.w	lr, r4, #32
 8014c46:	4665      	mov	r5, ip
 8014c48:	4626      	mov	r6, r4
 8014c4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014c4c:	6028      	str	r0, [r5, #0]
 8014c4e:	6069      	str	r1, [r5, #4]
 8014c50:	60aa      	str	r2, [r5, #8]
 8014c52:	60eb      	str	r3, [r5, #12]
 8014c54:	3410      	adds	r4, #16
 8014c56:	f10c 0c10 	add.w	ip, ip, #16
 8014c5a:	4574      	cmp	r4, lr
 8014c5c:	d1f3      	bne.n	8014c46 <sysinfo_cmd+0x56>
 8014c5e:	4665      	mov	r5, ip
 8014c60:	4623      	mov	r3, r4
 8014c62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c64:	6028      	str	r0, [r5, #0]
 8014c66:	6069      	str	r1, [r5, #4]
 8014c68:	60aa      	str	r2, [r5, #8]
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	732b      	strb	r3, [r5, #12]
      return pdFALSE;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	e0c4      	b.n	8014dfc <sysinfo_cmd+0x20c>
    }

    // Get system state
    nTasks = uxTaskGetSystemState( tasks, nTasks, &totalRunTime );
 8014c72:	4b65      	ldr	r3, [pc, #404]	; (8014e08 <sysinfo_cmd+0x218>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a63      	ldr	r2, [pc, #396]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c78:	6811      	ldr	r1, [r2, #0]
 8014c7a:	4a65      	ldr	r2, [pc, #404]	; (8014e10 <sysinfo_cmd+0x220>)
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fd feb7 	bl	80129f0 <uxTaskGetSystemState>
 8014c82:	4603      	mov	r3, r0
 8014c84:	4a5f      	ldr	r2, [pc, #380]	; (8014e04 <sysinfo_cmd+0x214>)
 8014c86:	6013      	str	r3, [r2, #0]

    // Percentage for run time calculation
    totalRunTime /= 100;
 8014c88:	4b61      	ldr	r3, [pc, #388]	; (8014e10 <sysinfo_cmd+0x220>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a61      	ldr	r2, [pc, #388]	; (8014e14 <sysinfo_cmd+0x224>)
 8014c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8014c92:	095b      	lsrs	r3, r3, #5
 8014c94:	4a5e      	ldr	r2, [pc, #376]	; (8014e10 <sysinfo_cmd+0x220>)
 8014c96:	6013      	str	r3, [r2, #0]

    // Header
    strcpy( pcWriteBuffer, "Task name                Run time  Free stack\r\n---------------------------------------------\r\n" );
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	4a5f      	ldr	r2, [pc, #380]	; (8014e18 <sysinfo_cmd+0x228>)
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	235f      	movs	r3, #95	; 0x5f
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f004 fce0 	bl	8019668 <memcpy>
    return pdTRUE;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	e0a7      	b.n	8014dfc <sysinfo_cmd+0x20c>
  }

  // Avoid division by zero
  if ( totalRunTime > 0 ) {
 8014cac:	4b58      	ldr	r3, [pc, #352]	; (8014e10 <sysinfo_cmd+0x220>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d043      	beq.n	8014d3c <sysinfo_cmd+0x14c>

    // Run time as percentage
    percTime = tasks[iTask].ulRunTimeCounter / totalRunTime;
 8014cb4:	4b54      	ldr	r3, [pc, #336]	; (8014e08 <sysinfo_cmd+0x218>)
 8014cb6:	6819      	ldr	r1, [r3, #0]
 8014cb8:	4b58      	ldr	r3, [pc, #352]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014cba:	681a      	ldr	r2, [r3, #0]
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	00db      	lsls	r3, r3, #3
 8014cc0:	4413      	add	r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	440b      	add	r3, r1
 8014cc6:	699a      	ldr	r2, [r3, #24]
 8014cc8:	4b51      	ldr	r3, [pc, #324]	; (8014e10 <sysinfo_cmd+0x220>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014cd0:	64fb      	str	r3, [r7, #76]	; 0x4c

    // Write the line
    sprintf( pcWriteBuffer, "%-16s%10lu%6lu%%%10d B\r\n", tasks[iTask].pcTaskName, tasks[iTask].ulRunTimeCounter, percTime, tasks[iTask].usStackHighWaterMark
 8014cd2:	4b4d      	ldr	r3, [pc, #308]	; (8014e08 <sysinfo_cmd+0x218>)
 8014cd4:	6819      	ldr	r1, [r3, #0]
 8014cd6:	4b51      	ldr	r3, [pc, #324]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	4413      	add	r3, r2
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	440b      	add	r3, r1
 8014ce4:	6858      	ldr	r0, [r3, #4]
 8014ce6:	4b48      	ldr	r3, [pc, #288]	; (8014e08 <sysinfo_cmd+0x218>)
 8014ce8:	6819      	ldr	r1, [r3, #0]
 8014cea:	4b4c      	ldr	r3, [pc, #304]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	4613      	mov	r3, r2
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	4413      	add	r3, r2
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	440b      	add	r3, r1
 8014cf8:	699c      	ldr	r4, [r3, #24]
 8014cfa:	4b43      	ldr	r3, [pc, #268]	; (8014e08 <sysinfo_cmd+0x218>)
 8014cfc:	6819      	ldr	r1, [r3, #0]
 8014cfe:	4b47      	ldr	r3, [pc, #284]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	4613      	mov	r3, r2
 8014d04:	00db      	lsls	r3, r3, #3
 8014d06:	4413      	add	r3, r2
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	440b      	add	r3, r1
 8014d0c:	8c1b      	ldrh	r3, [r3, #32]
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	4623      	mov	r3, r4
 8014d18:	4602      	mov	r2, r0
 8014d1a:	4941      	ldr	r1, [pc, #260]	; (8014e20 <sysinfo_cmd+0x230>)
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f004 fcb9 	bl	8019694 <siprintf>
        * 4 );

    // Increase i for next output line and return pdTRUE to indicate remaining tasks
    iTask += 1;
 8014d22:	4b3e      	ldr	r3, [pc, #248]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	3301      	adds	r3, #1
 8014d28:	4a3c      	ldr	r2, [pc, #240]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014d2a:	6013      	str	r3, [r2, #0]
    if ( iTask < nTasks ) return pdTRUE;
 8014d2c:	4b3b      	ldr	r3, [pc, #236]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	4b34      	ldr	r3, [pc, #208]	; (8014e04 <sysinfo_cmd+0x214>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d201      	bcs.n	8014d3c <sysinfo_cmd+0x14c>
 8014d38:	2301      	movs	r3, #1
 8014d3a:	e05f      	b.n	8014dfc <sysinfo_cmd+0x20c>
  }

  // Get free heap size
  size_t freeHeap = xPortGetFreeHeapSize();
 8014d3c:	f7ff fb2a 	bl	8014394 <xPortGetFreeHeapSize>
 8014d40:	64b8      	str	r0, [r7, #72]	; 0x48
  size_t minHeap = xPortGetMinimumEverFreeHeapSize();
 8014d42:	f7ff fb33 	bl	80143ac <xPortGetMinimumEverFreeHeapSize>
 8014d46:	6478      	str	r0, [r7, #68]	; 0x44

  // Report heap sizes
  char hlp[50];
  strcat( pcWriteBuffer, "---------------------------------------------\r\n" );
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f7eb fa51 	bl	80001f0 <strlen>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	461a      	mov	r2, r3
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	4413      	add	r3, r2
 8014d56:	4a33      	ldr	r2, [pc, #204]	; (8014e24 <sysinfo_cmd+0x234>)
 8014d58:	4614      	mov	r4, r2
 8014d5a:	469c      	mov	ip, r3
 8014d5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8014d60:	4665      	mov	r5, ip
 8014d62:	4626      	mov	r6, r4
 8014d64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014d66:	6028      	str	r0, [r5, #0]
 8014d68:	6069      	str	r1, [r5, #4]
 8014d6a:	60aa      	str	r2, [r5, #8]
 8014d6c:	60eb      	str	r3, [r5, #12]
 8014d6e:	3410      	adds	r4, #16
 8014d70:	f10c 0c10 	add.w	ip, ip, #16
 8014d74:	4574      	cmp	r4, lr
 8014d76:	d1f3      	bne.n	8014d60 <sysinfo_cmd+0x170>
  sprintf( hlp, "Free heap         %10d B\r\n", freeHeap );
 8014d78:	f107 0310 	add.w	r3, r7, #16
 8014d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d7e:	492a      	ldr	r1, [pc, #168]	; (8014e28 <sysinfo_cmd+0x238>)
 8014d80:	4618      	mov	r0, r3
 8014d82:	f004 fc87 	bl	8019694 <siprintf>
  strcat( pcWriteBuffer, hlp );
 8014d86:	f107 0310 	add.w	r3, r7, #16
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	68f8      	ldr	r0, [r7, #12]
 8014d8e:	f004 fca1 	bl	80196d4 <strcat>
  sprintf( hlp, "Minimum free heap %10d B\r\n", minHeap );
 8014d92:	f107 0310 	add.w	r3, r7, #16
 8014d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d98:	4924      	ldr	r1, [pc, #144]	; (8014e2c <sysinfo_cmd+0x23c>)
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f004 fc7a 	bl	8019694 <siprintf>
  strcat( pcWriteBuffer, hlp );
 8014da0:	f107 0310 	add.w	r3, r7, #16
 8014da4:	4619      	mov	r1, r3
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f004 fc94 	bl	80196d4 <strcat>
  strcat( pcWriteBuffer, "---------------------------------------------\r\n\r\n" );
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	f7eb fa1f 	bl	80001f0 <strlen>
 8014db2:	4603      	mov	r3, r0
 8014db4:	461a      	mov	r2, r3
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	4413      	add	r3, r2
 8014dba:	4a1d      	ldr	r2, [pc, #116]	; (8014e30 <sysinfo_cmd+0x240>)
 8014dbc:	4614      	mov	r4, r2
 8014dbe:	469c      	mov	ip, r3
 8014dc0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8014dc4:	4665      	mov	r5, ip
 8014dc6:	4626      	mov	r6, r4
 8014dc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014dca:	6028      	str	r0, [r5, #0]
 8014dcc:	6069      	str	r1, [r5, #4]
 8014dce:	60aa      	str	r2, [r5, #8]
 8014dd0:	60eb      	str	r3, [r5, #12]
 8014dd2:	3410      	adds	r4, #16
 8014dd4:	f10c 0c10 	add.w	ip, ip, #16
 8014dd8:	4574      	cmp	r4, lr
 8014dda:	d1f3      	bne.n	8014dc4 <sysinfo_cmd+0x1d4>
 8014ddc:	4662      	mov	r2, ip
 8014dde:	4623      	mov	r3, r4
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	8013      	strh	r3, [r2, #0]

  // Last task, free memory, reset counter for new command
  vPortFree( tasks );
 8014de4:	4b08      	ldr	r3, [pc, #32]	; (8014e08 <sysinfo_cmd+0x218>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7ff fa79 	bl	80142e0 <vPortFree>
  nTasks = 0;
 8014dee:	4b05      	ldr	r3, [pc, #20]	; (8014e04 <sysinfo_cmd+0x214>)
 8014df0:	2200      	movs	r2, #0
 8014df2:	601a      	str	r2, [r3, #0]
  iTask = 0;
 8014df4:	4b09      	ldr	r3, [pc, #36]	; (8014e1c <sysinfo_cmd+0x22c>)
 8014df6:	2200      	movs	r2, #0
 8014df8:	601a      	str	r2, [r3, #0]

  // Return
  return pdFALSE;
 8014dfa:	2300      	movs	r3, #0
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3754      	adds	r7, #84	; 0x54
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e04:	200323a0 	.word	0x200323a0
 8014e08:	200323a4 	.word	0x200323a4
 8014e0c:	0801a2c0 	.word	0x0801a2c0
 8014e10:	200323a8 	.word	0x200323a8
 8014e14:	51eb851f 	.word	0x51eb851f
 8014e18:	0801a2f0 	.word	0x0801a2f0
 8014e1c:	200323ac 	.word	0x200323ac
 8014e20:	0801a350 	.word	0x0801a350
 8014e24:	0801a36c 	.word	0x0801a36c
 8014e28:	0801a39c 	.word	0x0801a39c
 8014e2c:	0801a3b8 	.word	0x0801a3b8
 8014e30:	0801a3d4 	.word	0x0801a3d4

08014e34 <startmsc_cmd>:
 * @brief  Command: startmsc
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t startmsc_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2200      	movs	r2, #0
 8014e44:	701a      	strb	r2, [r3, #0]

  start_msd();
 8014e46:	f000 fbcf 	bl	80155e8 <start_msd>

  // Additional lines to write
  return pdFALSE;
 8014e4a:	2300      	movs	r3, #0
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <stopmsc_cmd>:
 * @brief  Command: stopmsc
 * @param  pcWriteBuffer
 * @retval None
 * ==================================================================== */
static BaseType_t stopmsc_cmd( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	607a      	str	r2, [r7, #4]
  // Clear output buffer
  *pcWriteBuffer = 0x00;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2200      	movs	r2, #0
 8014e64:	701a      	strb	r2, [r3, #0]

  stop_msd();
 8014e66:	f000 fbe1 	bl	801562c <stop_msd>

  // Additional lines to write
  return pdFALSE;
 8014e6a:	2300      	movs	r3, #0
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3710      	adds	r7, #16
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8014e7a:	4b22      	ldr	r3, [pc, #136]	; (8014f04 <MX_DMA_Init+0x90>)
 8014e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e7e:	4a21      	ldr	r2, [pc, #132]	; (8014f04 <MX_DMA_Init+0x90>)
 8014e80:	f043 0302 	orr.w	r3, r3, #2
 8014e84:	6493      	str	r3, [r2, #72]	; 0x48
 8014e86:	4b1f      	ldr	r3, [pc, #124]	; (8014f04 <MX_DMA_Init+0x90>)
 8014e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e8a:	f003 0302 	and.w	r3, r3, #2
 8014e8e:	607b      	str	r3, [r7, #4]
 8014e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8014e92:	4b1c      	ldr	r3, [pc, #112]	; (8014f04 <MX_DMA_Init+0x90>)
 8014e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e96:	4a1b      	ldr	r2, [pc, #108]	; (8014f04 <MX_DMA_Init+0x90>)
 8014e98:	f043 0301 	orr.w	r3, r3, #1
 8014e9c:	6493      	str	r3, [r2, #72]	; 0x48
 8014e9e:	4b19      	ldr	r3, [pc, #100]	; (8014f04 <MX_DMA_Init+0x90>)
 8014ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ea2:	f003 0301 	and.w	r3, r3, #1
 8014ea6:	603b      	str	r3, [r7, #0]
 8014ea8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8014eaa:	2200      	movs	r2, #0
 8014eac:	2105      	movs	r1, #5
 8014eae:	200c      	movs	r0, #12
 8014eb0:	f7eb fcac 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8014eb4:	200c      	movs	r0, #12
 8014eb6:	f7eb fcc5 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8014eba:	2200      	movs	r2, #0
 8014ebc:	2105      	movs	r1, #5
 8014ebe:	200d      	movs	r0, #13
 8014ec0:	f7eb fca4 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8014ec4:	200d      	movs	r0, #13
 8014ec6:	f7eb fcbd 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8014eca:	2200      	movs	r2, #0
 8014ecc:	2105      	movs	r1, #5
 8014ece:	203b      	movs	r0, #59	; 0x3b
 8014ed0:	f7eb fc9c 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8014ed4:	203b      	movs	r0, #59	; 0x3b
 8014ed6:	f7eb fcb5 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8014eda:	2200      	movs	r2, #0
 8014edc:	2105      	movs	r1, #5
 8014ede:	2044      	movs	r0, #68	; 0x44
 8014ee0:	f7eb fc94 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8014ee4:	2044      	movs	r0, #68	; 0x44
 8014ee6:	f7eb fcad 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8014eea:	2200      	movs	r2, #0
 8014eec:	2105      	movs	r1, #5
 8014eee:	2045      	movs	r0, #69	; 0x45
 8014ef0:	f7eb fc8c 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8014ef4:	2045      	movs	r0, #69	; 0x45
 8014ef6:	f7eb fca5 	bl	8000844 <HAL_NVIC_EnableIRQ>

}
 8014efa:	bf00      	nop
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	40021000 	.word	0x40021000

08014f08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014f0c:	4904      	ldr	r1, [pc, #16]	; (8014f20 <MX_FATFS_Init+0x18>)
 8014f0e:	4805      	ldr	r0, [pc, #20]	; (8014f24 <MX_FATFS_Init+0x1c>)
 8014f10:	f7fb f92e 	bl	8010170 <FATFS_LinkDriver>
 8014f14:	4603      	mov	r3, r0
 8014f16:	461a      	mov	r2, r3
 8014f18:	4b03      	ldr	r3, [pc, #12]	; (8014f28 <MX_FATFS_Init+0x20>)
 8014f1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8014f1c:	bf00      	nop
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	200323b4 	.word	0x200323b4
 8014f24:	0801ac04 	.word	0x0801ac04
 8014f28:	200323b0 	.word	0x200323b0

08014f2c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014f30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014f42:	2301      	movs	r3, #1
 8014f44:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014f46:	2108      	movs	r1, #8
 8014f48:	4806      	ldr	r0, [pc, #24]	; (8014f64 <BSP_PlatformIsDetected+0x28>)
 8014f4a:	f7ec fa2f 	bl	80013ac <HAL_GPIO_ReadPin>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d001      	beq.n	8014f58 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014f54:	2300      	movs	r3, #0
 8014f56:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8014f58:	79fb      	ldrb	r3, [r7, #7]
}  
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3708      	adds	r7, #8
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	48001400 	.word	0x48001400

08014f68 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	af00      	add	r7, sp, #0

}
 8014f6c:	bf00      	nop
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr

08014f76 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8014f76:	b480      	push	{r7}
 8014f78:	af00      	add	r7, sp, #0
return 0;
 8014f7a:	2300      	movs	r3, #0
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr

08014f86 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8014f86:	b480      	push	{r7}
 8014f88:	b083      	sub	sp, #12
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8014f90:	bf00      	nop
 8014f92:	370c      	adds	r7, #12
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr

08014f9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8014f9c:	b5b0      	push	{r4, r5, r7, lr}
 8014f9e:	b086      	sub	sp, #24
 8014fa0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8014fa2:	4b09      	ldr	r3, [pc, #36]	; (8014fc8 <MX_FREERTOS_Init+0x2c>)
 8014fa4:	1d3c      	adds	r4, r7, #4
 8014fa6:	461d      	mov	r5, r3
 8014fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fac:	682b      	ldr	r3, [r5, #0]
 8014fae:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8014fb0:	1d3b      	adds	r3, r7, #4
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7fb fa8e 	bl	80104d6 <osThreadCreate>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	4a03      	ldr	r2, [pc, #12]	; (8014fcc <MX_FREERTOS_Init+0x30>)
 8014fbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8014fc0:	bf00      	nop
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8014fc8:	0801a414 	.word	0x0801a414
 8014fcc:	200325f0 	.word	0x200325f0

08014fd0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
    

  /* USER CODE BEGIN StartDefaultTask */

  // Start main app
  mainApp_start();
 8014fd8:	f000 f9aa 	bl	8015330 <mainApp_start>

  // Delete task
  vTaskDelete( NULL );
 8014fdc:	2000      	movs	r0, #0
 8014fde:	f7fd fab3 	bl	8012548 <vTaskDelete>
  /* USER CODE END StartDefaultTask */
}
 8014fe2:	bf00      	nop
 8014fe4:	3708      	adds	r7, #8
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
	...

08014fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b08c      	sub	sp, #48	; 0x30
 8014ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ff2:	f107 031c 	add.w	r3, r7, #28
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	601a      	str	r2, [r3, #0]
 8014ffa:	605a      	str	r2, [r3, #4]
 8014ffc:	609a      	str	r2, [r3, #8]
 8014ffe:	60da      	str	r2, [r3, #12]
 8015000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015002:	4b56      	ldr	r3, [pc, #344]	; (801515c <MX_GPIO_Init+0x170>)
 8015004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015006:	4a55      	ldr	r2, [pc, #340]	; (801515c <MX_GPIO_Init+0x170>)
 8015008:	f043 0304 	orr.w	r3, r3, #4
 801500c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801500e:	4b53      	ldr	r3, [pc, #332]	; (801515c <MX_GPIO_Init+0x170>)
 8015010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015012:	f003 0304 	and.w	r3, r3, #4
 8015016:	61bb      	str	r3, [r7, #24]
 8015018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801501a:	4b50      	ldr	r3, [pc, #320]	; (801515c <MX_GPIO_Init+0x170>)
 801501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801501e:	4a4f      	ldr	r2, [pc, #316]	; (801515c <MX_GPIO_Init+0x170>)
 8015020:	f043 0320 	orr.w	r3, r3, #32
 8015024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015026:	4b4d      	ldr	r3, [pc, #308]	; (801515c <MX_GPIO_Init+0x170>)
 8015028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801502a:	f003 0320 	and.w	r3, r3, #32
 801502e:	617b      	str	r3, [r7, #20]
 8015030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015032:	4b4a      	ldr	r3, [pc, #296]	; (801515c <MX_GPIO_Init+0x170>)
 8015034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015036:	4a49      	ldr	r2, [pc, #292]	; (801515c <MX_GPIO_Init+0x170>)
 8015038:	f043 0302 	orr.w	r3, r3, #2
 801503c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801503e:	4b47      	ldr	r3, [pc, #284]	; (801515c <MX_GPIO_Init+0x170>)
 8015040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015042:	f003 0302 	and.w	r3, r3, #2
 8015046:	613b      	str	r3, [r7, #16]
 8015048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801504a:	4b44      	ldr	r3, [pc, #272]	; (801515c <MX_GPIO_Init+0x170>)
 801504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801504e:	4a43      	ldr	r2, [pc, #268]	; (801515c <MX_GPIO_Init+0x170>)
 8015050:	f043 0308 	orr.w	r3, r3, #8
 8015054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015056:	4b41      	ldr	r3, [pc, #260]	; (801515c <MX_GPIO_Init+0x170>)
 8015058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801505a:	f003 0308 	and.w	r3, r3, #8
 801505e:	60fb      	str	r3, [r7, #12]
 8015060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8015062:	4b3e      	ldr	r3, [pc, #248]	; (801515c <MX_GPIO_Init+0x170>)
 8015064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015066:	4a3d      	ldr	r2, [pc, #244]	; (801515c <MX_GPIO_Init+0x170>)
 8015068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801506c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801506e:	4b3b      	ldr	r3, [pc, #236]	; (801515c <MX_GPIO_Init+0x170>)
 8015070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015076:	60bb      	str	r3, [r7, #8]
 8015078:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 801507a:	f7ed fb83 	bl	8002784 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801507e:	4b37      	ldr	r3, [pc, #220]	; (801515c <MX_GPIO_Init+0x170>)
 8015080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015082:	4a36      	ldr	r2, [pc, #216]	; (801515c <MX_GPIO_Init+0x170>)
 8015084:	f043 0301 	orr.w	r3, r3, #1
 8015088:	64d3      	str	r3, [r2, #76]	; 0x4c
 801508a:	4b34      	ldr	r3, [pc, #208]	; (801515c <MX_GPIO_Init+0x170>)
 801508c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801508e:	f003 0301 	and.w	r3, r3, #1
 8015092:	607b      	str	r3, [r7, #4]
 8015094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_RED_Pin|LED_NUCLEO_BLUE_Pin, GPIO_PIN_RESET);
 8015096:	2200      	movs	r2, #0
 8015098:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 801509c:	4830      	ldr	r0, [pc, #192]	; (8015160 <MX_GPIO_Init+0x174>)
 801509e:	f7ec f99d 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, GPIO_PIN_RESET);
 80150a2:	2200      	movs	r2, #0
 80150a4:	2180      	movs	r1, #128	; 0x80
 80150a6:	482f      	ldr	r0, [pc, #188]	; (8015164 <MX_GPIO_Init+0x178>)
 80150a8:	f7ec f998 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 80150ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80150b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80150b2:	4b2d      	ldr	r3, [pc, #180]	; (8015168 <MX_GPIO_Init+0x17c>)
 80150b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 80150ba:	f107 031c 	add.w	r3, r7, #28
 80150be:	4619      	mov	r1, r3
 80150c0:	4828      	ldr	r0, [pc, #160]	; (8015164 <MX_GPIO_Init+0x178>)
 80150c2:	f7eb feef 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC1_DETECT_Pin;
 80150c6:	2308      	movs	r3, #8
 80150c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80150ca:	2300      	movs	r3, #0
 80150cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80150ce:	2301      	movs	r3, #1
 80150d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDMMC1_DETECT_GPIO_Port, &GPIO_InitStruct);
 80150d2:	f107 031c 	add.w	r3, r7, #28
 80150d6:	4619      	mov	r1, r3
 80150d8:	4824      	ldr	r0, [pc, #144]	; (801516c <MX_GPIO_Init+0x180>)
 80150da:	f7eb fee3 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_NUCLEO_RED_Pin|LED_NUCLEO_BLUE_Pin;
 80150de:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80150e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80150e4:	2301      	movs	r3, #1
 80150e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150e8:	2300      	movs	r3, #0
 80150ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150ec:	2300      	movs	r3, #0
 80150ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80150f0:	f107 031c 	add.w	r3, r7, #28
 80150f4:	4619      	mov	r1, r3
 80150f6:	481a      	ldr	r0, [pc, #104]	; (8015160 <MX_GPIO_Init+0x174>)
 80150f8:	f7eb fed4 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_NUCLEO_GREEN_Pin;
 80150fc:	2380      	movs	r3, #128	; 0x80
 80150fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015100:	2301      	movs	r3, #1
 8015102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015104:	2300      	movs	r3, #0
 8015106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015108:	2300      	movs	r3, #0
 801510a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_NUCLEO_GREEN_GPIO_Port, &GPIO_InitStruct);
 801510c:	f107 031c 	add.w	r3, r7, #28
 8015110:	4619      	mov	r1, r3
 8015112:	4814      	ldr	r0, [pc, #80]	; (8015164 <MX_GPIO_Init+0x178>)
 8015114:	f7eb fec6 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_CONNECT_Pin;
 8015118:	f44f 7300 	mov.w	r3, #512	; 0x200
 801511c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801511e:	4b14      	ldr	r3, [pc, #80]	; (8015170 <MX_GPIO_Init+0x184>)
 8015120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015122:	2300      	movs	r3, #0
 8015124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_CONNECT_GPIO_Port, &GPIO_InitStruct);
 8015126:	f107 031c 	add.w	r3, r7, #28
 801512a:	4619      	mov	r1, r3
 801512c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015130:	f7eb feb8 	bl	8000ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8015134:	2200      	movs	r2, #0
 8015136:	2105      	movs	r1, #5
 8015138:	2017      	movs	r0, #23
 801513a:	f7eb fb67 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801513e:	2017      	movs	r0, #23
 8015140:	f7eb fb80 	bl	8000844 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8015144:	2200      	movs	r2, #0
 8015146:	2105      	movs	r1, #5
 8015148:	2028      	movs	r0, #40	; 0x28
 801514a:	f7eb fb5f 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801514e:	2028      	movs	r0, #40	; 0x28
 8015150:	f7eb fb78 	bl	8000844 <HAL_NVIC_EnableIRQ>

}
 8015154:	bf00      	nop
 8015156:	3730      	adds	r7, #48	; 0x30
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	40021000 	.word	0x40021000
 8015160:	48000400 	.word	0x48000400
 8015164:	48000800 	.word	0x48000800
 8015168:	10110000 	.word	0x10110000
 801516c:	48001400 	.word	0x48001400
 8015170:	10310000 	.word	0x10310000

08015174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015178:	f7eb fa14 	bl	80005a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801517c:	f000 f818 	bl	80151b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015180:	f7ff ff34 	bl	8014fec <MX_GPIO_Init>
  MX_DMA_Init();
 8015184:	f7ff fe76 	bl	8014e74 <MX_DMA_Init>
  MX_RTC_Init();
 8015188:	f000 fabc 	bl	8015704 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 801518c:	f000 fe00 	bl	8015d90 <MX_SDMMC1_SD_Init>
  MX_TIM7_Init();
 8015190:	f001 fb08 	bl	80167a4 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8015194:	f001 fba2 	bl	80168dc <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8015198:	f001 fb74 	bl	8016884 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 801519c:	f001 faae 	bl	80166fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 80151a0:	f004 f800 	bl	80191a4 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80151a4:	f7ff fefa 	bl	8014f9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80151a8:	f7fb f972 	bl	8010490 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80151ac:	e7fe      	b.n	80151ac <main+0x38>
	...

080151b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b0ba      	sub	sp, #232	; 0xe8
 80151b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80151b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80151ba:	2244      	movs	r2, #68	; 0x44
 80151bc:	2100      	movs	r1, #0
 80151be:	4618      	mov	r0, r3
 80151c0:	f004 fa60 	bl	8019684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80151c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80151c8:	2200      	movs	r2, #0
 80151ca:	601a      	str	r2, [r3, #0]
 80151cc:	605a      	str	r2, [r3, #4]
 80151ce:	609a      	str	r2, [r3, #8]
 80151d0:	60da      	str	r2, [r3, #12]
 80151d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80151d4:	1d3b      	adds	r3, r7, #4
 80151d6:	228c      	movs	r2, #140	; 0x8c
 80151d8:	2100      	movs	r1, #0
 80151da:	4618      	mov	r0, r3
 80151dc:	f004 fa52 	bl	8019684 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80151e0:	231c      	movs	r3, #28
 80151e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80151e6:	2300      	movs	r3, #0
 80151e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80151ec:	2301      	movs	r3, #1
 80151ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80151f2:	2301      	movs	r3, #1
 80151f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80151f8:	2300      	movs	r3, #0
 80151fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80151fe:	2360      	movs	r3, #96	; 0x60
 8015200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015204:	2302      	movs	r3, #2
 8015206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 801520a:	2301      	movs	r3, #1
 801520c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8015210:	2301      	movs	r3, #1
 8015212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8015216:	2328      	movs	r3, #40	; 0x28
 8015218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801521c:	2302      	movs	r3, #2
 801521e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8015222:	2302      	movs	r3, #2
 8015224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8015228:	2302      	movs	r3, #2
 801522a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801522e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015232:	4618      	mov	r0, r3
 8015234:	f7ed fab6 	bl	80027a4 <HAL_RCC_OscConfig>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	d001      	beq.n	8015242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 801523e:	f000 f862 	bl	8015306 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015242:	230f      	movs	r3, #15
 8015244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015248:	2303      	movs	r3, #3
 801524a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801524e:	2300      	movs	r3, #0
 8015250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8015254:	2300      	movs	r3, #0
 8015256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801525a:	2300      	movs	r3, #0
 801525c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8015260:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015264:	2104      	movs	r1, #4
 8015266:	4618      	mov	r0, r3
 8015268:	f7ed fe8c 	bl	8002f84 <HAL_RCC_ClockConfig>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d001      	beq.n	8015276 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8015272:	f000 f848 	bl	8015306 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8015276:	4b1b      	ldr	r3, [pc, #108]	; (80152e4 <SystemClock_Config+0x134>)
 8015278:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 801527a:	2300      	movs	r3, #0
 801527c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801527e:	2300      	movs	r3, #0
 8015280:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8015282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801528a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801528e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8015290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8015294:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8015296:	2301      	movs	r3, #1
 8015298:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801529a:	2301      	movs	r3, #1
 801529c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 801529e:	2318      	movs	r3, #24
 80152a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80152a2:	2302      	movs	r3, #2
 80152a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80152a6:	2302      	movs	r3, #2
 80152a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80152aa:	2302      	movs	r3, #2
 80152ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80152ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80152b2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80152b4:	1d3b      	adds	r3, r7, #4
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ee f89c 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 80152bc:	4603      	mov	r3, r0
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d001      	beq.n	80152c6 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80152c2:	f000 f820 	bl	8015306 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80152c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80152ca:	f7ed f9e5 	bl	8002698 <HAL_PWREx_ControlVoltageScaling>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d001      	beq.n	80152d8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80152d4:	f000 f817 	bl	8015306 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80152d8:	f7ee fb88 	bl	80039ec <HAL_RCCEx_EnableMSIPLLMode>
}
 80152dc:	bf00      	nop
 80152de:	37e8      	adds	r7, #232	; 0xe8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	000a2024 	.word	0x000a2024

080152e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152f8:	d101      	bne.n	80152fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80152fa:	f7eb f96b 	bl	80005d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80152fe:	bf00      	nop
 8015300:	3708      	adds	r7, #8
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8015306:	b480      	push	{r7}
 8015308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801530a:	bf00      	nop
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <vApplicationIdleHook>:
 * @brief  Idle Hook funktion, sleep here in idle mode
 * @param  None
 * @retval None
 * ==================================================================== */
void vApplicationIdleHook( void )
{
 8015314:	b480      	push	{r7}
 8015316:	af00      	add	r7, sp, #0
	if( MAINAPP_STATE != STATE_MSD)
 8015318:	4b04      	ldr	r3, [pc, #16]	; (801532c <vApplicationIdleHook+0x18>)
 801531a:	781b      	ldrb	r3, [r3, #0]
 801531c:	2b01      	cmp	r3, #1
 801531e:	d000      	beq.n	8015322 <vApplicationIdleHook+0xe>
		__WFI();
 8015320:	bf30      	wfi
}
 8015322:	bf00      	nop
 8015324:	46bd      	mov	sp, r7
 8015326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532a:	4770      	bx	lr
 801532c:	200325f8 	.word	0x200325f8

08015330 <mainApp_start>:
 * @brief  Initialize the main app
 * @param  None
 * @retval None
 * ==================================================================== */
void mainApp_start( void )
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af02      	add	r7, sp, #8

  BaseType_t ret;

  // Compute button double click timeout in ticks
  BUTTON_DOUBLE_TIMEOUT = pdMS_TO_TICKS( BUTTON_DOUBLE_TIMEOUT_MS );
 8015336:	4b24      	ldr	r3, [pc, #144]	; (80153c8 <mainApp_start+0x98>)
 8015338:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801533c:	601a      	str	r2, [r3, #0]

  // Create event queue
  eventQueueHandle = xQueueCreate( EVENT_QUEUE_SIZE, sizeof(event_t) );
 801533e:	2200      	movs	r2, #0
 8015340:	2101      	movs	r1, #1
 8015342:	200a      	movs	r0, #10
 8015344:	f7fb fb86 	bl	8010a54 <xQueueGenericCreate>
 8015348:	4603      	mov	r3, r0
 801534a:	4a20      	ldr	r2, [pc, #128]	; (80153cc <mainApp_start+0x9c>)
 801534c:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( eventQueueHandle, "Event queue" ); // TODO: remove for release
 801534e:	4b1f      	ldr	r3, [pc, #124]	; (80153cc <mainApp_start+0x9c>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	491f      	ldr	r1, [pc, #124]	; (80153d0 <mainApp_start+0xa0>)
 8015354:	4618      	mov	r0, r3
 8015356:	f7fc fbb5 	bl	8011ac4 <vQueueAddToRegistry>

  // Initialize all peripherals here
  terminal_init( &hlpuart1 );
 801535a:	481e      	ldr	r0, [pc, #120]	; (80153d4 <mainApp_start+0xa4>)
 801535c:	f001 f802 	bl	8016364 <terminal_init>
  button_init();
 8015360:	f7ff fb00 	bl	8014964 <button_init>
  sdcard_init();
 8015364:	f000 fbe0 	bl	8015b28 <sdcard_init>
  printHeader();
 8015368:	f000 f97a 	bl	8015660 <printHeader>
  cli_init();
 801536c:	f7ff fb9c 	bl	8014aa8 <cli_init>
  freeHeap = xPortGetFreeHeapSize();
 8015370:	f7ff f810 	bl	8014394 <xPortGetFreeHeapSize>
 8015374:	4603      	mov	r3, r0
 8015376:	4a18      	ldr	r2, [pc, #96]	; (80153d8 <mainApp_start+0xa8>)
 8015378:	6013      	str	r3, [r2, #0]

  MAINAPP_STATE = STATE_IDLE;
 801537a:	4b18      	ldr	r3, [pc, #96]	; (80153dc <mainApp_start+0xac>)
 801537c:	2200      	movs	r2, #0
 801537e:	701a      	strb	r2, [r3, #0]

  ret = xTaskCreate( blinkyLedTask, "Blinky LED task", MAINAPP_STACK_SIZE, NULL, 1, &blinkyLedTaskHandle );
 8015380:	4b17      	ldr	r3, [pc, #92]	; (80153e0 <mainApp_start+0xb0>)
 8015382:	9301      	str	r3, [sp, #4]
 8015384:	2301      	movs	r3, #1
 8015386:	9300      	str	r3, [sp, #0]
 8015388:	2300      	movs	r3, #0
 801538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801538e:	4915      	ldr	r1, [pc, #84]	; (80153e4 <mainApp_start+0xb4>)
 8015390:	4815      	ldr	r0, [pc, #84]	; (80153e8 <mainApp_start+0xb8>)
 8015392:	f7fc ff7f 	bl	8012294 <xTaskCreate>
 8015396:	6078      	str	r0, [r7, #4]
  if ( ret != pdPASS ) for ( ;; ) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b01      	cmp	r3, #1
 801539c:	d000      	beq.n	80153a0 <mainApp_start+0x70>
 801539e:	e7fe      	b.n	801539e <mainApp_start+0x6e>
  }

  // Create main app task
  ret = xTaskCreate( mainAppTask, "MainApp task", MAINAPP_STACK_SIZE, NULL, 1, &mainAppTaskHandle );
 80153a0:	4b12      	ldr	r3, [pc, #72]	; (80153ec <mainApp_start+0xbc>)
 80153a2:	9301      	str	r3, [sp, #4]
 80153a4:	2301      	movs	r3, #1
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	2300      	movs	r3, #0
 80153aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153ae:	4910      	ldr	r1, [pc, #64]	; (80153f0 <mainApp_start+0xc0>)
 80153b0:	4810      	ldr	r0, [pc, #64]	; (80153f4 <mainApp_start+0xc4>)
 80153b2:	f7fc ff6f 	bl	8012294 <xTaskCreate>
 80153b6:	6078      	str	r0, [r7, #4]
  if ( ret != pdPASS ) for ( ;; ) {
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d000      	beq.n	80153c0 <mainApp_start+0x90>
 80153be:	e7fe      	b.n	80153be <mainApp_start+0x8e>
  }



}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	200325f4 	.word	0x200325f4
 80153cc:	200325fc 	.word	0x200325fc
 80153d0:	0801a428 	.word	0x0801a428
 80153d4:	20033a70 	.word	0x20033a70
 80153d8:	20032608 	.word	0x20032608
 80153dc:	200325f8 	.word	0x200325f8
 80153e0:	20032604 	.word	0x20032604
 80153e4:	0801a434 	.word	0x0801a434
 80153e8:	080153f9 	.word	0x080153f9
 80153ec:	20032600 	.word	0x20032600
 80153f0:	0801a444 	.word	0x0801a444
 80153f4:	080154fd 	.word	0x080154fd

080153f8 <blinkyLedTask>:
 * @brief  Blinky LE task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void blinkyLedTask( void * pvParameters )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]

  if(DEVICE_STATUS.sdcard == DEVICE_OKAY){
 8015400:	4b3b      	ldr	r3, [pc, #236]	; (80154f0 <blinkyLedTask+0xf8>)
 8015402:	78db      	ldrb	r3, [r3, #3]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d14c      	bne.n	80154a2 <blinkyLedTask+0xaa>
	  for ( ;; ) {
			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , SET   );
 8015408:	2201      	movs	r2, #1
 801540a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801540e:	4839      	ldr	r0, [pc, #228]	; (80154f4 <blinkyLedTask+0xfc>)
 8015410:	f7eb ffe4 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , RESET );
 8015414:	2200      	movs	r2, #0
 8015416:	2180      	movs	r1, #128	; 0x80
 8015418:	4836      	ldr	r0, [pc, #216]	; (80154f4 <blinkyLedTask+0xfc>)
 801541a:	f7eb ffdf 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, RESET );
 801541e:	2200      	movs	r2, #0
 8015420:	2180      	movs	r1, #128	; 0x80
 8015422:	4835      	ldr	r0, [pc, #212]	; (80154f8 <blinkyLedTask+0x100>)
 8015424:	f7eb ffda 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 150 ) );
 8015428:	2096      	movs	r0, #150	; 0x96
 801542a:	f7fd f929 	bl	8012680 <vTaskDelay>

			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , RESET   );
 801542e:	2200      	movs	r2, #0
 8015430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015434:	482f      	ldr	r0, [pc, #188]	; (80154f4 <blinkyLedTask+0xfc>)
 8015436:	f7eb ffd1 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , SET   );
 801543a:	2201      	movs	r2, #1
 801543c:	2180      	movs	r1, #128	; 0x80
 801543e:	482d      	ldr	r0, [pc, #180]	; (80154f4 <blinkyLedTask+0xfc>)
 8015440:	f7eb ffcc 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, RESET   );
 8015444:	2200      	movs	r2, #0
 8015446:	2180      	movs	r1, #128	; 0x80
 8015448:	482b      	ldr	r0, [pc, #172]	; (80154f8 <blinkyLedTask+0x100>)
 801544a:	f7eb ffc7 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 150 ) );
 801544e:	2096      	movs	r0, #150	; 0x96
 8015450:	f7fd f916 	bl	8012680 <vTaskDelay>

			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , RESET   );
 8015454:	2200      	movs	r2, #0
 8015456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801545a:	4826      	ldr	r0, [pc, #152]	; (80154f4 <blinkyLedTask+0xfc>)
 801545c:	f7eb ffbe 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , RESET   );
 8015460:	2200      	movs	r2, #0
 8015462:	2180      	movs	r1, #128	; 0x80
 8015464:	4823      	ldr	r0, [pc, #140]	; (80154f4 <blinkyLedTask+0xfc>)
 8015466:	f7eb ffb9 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, SET   );
 801546a:	2201      	movs	r2, #1
 801546c:	2180      	movs	r1, #128	; 0x80
 801546e:	4822      	ldr	r0, [pc, #136]	; (80154f8 <blinkyLedTask+0x100>)
 8015470:	f7eb ffb4 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 150 ) );
 8015474:	2096      	movs	r0, #150	; 0x96
 8015476:	f7fd f903 	bl	8012680 <vTaskDelay>

			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , RESET   );
 801547a:	2200      	movs	r2, #0
 801547c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015480:	481c      	ldr	r0, [pc, #112]	; (80154f4 <blinkyLedTask+0xfc>)
 8015482:	f7eb ffab 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , SET );
 8015486:	2201      	movs	r2, #1
 8015488:	2180      	movs	r1, #128	; 0x80
 801548a:	481a      	ldr	r0, [pc, #104]	; (80154f4 <blinkyLedTask+0xfc>)
 801548c:	f7eb ffa6 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, RESET );
 8015490:	2200      	movs	r2, #0
 8015492:	2180      	movs	r1, #128	; 0x80
 8015494:	4818      	ldr	r0, [pc, #96]	; (80154f8 <blinkyLedTask+0x100>)
 8015496:	f7eb ffa1 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 150 ) );
 801549a:	2096      	movs	r0, #150	; 0x96
 801549c:	f7fd f8f0 	bl	8012680 <vTaskDelay>
			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , SET   );
 80154a0:	e7b2      	b.n	8015408 <blinkyLedTask+0x10>

		  }
  }
  else{
	  for ( ;; ) {
			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , SET   );
 80154a2:	2201      	movs	r2, #1
 80154a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80154a8:	4812      	ldr	r0, [pc, #72]	; (80154f4 <blinkyLedTask+0xfc>)
 80154aa:	f7eb ff97 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , RESET );
 80154ae:	2200      	movs	r2, #0
 80154b0:	2180      	movs	r1, #128	; 0x80
 80154b2:	4810      	ldr	r0, [pc, #64]	; (80154f4 <blinkyLedTask+0xfc>)
 80154b4:	f7eb ff92 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, RESET );
 80154b8:	2200      	movs	r2, #0
 80154ba:	2180      	movs	r1, #128	; 0x80
 80154bc:	480e      	ldr	r0, [pc, #56]	; (80154f8 <blinkyLedTask+0x100>)
 80154be:	f7eb ff8d 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 250 ) );
 80154c2:	20fa      	movs	r0, #250	; 0xfa
 80154c4:	f7fd f8dc 	bl	8012680 <vTaskDelay>

			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , RESET   );
 80154c8:	2200      	movs	r2, #0
 80154ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80154ce:	4809      	ldr	r0, [pc, #36]	; (80154f4 <blinkyLedTask+0xfc>)
 80154d0:	f7eb ff84 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_BLUE_GPIO_Port , LED_NUCLEO_BLUE_Pin , RESET   );
 80154d4:	2200      	movs	r2, #0
 80154d6:	2180      	movs	r1, #128	; 0x80
 80154d8:	4806      	ldr	r0, [pc, #24]	; (80154f4 <blinkyLedTask+0xfc>)
 80154da:	f7eb ff7f 	bl	80013dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_NUCLEO_GREEN_GPIO_Port, LED_NUCLEO_GREEN_Pin, RESET   );
 80154de:	2200      	movs	r2, #0
 80154e0:	2180      	movs	r1, #128	; 0x80
 80154e2:	4805      	ldr	r0, [pc, #20]	; (80154f8 <blinkyLedTask+0x100>)
 80154e4:	f7eb ff7a 	bl	80013dc <HAL_GPIO_WritePin>
			vTaskDelay( pdMS_TO_TICKS( 250 ) );
 80154e8:	20fa      	movs	r0, #250	; 0xfa
 80154ea:	f7fd f8c9 	bl	8012680 <vTaskDelay>
			HAL_GPIO_WritePin(LED_NUCLEO_RED_GPIO_Port  , LED_NUCLEO_RED_Pin  , SET   );
 80154ee:	e7d8      	b.n	80154a2 <blinkyLedTask+0xaa>
 80154f0:	2003260c 	.word	0x2003260c
 80154f4:	48000400 	.word	0x48000400
 80154f8:	48000800 	.word	0x48000800

080154fc <mainAppTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void mainAppTask( void * pvParameters )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {

    // Wait for a new event (no timeout here)
    xQueueReceive( eventQueueHandle, &event, portMAX_DELAY );
 8015504:	4b34      	ldr	r3, [pc, #208]	; (80155d8 <mainAppTask+0xdc>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	f107 010b 	add.w	r1, r7, #11
 801550c:	f04f 32ff 	mov.w	r2, #4294967295
 8015510:	4618      	mov	r0, r3
 8015512:	f7fb fda9 	bl	8011068 <xQueueReceive>

    // Check for button double click (wait for a new EVENT_BUTTON_SHORT)
    if ( event == EVENT_BUTTON_SHORT ) {
 8015516:	7afb      	ldrb	r3, [r7, #11]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d11a      	bne.n	8015552 <mainAppTask+0x56>
		  BaseType_t ret = xQueuePeek( eventQueueHandle, &event2, BUTTON_DOUBLE_TIMEOUT );
 801551c:	4b2e      	ldr	r3, [pc, #184]	; (80155d8 <mainAppTask+0xdc>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4a2e      	ldr	r2, [pc, #184]	; (80155dc <mainAppTask+0xe0>)
 8015522:	6812      	ldr	r2, [r2, #0]
 8015524:	f107 010a 	add.w	r1, r7, #10
 8015528:	4618      	mov	r0, r3
 801552a:	f7fb ffe9 	bl	8011500 <xQueuePeek>
 801552e:	60f8      	str	r0, [r7, #12]
		  if ( ret == pdTRUE && event2 == EVENT_BUTTON_SHORT ) {
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d10d      	bne.n	8015552 <mainAppTask+0x56>
 8015536:	7abb      	ldrb	r3, [r7, #10]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10a      	bne.n	8015552 <mainAppTask+0x56>
			xQueueReceive( eventQueueHandle, &event2, portMAX_DELAY ); // Remove second press from queue
 801553c:	4b26      	ldr	r3, [pc, #152]	; (80155d8 <mainAppTask+0xdc>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f107 010a 	add.w	r1, r7, #10
 8015544:	f04f 32ff 	mov.w	r2, #4294967295
 8015548:	4618      	mov	r0, r3
 801554a:	f7fb fd8d 	bl	8011068 <xQueueReceive>
			event = EVENT_BUTTON_DOUBLE;
 801554e:	2303      	movs	r3, #3
 8015550:	72fb      	strb	r3, [r7, #11]
		  }
    }

    // maybe do something here
    if ( event == EVENT_BUTTON_LONG ) {
 8015552:	7afb      	ldrb	r3, [r7, #11]
 8015554:	2b02      	cmp	r3, #2
 8015556:	d101      	bne.n	801555c <mainAppTask+0x60>
		  //TODO: maybe do something here
    	  __NOP();
 8015558:	bf00      	nop
		  continue;
 801555a:	e03b      	b.n	80155d4 <mainAppTask+0xd8>
    }

    // maybe do something here
    if (event == EVENT_BUTTON_DOUBLE) {
 801555c:	7afb      	ldrb	r3, [r7, #11]
 801555e:	2b03      	cmp	r3, #3
 8015560:	d101      	bne.n	8015566 <mainAppTask+0x6a>
		  //TODO: maybe do something here
    	  __NOP();
 8015562:	bf00      	nop
		  continue;
 8015564:	e036      	b.n	80155d4 <mainAppTask+0xd8>
    }


    // Update USB connection status
    if ( HAL_GPIO_ReadPin( USB_CONNECT_GPIO_Port, USB_CONNECT_Pin ) == GPIO_PIN_SET )
 8015566:	f44f 7100 	mov.w	r1, #512	; 0x200
 801556a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801556e:	f7eb ff1d 	bl	80013ac <HAL_GPIO_ReadPin>
 8015572:	4603      	mov	r3, r0
 8015574:	2b01      	cmp	r3, #1
 8015576:	d103      	bne.n	8015580 <mainAppTask+0x84>
    	USB_STATUS = USB_CONNECTED;
 8015578:	4b19      	ldr	r3, [pc, #100]	; (80155e0 <mainAppTask+0xe4>)
 801557a:	2200      	movs	r2, #0
 801557c:	701a      	strb	r2, [r3, #0]
 801557e:	e002      	b.n	8015586 <mainAppTask+0x8a>
    else
    	USB_STATUS = USB_NOT_CONNECTED;
 8015580:	4b17      	ldr	r3, [pc, #92]	; (80155e0 <mainAppTask+0xe4>)
 8015582:	2201      	movs	r2, #1
 8015584:	701a      	strb	r2, [r3, #0]


    // ==========================================================================
    // Handle events depending on state
    // ==========================================================================
    switch ( MAINAPP_STATE ) {
 8015586:	4b17      	ldr	r3, [pc, #92]	; (80155e4 <mainAppTask+0xe8>)
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d002      	beq.n	8015594 <mainAppTask+0x98>
 801558e:	2b01      	cmp	r3, #1
 8015590:	d00e      	beq.n	80155b0 <mainAppTask+0xb4>
			  stop_msd();

		  break;

		default:
		  break;
 8015592:	e01f      	b.n	80155d4 <mainAppTask+0xd8>
		  if ( event == EVENT_BUTTON_SHORT && USB_STATUS == USB_CONNECTED )
 8015594:	7afb      	ldrb	r3, [r7, #11]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d105      	bne.n	80155a6 <mainAppTask+0xaa>
 801559a:	4b11      	ldr	r3, [pc, #68]	; (80155e0 <mainAppTask+0xe4>)
 801559c:	781b      	ldrb	r3, [r3, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <mainAppTask+0xaa>
			  start_msd();
 80155a2:	f000 f821 	bl	80155e8 <start_msd>
		  if ( event == EVENT_BUTTON_MEDIUM )
 80155a6:	7afb      	ldrb	r3, [r7, #11]
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	d110      	bne.n	80155ce <mainAppTask+0xd2>
			  __NOP();
 80155ac:	bf00      	nop
		  break;
 80155ae:	e00e      	b.n	80155ce <mainAppTask+0xd2>
		  if ( event == EVENT_BUTTON_SHORT )
 80155b0:	7afb      	ldrb	r3, [r7, #11]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <mainAppTask+0xbe>
			  stop_msd();
 80155b6:	f000 f839 	bl	801562c <stop_msd>
		  if ( event == EVENT_USB_CONNECTION && USB_STATUS == USB_NOT_CONNECTED )
 80155ba:	7afb      	ldrb	r3, [r7, #11]
 80155bc:	2b04      	cmp	r3, #4
 80155be:	d108      	bne.n	80155d2 <mainAppTask+0xd6>
 80155c0:	4b07      	ldr	r3, [pc, #28]	; (80155e0 <mainAppTask+0xe4>)
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	2b01      	cmp	r3, #1
 80155c6:	d104      	bne.n	80155d2 <mainAppTask+0xd6>
			  stop_msd();
 80155c8:	f000 f830 	bl	801562c <stop_msd>
		  break;
 80155cc:	e001      	b.n	80155d2 <mainAppTask+0xd6>
		  break;
 80155ce:	bf00      	nop
 80155d0:	e798      	b.n	8015504 <mainAppTask+0x8>
		  break;
 80155d2:	bf00      	nop
    xQueueReceive( eventQueueHandle, &event, portMAX_DELAY );
 80155d4:	e796      	b.n	8015504 <mainAppTask+0x8>
 80155d6:	bf00      	nop
 80155d8:	200325fc 	.word	0x200325fc
 80155dc:	200325f4 	.word	0x200325f4
 80155e0:	20032610 	.word	0x20032610
 80155e4:	200325f8 	.word	0x200325f8

080155e8 <start_msd>:
 * @brief  Start MSD mode
 * @param  None
 * @retval None
 * ==================================================================== */
void start_msd( void )
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	af00      	add	r7, sp, #0

  if (( (MAINAPP_STATE == STATE_IDLE)) && USB_STATUS == USB_CONNECTED ){
 80155ec:	4b0c      	ldr	r3, [pc, #48]	; (8015620 <start_msd+0x38>)
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d10c      	bne.n	801560e <start_msd+0x26>
 80155f4:	4b0b      	ldr	r3, [pc, #44]	; (8015624 <start_msd+0x3c>)
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d108      	bne.n	801560e <start_msd+0x26>
	  MX_USB_DEVICE_Init();
 80155fc:	f001 faf4 	bl	8016be8 <MX_USB_DEVICE_Init>
	  to_terminal("> USB Mass Storage mode, please wait a bit...\r\n");
 8015600:	4809      	ldr	r0, [pc, #36]	; (8015628 <start_msd+0x40>)
 8015602:	f001 f85f 	bl	80166c4 <to_terminal>
	  MAINAPP_STATE = STATE_MSD;
 8015606:	4b06      	ldr	r3, [pc, #24]	; (8015620 <start_msd+0x38>)
 8015608:	2201      	movs	r2, #1
 801560a:	701a      	strb	r2, [r3, #0]
		  __NOP(); //to_terminal("> USB Not Connected\r\n\r\n" );
	  else{
		  __NOP();
		  }
	  }
}
 801560c:	e006      	b.n	801561c <start_msd+0x34>
	  if ( USB_STATUS != USB_CONNECTED )
 801560e:	4b05      	ldr	r3, [pc, #20]	; (8015624 <start_msd+0x3c>)
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d001      	beq.n	801561a <start_msd+0x32>
		  __NOP(); //to_terminal("> USB Not Connected\r\n\r\n" );
 8015616:	bf00      	nop
}
 8015618:	e000      	b.n	801561c <start_msd+0x34>
		  __NOP();
 801561a:	bf00      	nop
}
 801561c:	bf00      	nop
 801561e:	bd80      	pop	{r7, pc}
 8015620:	200325f8 	.word	0x200325f8
 8015624:	20032610 	.word	0x20032610
 8015628:	0801a454 	.word	0x0801a454

0801562c <stop_msd>:
 * @brief  Stop MSD mode
 * @param  None
 * @retval None
 * ==================================================================== */
void stop_msd( void )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	af00      	add	r7, sp, #0

  if ( MAINAPP_STATE == STATE_MSD){
 8015630:	4b08      	ldr	r3, [pc, #32]	; (8015654 <stop_msd+0x28>)
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	2b01      	cmp	r3, #1
 8015636:	d108      	bne.n	801564a <stop_msd+0x1e>
	  MX_USB_DEVICE_DeInit();
 8015638:	f001 fac0 	bl	8016bbc <MX_USB_DEVICE_DeInit>
	  MAINAPP_STATE = STATE_IDLE;
 801563c:	4b05      	ldr	r3, [pc, #20]	; (8015654 <stop_msd+0x28>)
 801563e:	2200      	movs	r2, #0
 8015640:	701a      	strb	r2, [r3, #0]
	  to_terminal("> USB Mass Storage disabled\r\n");
 8015642:	4805      	ldr	r0, [pc, #20]	; (8015658 <stop_msd+0x2c>)
 8015644:	f001 f83e 	bl	80166c4 <to_terminal>
  	  }
  else
	  to_terminal("> USB Mass Storage was not enabled\r\n");

}
 8015648:	e002      	b.n	8015650 <stop_msd+0x24>
	  to_terminal("> USB Mass Storage was not enabled\r\n");
 801564a:	4804      	ldr	r0, [pc, #16]	; (801565c <stop_msd+0x30>)
 801564c:	f001 f83a 	bl	80166c4 <to_terminal>
}
 8015650:	bf00      	nop
 8015652:	bd80      	pop	{r7, pc}
 8015654:	200325f8 	.word	0x200325f8
 8015658:	0801a484 	.word	0x0801a484
 801565c:	0801a4a4 	.word	0x0801a4a4

08015660 <printHeader>:
/* ====================================================================
 * @brief  Print HEader
 * @param  None
 * @retval None
 * ==================================================================== */
void printHeader(){
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0

    to_terminal("\r\n\r\n");
 8015664:	481b      	ldr	r0, [pc, #108]	; (80156d4 <printHeader+0x74>)
 8015666:	f001 f82d 	bl	80166c4 <to_terminal>
	to_terminal(" ------------------------------------\r\n");
 801566a:	481b      	ldr	r0, [pc, #108]	; (80156d8 <printHeader+0x78>)
 801566c:	f001 f82a 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 8015670:	481a      	ldr	r0, [pc, #104]	; (80156dc <printHeader+0x7c>)
 8015672:	f001 f827 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 8015676:	4819      	ldr	r0, [pc, #100]	; (80156dc <printHeader+0x7c>)
 8015678:	f001 f824 	bl	80166c4 <to_terminal>
	to_terminal("  STM32496ZG Nucleo Board\r\n");
 801567c:	4818      	ldr	r0, [pc, #96]	; (80156e0 <printHeader+0x80>)
 801567e:	f001 f821 	bl	80166c4 <to_terminal>
	to_terminal("     - RTOS\r\n");
 8015682:	4818      	ldr	r0, [pc, #96]	; (80156e4 <printHeader+0x84>)
 8015684:	f001 f81e 	bl	80166c4 <to_terminal>
	to_terminal("     - UART DMA\r\n");
 8015688:	4817      	ldr	r0, [pc, #92]	; (80156e8 <printHeader+0x88>)
 801568a:	f001 f81b 	bl	80166c4 <to_terminal>
	to_terminal("     - DMA SDMMC\r\n");
 801568e:	4817      	ldr	r0, [pc, #92]	; (80156ec <printHeader+0x8c>)
 8015690:	f001 f818 	bl	80166c4 <to_terminal>
	to_terminal("     - CLI terminal\r\n");
 8015694:	4816      	ldr	r0, [pc, #88]	; (80156f0 <printHeader+0x90>)
 8015696:	f001 f815 	bl	80166c4 <to_terminal>
	to_terminal("     - Segger System Vie\r\n");
 801569a:	4816      	ldr	r0, [pc, #88]	; (80156f4 <printHeader+0x94>)
 801569c:	f001 f812 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 80156a0:	480e      	ldr	r0, [pc, #56]	; (80156dc <printHeader+0x7c>)
 80156a2:	f001 f80f 	bl	80166c4 <to_terminal>
	to_terminal("  Created by:\r\n");
 80156a6:	4814      	ldr	r0, [pc, #80]	; (80156f8 <printHeader+0x98>)
 80156a8:	f001 f80c 	bl	80166c4 <to_terminal>
	to_terminal("     Alexander Wolf\r\n");
 80156ac:	4813      	ldr	r0, [pc, #76]	; (80156fc <printHeader+0x9c>)
 80156ae:	f001 f809 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 80156b2:	480a      	ldr	r0, [pc, #40]	; (80156dc <printHeader+0x7c>)
 80156b4:	f001 f806 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 80156b8:	4808      	ldr	r0, [pc, #32]	; (80156dc <printHeader+0x7c>)
 80156ba:	f001 f803 	bl	80166c4 <to_terminal>
	to_terminal(" ------------------------------------\r\n");
 80156be:	4806      	ldr	r0, [pc, #24]	; (80156d8 <printHeader+0x78>)
 80156c0:	f001 f800 	bl	80166c4 <to_terminal>
	to_terminal("\r\n");
 80156c4:	4805      	ldr	r0, [pc, #20]	; (80156dc <printHeader+0x7c>)
 80156c6:	f000 fffd 	bl	80166c4 <to_terminal>
	to_terminal("> ");
 80156ca:	480d      	ldr	r0, [pc, #52]	; (8015700 <printHeader+0xa0>)
 80156cc:	f000 fffa 	bl	80166c4 <to_terminal>

}
 80156d0:	bf00      	nop
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	0801a4cc 	.word	0x0801a4cc
 80156d8:	0801a4d4 	.word	0x0801a4d4
 80156dc:	0801a4fc 	.word	0x0801a4fc
 80156e0:	0801a500 	.word	0x0801a500
 80156e4:	0801a51c 	.word	0x0801a51c
 80156e8:	0801a52c 	.word	0x0801a52c
 80156ec:	0801a540 	.word	0x0801a540
 80156f0:	0801a554 	.word	0x0801a554
 80156f4:	0801a56c 	.word	0x0801a56c
 80156f8:	0801a588 	.word	0x0801a588
 80156fc:	0801a598 	.word	0x0801a598
 8015700:	0801a5b0 	.word	0x0801a5b0

08015704 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b090      	sub	sp, #64	; 0x40
 8015708:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 801570a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801570e:	2200      	movs	r2, #0
 8015710:	601a      	str	r2, [r3, #0]
 8015712:	605a      	str	r2, [r3, #4]
 8015714:	609a      	str	r2, [r3, #8]
 8015716:	60da      	str	r2, [r3, #12]
 8015718:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 801571a:	2300      	movs	r3, #0
 801571c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 801571e:	463b      	mov	r3, r7
 8015720:	2228      	movs	r2, #40	; 0x28
 8015722:	2100      	movs	r1, #0
 8015724:	4618      	mov	r0, r3
 8015726:	f003 ffad 	bl	8019684 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 801572a:	4b3c      	ldr	r3, [pc, #240]	; (801581c <MX_RTC_Init+0x118>)
 801572c:	4a3c      	ldr	r2, [pc, #240]	; (8015820 <MX_RTC_Init+0x11c>)
 801572e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8015730:	4b3a      	ldr	r3, [pc, #232]	; (801581c <MX_RTC_Init+0x118>)
 8015732:	2200      	movs	r2, #0
 8015734:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015736:	4b39      	ldr	r3, [pc, #228]	; (801581c <MX_RTC_Init+0x118>)
 8015738:	227f      	movs	r2, #127	; 0x7f
 801573a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 801573c:	4b37      	ldr	r3, [pc, #220]	; (801581c <MX_RTC_Init+0x118>)
 801573e:	22f9      	movs	r2, #249	; 0xf9
 8015740:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8015742:	4b36      	ldr	r3, [pc, #216]	; (801581c <MX_RTC_Init+0x118>)
 8015744:	2200      	movs	r2, #0
 8015746:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8015748:	4b34      	ldr	r3, [pc, #208]	; (801581c <MX_RTC_Init+0x118>)
 801574a:	2200      	movs	r2, #0
 801574c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801574e:	4b33      	ldr	r3, [pc, #204]	; (801581c <MX_RTC_Init+0x118>)
 8015750:	2200      	movs	r2, #0
 8015752:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015754:	4b31      	ldr	r3, [pc, #196]	; (801581c <MX_RTC_Init+0x118>)
 8015756:	2200      	movs	r2, #0
 8015758:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801575a:	4830      	ldr	r0, [pc, #192]	; (801581c <MX_RTC_Init+0x118>)
 801575c:	f7ee fb24 	bl	8003da8 <HAL_RTC_Init>
 8015760:	4603      	mov	r3, r0
 8015762:	2b00      	cmp	r3, #0
 8015764:	d001      	beq.n	801576a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8015766:	f7ff fdce 	bl	8015306 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 801576a:	2300      	movs	r3, #0
 801576c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8015770:	2300      	movs	r3, #0
 8015772:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8015776:	2300      	movs	r3, #0
 8015778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801577c:	2300      	movs	r3, #0
 801577e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8015780:	2300      	movs	r3, #0
 8015782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8015784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015788:	2200      	movs	r2, #0
 801578a:	4619      	mov	r1, r3
 801578c:	4823      	ldr	r0, [pc, #140]	; (801581c <MX_RTC_Init+0x118>)
 801578e:	f7ee fb89 	bl	8003ea4 <HAL_RTC_SetTime>
 8015792:	4603      	mov	r3, r0
 8015794:	2b00      	cmp	r3, #0
 8015796:	d001      	beq.n	801579c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8015798:	f7ff fdb5 	bl	8015306 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 801579c:	2307      	movs	r3, #7
 801579e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80157a2:	2301      	movs	r3, #1
 80157a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 6;
 80157a8:	2306      	movs	r3, #6
 80157aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 80;
 80157ae:	2350      	movs	r3, #80	; 0x50
 80157b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80157b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80157b8:	2200      	movs	r2, #0
 80157ba:	4619      	mov	r1, r3
 80157bc:	4817      	ldr	r0, [pc, #92]	; (801581c <MX_RTC_Init+0x118>)
 80157be:	f7ee fc0e 	bl	8003fde <HAL_RTC_SetDate>
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80157c8:	f7ff fd9d 	bl	8015306 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 80157cc:	2300      	movs	r3, #0
 80157ce:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80157d4:	2300      	movs	r3, #0
 80157d6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80157d8:	2300      	movs	r3, #0
 80157da:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80157dc:	2300      	movs	r3, #0
 80157de:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80157e0:	2300      	movs	r3, #0
 80157e2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80157e4:	2300      	movs	r3, #0
 80157e6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80157e8:	2300      	movs	r3, #0
 80157ea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80157ec:	2300      	movs	r3, #0
 80157ee:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80157f0:	2301      	movs	r3, #1
 80157f2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80157f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80157fc:	463b      	mov	r3, r7
 80157fe:	2200      	movs	r2, #0
 8015800:	4619      	mov	r1, r3
 8015802:	4806      	ldr	r0, [pc, #24]	; (801581c <MX_RTC_Init+0x118>)
 8015804:	f7ee fc72 	bl	80040ec <HAL_RTC_SetAlarm_IT>
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	d001      	beq.n	8015812 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 801580e:	f7ff fd7a 	bl	8015306 <Error_Handler>
  }

}
 8015812:	bf00      	nop
 8015814:	3740      	adds	r7, #64	; 0x40
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
 801581a:	bf00      	nop
 801581c:	20032898 	.word	0x20032898
 8015820:	40002800 	.word	0x40002800

08015824 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	4a0b      	ldr	r2, [pc, #44]	; (8015860 <HAL_RTC_MspInit+0x3c>)
 8015832:	4293      	cmp	r3, r2
 8015834:	d10f      	bne.n	8015856 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015836:	4b0b      	ldr	r3, [pc, #44]	; (8015864 <HAL_RTC_MspInit+0x40>)
 8015838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801583c:	4a09      	ldr	r2, [pc, #36]	; (8015864 <HAL_RTC_MspInit+0x40>)
 801583e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8015846:	2200      	movs	r2, #0
 8015848:	2105      	movs	r1, #5
 801584a:	2029      	movs	r0, #41	; 0x29
 801584c:	f7ea ffde 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8015850:	2029      	movs	r0, #41	; 0x29
 8015852:	f7ea fff7 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8015856:	bf00      	nop
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	40002800 	.word	0x40002800
 8015864:	40021000 	.word	0x40021000

08015868 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015872:	4b0b      	ldr	r3, [pc, #44]	; (80158a0 <SD_CheckStatus+0x38>)
 8015874:	2201      	movs	r2, #1
 8015876:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015878:	f7ff f81e 	bl	80148b8 <BSP_SD_GetCardState>
 801587c:	4603      	mov	r3, r0
 801587e:	2b00      	cmp	r3, #0
 8015880:	d107      	bne.n	8015892 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015882:	4b07      	ldr	r3, [pc, #28]	; (80158a0 <SD_CheckStatus+0x38>)
 8015884:	781b      	ldrb	r3, [r3, #0]
 8015886:	b2db      	uxtb	r3, r3
 8015888:	f023 0301 	bic.w	r3, r3, #1
 801588c:	b2da      	uxtb	r2, r3
 801588e:	4b04      	ldr	r3, [pc, #16]	; (80158a0 <SD_CheckStatus+0x38>)
 8015890:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015892:	4b03      	ldr	r3, [pc, #12]	; (80158a0 <SD_CheckStatus+0x38>)
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	b2db      	uxtb	r3, r3
}
 8015898:	4618      	mov	r0, r3
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	200000bc 	.word	0x200000bc

080158a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	4603      	mov	r3, r0
 80158ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80158ae:	4b18      	ldr	r3, [pc, #96]	; (8015910 <SD_initialize+0x6c>)
 80158b0:	2201      	movs	r2, #1
 80158b2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80158b4:	f7fa fdf3 	bl	801049e <osKernelRunning>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d021      	beq.n	8015902 <SD_initialize+0x5e>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80158be:	f7fe ffd5 	bl	801486c <BSP_SD_Init>
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d107      	bne.n	80158d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80158c8:	79fb      	ldrb	r3, [r7, #7]
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7ff ffcc 	bl	8015868 <SD_CheckStatus>
 80158d0:	4603      	mov	r3, r0
 80158d2:	461a      	mov	r2, r3
 80158d4:	4b0e      	ldr	r3, [pc, #56]	; (8015910 <SD_initialize+0x6c>)
 80158d6:	701a      	strb	r2, [r3, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 80158d8:	4b0d      	ldr	r3, [pc, #52]	; (8015910 <SD_initialize+0x6c>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d00f      	beq.n	8015902 <SD_initialize+0x5e>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80158e2:	4a0c      	ldr	r2, [pc, #48]	; (8015914 <SD_initialize+0x70>)
 80158e4:	f107 0308 	add.w	r3, r7, #8
 80158e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158ec:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80158f0:	f107 0308 	add.w	r3, r7, #8
 80158f4:	2100      	movs	r1, #0
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fa fec9 	bl	801068e <osMessageCreate>
 80158fc:	4603      	mov	r3, r0
 80158fe:	4a06      	ldr	r2, [pc, #24]	; (8015918 <SD_initialize+0x74>)
 8015900:	6013      	str	r3, [r2, #0]
    }
  }
  return Stat;
 8015902:	4b03      	ldr	r3, [pc, #12]	; (8015910 <SD_initialize+0x6c>)
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	b2db      	uxtb	r3, r3
}
 8015908:	4618      	mov	r0, r3
 801590a:	3710      	adds	r7, #16
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	200000bc 	.word	0x200000bc
 8015914:	0801a5b4 	.word	0x0801a5b4
 8015918:	200328bc 	.word	0x200328bc

0801591c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	4603      	mov	r3, r0
 8015924:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015926:	79fb      	ldrb	r3, [r7, #7]
 8015928:	4618      	mov	r0, r3
 801592a:	f7ff ff9d 	bl	8015868 <SD_CheckStatus>
 801592e:	4603      	mov	r3, r0
}
 8015930:	4618      	mov	r0, r3
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b08a      	sub	sp, #40	; 0x28
 801593c:	af00      	add	r7, sp, #0
 801593e:	60b9      	str	r1, [r7, #8]
 8015940:	607a      	str	r2, [r7, #4]
 8015942:	603b      	str	r3, [r7, #0]
 8015944:	4603      	mov	r3, r0
 8015946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015948:	2301      	movs	r3, #1
 801594a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	6879      	ldr	r1, [r7, #4]
 8015952:	68b8      	ldr	r0, [r7, #8]
 8015954:	f7fe ff36 	bl	80147c4 <BSP_SD_ReadBlocks_DMA>
 8015958:	4603      	mov	r3, r0
 801595a:	2b00      	cmp	r3, #0
 801595c:	d125      	bne.n	80159aa <SD_read+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801595e:	4b16      	ldr	r3, [pc, #88]	; (80159b8 <SD_read+0x80>)
 8015960:	6819      	ldr	r1, [r3, #0]
 8015962:	f107 0314 	add.w	r3, r7, #20
 8015966:	f247 5230 	movw	r2, #30000	; 0x7530
 801596a:	4618      	mov	r0, r3
 801596c:	f7fa fee2 	bl	8010734 <osMessageGet>

    if (event.status == osEventMessage)
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	2b10      	cmp	r3, #16
 8015974:	d119      	bne.n	80159aa <SD_read+0x72>
    {
      if (event.value.v == READ_CPLT_MSG)
 8015976:	69bb      	ldr	r3, [r7, #24]
 8015978:	2b01      	cmp	r3, #1
 801597a:	d116      	bne.n	80159aa <SD_read+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 801597c:	f7fa fd9b 	bl	80104b6 <osKernelSysTick>
 8015980:	4603      	mov	r3, r0
 8015982:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8015986:	3330      	adds	r3, #48	; 0x30
 8015988:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 801598a:	e008      	b.n	801599e <SD_read+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801598c:	f7fe ff94 	bl	80148b8 <BSP_SD_GetCardState>
 8015990:	4603      	mov	r3, r0
 8015992:	2b00      	cmp	r3, #0
 8015994:	d103      	bne.n	801599e <SD_read+0x66>
          {
            res = RES_OK;
 8015996:	2300      	movs	r3, #0
 8015998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801599c:	e005      	b.n	80159aa <SD_read+0x72>
        while(timer > osKernelSysTick())
 801599e:	f7fa fd8a 	bl	80104b6 <osKernelSysTick>
 80159a2:	4602      	mov	r2, r0
 80159a4:	6a3b      	ldr	r3, [r7, #32]
 80159a6:	4293      	cmp	r3, r2
 80159a8:	d8f0      	bhi.n	801598c <SD_read+0x54>
        }
      }
    }
  }

  return res;
 80159aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3728      	adds	r7, #40	; 0x28
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	200328bc 	.word	0x200328bc

080159bc <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08a      	sub	sp, #40	; 0x28
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	607a      	str	r2, [r7, #4]
 80159c6:	603b      	str	r3, [r7, #0]
 80159c8:	4603      	mov	r3, r0
 80159ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80159cc:	2301      	movs	r3, #1
 80159ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	6879      	ldr	r1, [r7, #4]
 80159d6:	68b8      	ldr	r0, [r7, #8]
 80159d8:	f7fe ff1e 	bl	8014818 <BSP_SD_WriteBlocks_DMA>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d125      	bne.n	8015a2e <SD_write+0x72>
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80159e2:	4b16      	ldr	r3, [pc, #88]	; (8015a3c <SD_write+0x80>)
 80159e4:	6819      	ldr	r1, [r3, #0]
 80159e6:	f107 0314 	add.w	r3, r7, #20
 80159ea:	f247 5230 	movw	r2, #30000	; 0x7530
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fa fea0 	bl	8010734 <osMessageGet>

    if (event.status == osEventMessage)
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	2b10      	cmp	r3, #16
 80159f8:	d119      	bne.n	8015a2e <SD_write+0x72>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d116      	bne.n	8015a2e <SD_write+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8015a00:	f7fa fd59 	bl	80104b6 <osKernelSysTick>
 8015a04:	4603      	mov	r3, r0
 8015a06:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8015a0a:	3330      	adds	r3, #48	; 0x30
 8015a0c:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8015a0e:	e008      	b.n	8015a22 <SD_write+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015a10:	f7fe ff52 	bl	80148b8 <BSP_SD_GetCardState>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d103      	bne.n	8015a22 <SD_write+0x66>
          {
            res = RES_OK;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015a20:	e005      	b.n	8015a2e <SD_write+0x72>
        while(timer > osKernelSysTick())
 8015a22:	f7fa fd48 	bl	80104b6 <osKernelSysTick>
 8015a26:	4602      	mov	r2, r0
 8015a28:	6a3b      	ldr	r3, [r7, #32]
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	d8f0      	bhi.n	8015a10 <SD_write+0x54>
        }
      }
    }
  }

  return res;
 8015a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3728      	adds	r7, #40	; 0x28
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	200328bc 	.word	0x200328bc

08015a40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b08c      	sub	sp, #48	; 0x30
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	603a      	str	r2, [r7, #0]
 8015a4a:	71fb      	strb	r3, [r7, #7]
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015a50:	2301      	movs	r3, #1
 8015a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015a56:	4b25      	ldr	r3, [pc, #148]	; (8015aec <SD_ioctl+0xac>)
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	f003 0301 	and.w	r3, r3, #1
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d001      	beq.n	8015a68 <SD_ioctl+0x28>
 8015a64:	2303      	movs	r3, #3
 8015a66:	e03c      	b.n	8015ae2 <SD_ioctl+0xa2>

  switch (cmd)
 8015a68:	79bb      	ldrb	r3, [r7, #6]
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	d834      	bhi.n	8015ad8 <SD_ioctl+0x98>
 8015a6e:	a201      	add	r2, pc, #4	; (adr r2, 8015a74 <SD_ioctl+0x34>)
 8015a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a74:	08015a85 	.word	0x08015a85
 8015a78:	08015a8d 	.word	0x08015a8d
 8015a7c:	08015aa5 	.word	0x08015aa5
 8015a80:	08015abf 	.word	0x08015abf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015a84:	2300      	movs	r3, #0
 8015a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015a8a:	e028      	b.n	8015ade <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015a8c:	f107 030c 	add.w	r3, r7, #12
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fe ff21 	bl	80148d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015aa2:	e01c      	b.n	8015ade <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015aa4:	f107 030c 	add.w	r3, r7, #12
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7fe ff15 	bl	80148d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	b29a      	uxth	r2, r3
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015abc:	e00f      	b.n	8015ade <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015abe:	f107 030c 	add.w	r3, r7, #12
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fe ff08 	bl	80148d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aca:	0a5a      	lsrs	r2, r3, #9
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015ad6:	e002      	b.n	8015ade <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015ad8:	2304      	movs	r3, #4
 8015ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3730      	adds	r7, #48	; 0x30
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	200000bc 	.word	0x200000bc

08015af0 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8015af4:	4b04      	ldr	r3, [pc, #16]	; (8015b08 <BSP_SD_WriteCpltCallback+0x18>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f04f 32ff 	mov.w	r2, #4294967295
 8015afc:	2102      	movs	r1, #2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7fa fdd8 	bl	80106b4 <osMessagePut>
}
 8015b04:	bf00      	nop
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	200328bc 	.word	0x200328bc

08015b0c <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8015b10:	4b04      	ldr	r3, [pc, #16]	; (8015b24 <BSP_SD_ReadCpltCallback+0x18>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f04f 32ff 	mov.w	r2, #4294967295
 8015b18:	2101      	movs	r1, #1
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fa fdca 	bl	80106b4 <osMessagePut>
}
 8015b20:	bf00      	nop
 8015b22:	bd80      	pop	{r7, pc}
 8015b24:	200328bc 	.word	0x200328bc

08015b28 <sdcard_init>:
 * @brief  Initialize the SD card
 * @param  None
 * @retval None
 * ==================================================================== */
void sdcard_init( void )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	af00      	add	r7, sp, #0
  // Set SD card status
  DEVICE_STATUS.sdcard = DEVICE_OKAY;
 8015b2c:	4b1f      	ldr	r3, [pc, #124]	; (8015bac <sdcard_init+0x84>)
 8015b2e:	2200      	movs	r2, #0
 8015b30:	70da      	strb	r2, [r3, #3]

  // Create message buffer
  sdcardTxBuffer = xMessageBufferCreate( SDCARD_TX_BUFFER_SIZE );
 8015b32:	2201      	movs	r2, #1
 8015b34:	2100      	movs	r1, #0
 8015b36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015b3a:	f7fc f81f 	bl	8011b7c <xStreamBufferGenericCreate>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	4a1b      	ldr	r2, [pc, #108]	; (8015bb0 <sdcard_init+0x88>)
 8015b42:	6013      	str	r3, [r2, #0]

  // create a mutex for SdCard protection - create first, will be used in following functions
  sdCard_gatekeeper = xSemaphoreCreateMutex();
 8015b44:	2001      	movs	r0, #1
 8015b46:	f7fb f802 	bl	8010b4e <xQueueCreateMutex>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	4a19      	ldr	r2, [pc, #100]	; (8015bb4 <sdcard_init+0x8c>)
 8015b4e:	6013      	str	r3, [r2, #0]

  // Check if SD card is correctly inserted
  if ( BSP_SD_IsDetected() != SD_PRESENT ) {
 8015b50:	f7fe fef5 	bl	801493e <BSP_SD_IsDetected>
 8015b54:	4603      	mov	r3, r0
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d003      	beq.n	8015b62 <sdcard_init+0x3a>
    DEVICE_STATUS.sdcard = DEVICE_FAIL;
 8015b5a:	4b14      	ldr	r3, [pc, #80]	; (8015bac <sdcard_init+0x84>)
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	70da      	strb	r2, [r3, #3]
    return;
 8015b60:	e023      	b.n	8015baa <sdcard_init+0x82>
  } else {

    // Initialize FAT file system
    MX_FATFS_Init();
 8015b62:	f7ff f9d1 	bl	8014f08 <MX_FATFS_Init>

    // Mount file system
    if ( f_mount( &SDFatFS, SDPath, 0 ) != FR_OK )
 8015b66:	2200      	movs	r2, #0
 8015b68:	4913      	ldr	r1, [pc, #76]	; (8015bb8 <sdcard_init+0x90>)
 8015b6a:	4814      	ldr	r0, [pc, #80]	; (8015bbc <sdcard_init+0x94>)
 8015b6c:	f7f8 fecc 	bl	800e908 <f_mount>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d002      	beq.n	8015b7c <sdcard_init+0x54>
    	DEVICE_STATUS.sdcard = DEVICE_FAIL;
 8015b76:	4b0d      	ldr	r3, [pc, #52]	; (8015bac <sdcard_init+0x84>)
 8015b78:	2201      	movs	r2, #1
 8015b7a:	70da      	strb	r2, [r3, #3]
  }

  // Test SD card and file system
  if ( DEVICE_STATUS.sdcard == DEVICE_OKAY )
 8015b7c:	4b0b      	ldr	r3, [pc, #44]	; (8015bac <sdcard_init+0x84>)
 8015b7e:	78db      	ldrb	r3, [r3, #3]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d105      	bne.n	8015b90 <sdcard_init+0x68>
	  DEVICE_STATUS.sdcard = sdcard_test();
 8015b84:	f000 f8b6 	bl	8015cf4 <sdcard_test>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	4b07      	ldr	r3, [pc, #28]	; (8015bac <sdcard_init+0x84>)
 8015b8e:	70da      	strb	r2, [r3, #3]

  // SD card is not ready
  if ( DEVICE_STATUS.sdcard == DEVICE_FAIL ) {
 8015b90:	4b06      	ldr	r3, [pc, #24]	; (8015bac <sdcard_init+0x84>)
 8015b92:	78db      	ldrb	r3, [r3, #3]
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d108      	bne.n	8015baa <sdcard_init+0x82>
    f_mount( NULL, SDPath, 0 );
 8015b98:	2200      	movs	r2, #0
 8015b9a:	4907      	ldr	r1, [pc, #28]	; (8015bb8 <sdcard_init+0x90>)
 8015b9c:	2000      	movs	r0, #0
 8015b9e:	f7f8 feb3 	bl	800e908 <f_mount>
    FATFS_UnLinkDriver( SDPath );
 8015ba2:	4805      	ldr	r0, [pc, #20]	; (8015bb8 <sdcard_init+0x90>)
 8015ba4:	f7fa fb2c 	bl	8010200 <FATFS_UnLinkDriver>
    return;
 8015ba8:	bf00      	nop
  ret = xTaskCreate( sdcardTxTask, "SDcard TX", SDCARD_TX_STACK_SIZE, NULL, 1, &sdcardTxTaskHandle );
  if ( ret != pdPASS ) for ( ;; ) {
  }
  */

}
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	2003260c 	.word	0x2003260c
 8015bb0:	200328c0 	.word	0x200328c0
 8015bb4:	200328c4 	.word	0x200328c4
 8015bb8:	200323b4 	.word	0x200323b4
 8015bbc:	200323b8 	.word	0x200323b8

08015bc0 <sdcard_read>:
 *         nToRead : Number of bytes to read
 *         nRead   : Numbe rof bytes actually read
 * @retval File function return code
 * ==================================================================== */
FRESULT sdcard_read( char *fileName, uint8_t *buffer, UINT nToRead, UINT *nRead )
{
 8015bc0:	b590      	push	{r4, r7, lr}
 8015bc2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	f507 7412 	add.w	r4, r7, #584	; 0x248
 8015bcc:	f5a4 740f 	sub.w	r4, r4, #572	; 0x23c
 8015bd0:	6020      	str	r0, [r4, #0]
 8015bd2:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8015bd6:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 8015bda:	6001      	str	r1, [r0, #0]
 8015bdc:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8015be0:	f5a1 7111 	sub.w	r1, r1, #580	; 0x244
 8015be4:	600a      	str	r2, [r1, #0]
 8015be6:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8015bea:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 8015bee:	6013      	str	r3, [r2, #0]
  FRESULT res = FR_DISK_ERR;
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  FIL fp;

  // Set read characters to zero
  *nRead = 0;
 8015bf6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015bfa:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]

  // Read data from file
  res = f_open( &fp, fileName, FA_READ );
 8015c04:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015c08:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8015c0c:	f107 0014 	add.w	r0, r7, #20
 8015c10:	2201      	movs	r2, #1
 8015c12:	6819      	ldr	r1, [r3, #0]
 8015c14:	f7f8 fedc 	bl	800e9d0 <f_open>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if ( res == FR_OK ) {
 8015c1e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d11a      	bne.n	8015c5c <sdcard_read+0x9c>
    res = f_read( &fp, buffer, nToRead, nRead );
 8015c26:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8015c2a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8015c2e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8015c32:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 8015c36:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8015c3a:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 8015c3e:	f107 0014 	add.w	r0, r7, #20
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	6812      	ldr	r2, [r2, #0]
 8015c46:	6809      	ldr	r1, [r1, #0]
 8015c48:	f7f9 f981 	bl	800ef4e <f_read>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    f_close( &fp );
 8015c52:	f107 0314 	add.w	r3, r7, #20
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7f9 fd14 	bl	800f684 <f_close>
  }

  // Return status
  return res;
 8015c5c:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd90      	pop	{r4, r7, pc}
	...

08015c6c <sdcard_write>:
 *         nToWrite: Number of bytes to write
 *         nWrite  : Numbe rof bytes actually written
 * @retval File function return code
 * ==================================================================== */
FRESULT sdcard_write( char *fileName, uint8_t *buffer, UINT nToWrite, UINT *nWrite, BYTE mode )
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b086      	sub	sp, #24
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	603b      	str	r3, [r7, #0]
  FRESULT res = FR_DISK_ERR;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	75fb      	strb	r3, [r7, #23]

  // Set written characters to zero
  *nWrite = 0;
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2200      	movs	r2, #0
 8015c82:	601a      	str	r2, [r3, #0]

  // Write data to file
  //res = f_open( &OPTIONS.fp, fileName, FA_OPEN_APPEND | FA_WRITE );
  res = f_open( &OPTIONS.fp, fileName, mode );
 8015c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c88:	461a      	mov	r2, r3
 8015c8a:	68f9      	ldr	r1, [r7, #12]
 8015c8c:	480b      	ldr	r0, [pc, #44]	; (8015cbc <sdcard_write+0x50>)
 8015c8e:	f7f8 fe9f 	bl	800e9d0 <f_open>
 8015c92:	4603      	mov	r3, r0
 8015c94:	75fb      	strb	r3, [r7, #23]
  if ( res == FR_OK ) {
 8015c96:	7dfb      	ldrb	r3, [r7, #23]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d10a      	bne.n	8015cb2 <sdcard_write+0x46>
    res = f_write( &OPTIONS.fp, buffer, nToWrite, nWrite );
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	68b9      	ldr	r1, [r7, #8]
 8015ca2:	4806      	ldr	r0, [pc, #24]	; (8015cbc <sdcard_write+0x50>)
 8015ca4:	f7f9 fac1 	bl	800f22a <f_write>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	75fb      	strb	r3, [r7, #23]
    f_close( &OPTIONS.fp );
 8015cac:	4803      	ldr	r0, [pc, #12]	; (8015cbc <sdcard_write+0x50>)
 8015cae:	f7f9 fce9 	bl	800f684 <f_close>
  }

  // Return status
  return res;
 8015cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3718      	adds	r7, #24
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	20032664 	.word	0x20032664

08015cc0 <sdcard_formatSdCard>:
 * @brief  format Sd card
 * @param  None
 * @retval SD card status
 * ==================================================================== */
short sdcard_formatSdCard( )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8015cc6:	af02      	add	r7, sp, #8
  uint8_t workBuffer[2 * _MAX_SS];

  if(f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 8015cc8:	463b      	mov	r3, r7
 8015cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015cce:	9200      	str	r2, [sp, #0]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	2107      	movs	r1, #7
 8015cd4:	4806      	ldr	r0, [pc, #24]	; (8015cf0 <sdcard_formatSdCard+0x30>)
 8015cd6:	f7f9 fdd3 	bl	800f880 <f_mkfs>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d001      	beq.n	8015ce4 <sdcard_formatSdCard+0x24>
	  return DEVICE_FAIL;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	e000      	b.n	8015ce6 <sdcard_formatSdCard+0x26>
  return DEVICE_OKAY;
 8015ce4:	2300      	movs	r3, #0

}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	200323b4 	.word	0x200323b4

08015cf4 <sdcard_test>:
 * @brief  Test file operations on SD card
 * @param  None
 * @retval SD card status
 * ==================================================================== */
status_t sdcard_test( )
{
 8015cf4:	b5b0      	push	{r4, r5, r7, lr}
 8015cf6:	b0a2      	sub	sp, #136	; 0x88
 8015cf8:	af02      	add	r7, sp, #8
  FRESULT res = FR_DISK_ERR;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  UINT nWrite, nRead;
  uint8_t textWrite[] = "This is Alex working with SD card file System";
 8015d00:	4b21      	ldr	r3, [pc, #132]	; (8015d88 <sdcard_test+0x94>)
 8015d02:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8015d06:	461d      	mov	r5, r3
 8015d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015d14:	c407      	stmia	r4!, {r0, r1, r2}
 8015d16:	8023      	strh	r3, [r4, #0]
  uint8_t textRead[50];
  char fileName[] = "HalloWord.txt";
 8015d18:	4b1c      	ldr	r3, [pc, #112]	; (8015d8c <sdcard_test+0x98>)
 8015d1a:	463c      	mov	r4, r7
 8015d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d1e:	c407      	stmia	r4!, {r0, r1, r2}
 8015d20:	8023      	strh	r3, [r4, #0]

  // Write data
  res = sdcard_write( fileName, textWrite, sizeof(textWrite), &nWrite ,  FA_OPEN_APPEND | FA_WRITE );
 8015d22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015d26:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	2232      	movs	r2, #50	; 0x32
 8015d2e:	9200      	str	r2, [sp, #0]
 8015d30:	222e      	movs	r2, #46	; 0x2e
 8015d32:	f7ff ff9b 	bl	8015c6c <sdcard_write>
 8015d36:	4603      	mov	r3, r0
 8015d38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  // Read data
  if ( res == FR_OK )
 8015d3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d10a      	bne.n	8015d5a <sdcard_test+0x66>
	  res = sdcard_read( fileName, textRead, sizeof(textWrite), &nRead );
 8015d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015d48:	f107 0110 	add.w	r1, r7, #16
 8015d4c:	4638      	mov	r0, r7
 8015d4e:	222e      	movs	r2, #46	; 0x2e
 8015d50:	f7ff ff36 	bl	8015bc0 <sdcard_read>
 8015d54:	4603      	mov	r3, r0
 8015d56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  // Delete file and compare number of bytes
  if ( res == FR_OK ) {
 8015d5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10c      	bne.n	8015d7c <sdcard_test+0x88>
    res = f_unlink( fileName );
 8015d62:	463b      	mov	r3, r7
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7f9 fcbc 	bl	800f6e2 <f_unlink>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if ( nRead == nWrite )
 8015d70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d101      	bne.n	8015d7c <sdcard_test+0x88>
    	return DEVICE_OKAY;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	e000      	b.n	8015d7e <sdcard_test+0x8a>
  }

  // Something went wrong
  return DEVICE_FAIL;
 8015d7c:	2301      	movs	r3, #1
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3780      	adds	r7, #128	; 0x80
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bdb0      	pop	{r4, r5, r7, pc}
 8015d86:	bf00      	nop
 8015d88:	0801a5bc 	.word	0x0801a5bc
 8015d8c:	0801a5ec 	.word	0x0801a5ec

08015d90 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8015d90:	b480      	push	{r7}
 8015d92:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8015d94:	4b0c      	ldr	r3, [pc, #48]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015d96:	4a0d      	ldr	r2, [pc, #52]	; (8015dcc <MX_SDMMC1_SD_Init+0x3c>)
 8015d98:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8015da0:	4b09      	ldr	r3, [pc, #36]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015da2:	2200      	movs	r2, #0
 8015da4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8015da6:	4b08      	ldr	r3, [pc, #32]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015da8:	2200      	movs	r2, #0
 8015daa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8015dac:	4b06      	ldr	r3, [pc, #24]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015dae:	2200      	movs	r2, #0
 8015db0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8015db2:	4b05      	ldr	r3, [pc, #20]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015db4:	2200      	movs	r2, #0
 8015db6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8015db8:	4b03      	ldr	r3, [pc, #12]	; (8015dc8 <MX_SDMMC1_SD_Init+0x38>)
 8015dba:	2208      	movs	r2, #8
 8015dbc:	619a      	str	r2, [r3, #24]

}
 8015dbe:	bf00      	nop
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr
 8015dc8:	200328c8 	.word	0x200328c8
 8015dcc:	40012800 	.word	0x40012800

08015dd0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b08a      	sub	sp, #40	; 0x28
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dd8:	f107 0314 	add.w	r3, r7, #20
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]
 8015de0:	605a      	str	r2, [r3, #4]
 8015de2:	609a      	str	r2, [r3, #8]
 8015de4:	60da      	str	r2, [r3, #12]
 8015de6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	4a42      	ldr	r2, [pc, #264]	; (8015ef8 <HAL_SD_MspInit+0x128>)
 8015dee:	4293      	cmp	r3, r2
 8015df0:	d17d      	bne.n	8015eee <HAL_SD_MspInit+0x11e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8015df2:	4b42      	ldr	r3, [pc, #264]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015df6:	4a41      	ldr	r2, [pc, #260]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8015dfe:	4b3f      	ldr	r3, [pc, #252]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015e06:	613b      	str	r3, [r7, #16]
 8015e08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015e0a:	4b3c      	ldr	r3, [pc, #240]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e0e:	4a3b      	ldr	r2, [pc, #236]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e10:	f043 0304 	orr.w	r3, r3, #4
 8015e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015e16:	4b39      	ldr	r3, [pc, #228]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e1a:	f003 0304 	and.w	r3, r3, #4
 8015e1e:	60fb      	str	r3, [r7, #12]
 8015e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015e22:	4b36      	ldr	r3, [pc, #216]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e26:	4a35      	ldr	r2, [pc, #212]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e28:	f043 0308 	orr.w	r3, r3, #8
 8015e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015e2e:	4b33      	ldr	r3, [pc, #204]	; (8015efc <HAL_SD_MspInit+0x12c>)
 8015e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e32:	f003 0308 	and.w	r3, r3, #8
 8015e36:	60bb      	str	r3, [r7, #8]
 8015e38:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8015e3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8015e3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e40:	2302      	movs	r3, #2
 8015e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e44:	2300      	movs	r3, #0
 8015e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e48:	2303      	movs	r3, #3
 8015e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015e4c:	230c      	movs	r3, #12
 8015e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015e50:	f107 0314 	add.w	r3, r7, #20
 8015e54:	4619      	mov	r1, r3
 8015e56:	482a      	ldr	r0, [pc, #168]	; (8015f00 <HAL_SD_MspInit+0x130>)
 8015e58:	f7eb f824 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015e5c:	2304      	movs	r3, #4
 8015e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e60:	2302      	movs	r3, #2
 8015e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e64:	2300      	movs	r3, #0
 8015e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e68:	2303      	movs	r3, #3
 8015e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015e6c:	230c      	movs	r3, #12
 8015e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015e70:	f107 0314 	add.w	r3, r7, #20
 8015e74:	4619      	mov	r1, r3
 8015e76:	4823      	ldr	r0, [pc, #140]	; (8015f04 <HAL_SD_MspInit+0x134>)
 8015e78:	f7eb f814 	bl	8000ea4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8015e7c:	4b22      	ldr	r3, [pc, #136]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e7e:	4a23      	ldr	r2, [pc, #140]	; (8015f0c <HAL_SD_MspInit+0x13c>)
 8015e80:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8015e82:	4b21      	ldr	r3, [pc, #132]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e84:	2207      	movs	r2, #7
 8015e86:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015e88:	4b1f      	ldr	r3, [pc, #124]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8015e8e:	4b1e      	ldr	r3, [pc, #120]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e90:	2200      	movs	r2, #0
 8015e92:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8015e94:	4b1c      	ldr	r3, [pc, #112]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e96:	2280      	movs	r2, #128	; 0x80
 8015e98:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015e9a:	4b1b      	ldr	r3, [pc, #108]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015ea0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015ea2:	4b19      	ldr	r3, [pc, #100]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ea8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8015eaa:	4b17      	ldr	r3, [pc, #92]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8015eb0:	4b15      	ldr	r3, [pc, #84]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8015eb6:	4814      	ldr	r0, [pc, #80]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015eb8:	f7ea fce0 	bl	800087c <HAL_DMA_Init>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d001      	beq.n	8015ec6 <HAL_SD_MspInit+0xf6>
    {
      Error_Handler();
 8015ec2:	f7ff fa20 	bl	8015306 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4a0f      	ldr	r2, [pc, #60]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015eca:	641a      	str	r2, [r3, #64]	; 0x40
 8015ecc:	4a0e      	ldr	r2, [pc, #56]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	4a0c      	ldr	r2, [pc, #48]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015ed6:	63da      	str	r2, [r3, #60]	; 0x3c
 8015ed8:	4a0b      	ldr	r2, [pc, #44]	; (8015f08 <HAL_SD_MspInit+0x138>)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8015ede:	2200      	movs	r2, #0
 8015ee0:	2105      	movs	r1, #5
 8015ee2:	2031      	movs	r0, #49	; 0x31
 8015ee4:	f7ea fc92 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8015ee8:	2031      	movs	r0, #49	; 0x31
 8015eea:	f7ea fcab 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8015eee:	bf00      	nop
 8015ef0:	3728      	adds	r7, #40	; 0x28
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	40012800 	.word	0x40012800
 8015efc:	40021000 	.word	0x40021000
 8015f00:	48000800 	.word	0x48000800
 8015f04:	48000c00 	.word	0x48000c00
 8015f08:	2003294c 	.word	0x2003294c
 8015f0c:	40020444 	.word	0x40020444

08015f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015f16:	4b11      	ldr	r3, [pc, #68]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f1a:	4a10      	ldr	r2, [pc, #64]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f1c:	f043 0301 	orr.w	r3, r3, #1
 8015f20:	6613      	str	r3, [r2, #96]	; 0x60
 8015f22:	4b0e      	ldr	r3, [pc, #56]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f26:	f003 0301 	and.w	r3, r3, #1
 8015f2a:	607b      	str	r3, [r7, #4]
 8015f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015f2e:	4b0b      	ldr	r3, [pc, #44]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f32:	4a0a      	ldr	r2, [pc, #40]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f38:	6593      	str	r3, [r2, #88]	; 0x58
 8015f3a:	4b08      	ldr	r3, [pc, #32]	; (8015f5c <HAL_MspInit+0x4c>)
 8015f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f42:	603b      	str	r3, [r7, #0]
 8015f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8015f46:	2200      	movs	r2, #0
 8015f48:	210f      	movs	r1, #15
 8015f4a:	f06f 0001 	mvn.w	r0, #1
 8015f4e:	f7ea fc5d 	bl	800080c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015f52:	bf00      	nop
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	40021000 	.word	0x40021000

08015f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b08c      	sub	sp, #48	; 0x30
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8015f70:	2200      	movs	r2, #0
 8015f72:	6879      	ldr	r1, [r7, #4]
 8015f74:	201c      	movs	r0, #28
 8015f76:	f7ea fc49 	bl	800080c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8015f7a:	201c      	movs	r0, #28
 8015f7c:	f7ea fc62 	bl	8000844 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8015f80:	4b1f      	ldr	r3, [pc, #124]	; (8016000 <HAL_InitTick+0xa0>)
 8015f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f84:	4a1e      	ldr	r2, [pc, #120]	; (8016000 <HAL_InitTick+0xa0>)
 8015f86:	f043 0301 	orr.w	r3, r3, #1
 8015f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8015f8c:	4b1c      	ldr	r3, [pc, #112]	; (8016000 <HAL_InitTick+0xa0>)
 8015f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f90:	f003 0301 	and.w	r3, r3, #1
 8015f94:	60fb      	str	r3, [r7, #12]
 8015f96:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8015f98:	f107 0210 	add.w	r2, r7, #16
 8015f9c:	f107 0314 	add.w	r3, r7, #20
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ed f994 	bl	80032d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8015fa8:	f7ed f966 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8015fac:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8015fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb0:	4a14      	ldr	r2, [pc, #80]	; (8016004 <HAL_InitTick+0xa4>)
 8015fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8015fb6:	0c9b      	lsrs	r3, r3, #18
 8015fb8:	3b01      	subs	r3, #1
 8015fba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8015fbc:	4b12      	ldr	r3, [pc, #72]	; (8016008 <HAL_InitTick+0xa8>)
 8015fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015fc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8015fc4:	4b10      	ldr	r3, [pc, #64]	; (8016008 <HAL_InitTick+0xa8>)
 8015fc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015fca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8015fcc:	4a0e      	ldr	r2, [pc, #56]	; (8016008 <HAL_InitTick+0xa8>)
 8015fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8015fd2:	4b0d      	ldr	r3, [pc, #52]	; (8016008 <HAL_InitTick+0xa8>)
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015fd8:	4b0b      	ldr	r3, [pc, #44]	; (8016008 <HAL_InitTick+0xa8>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8015fde:	480a      	ldr	r0, [pc, #40]	; (8016008 <HAL_InitTick+0xa8>)
 8015fe0:	f7f0 f966 	bl	80062b0 <HAL_TIM_Base_Init>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d104      	bne.n	8015ff4 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8015fea:	4807      	ldr	r0, [pc, #28]	; (8016008 <HAL_InitTick+0xa8>)
 8015fec:	f7f0 f98c 	bl	8006308 <HAL_TIM_Base_Start_IT>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	e000      	b.n	8015ff6 <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8015ff4:	2301      	movs	r3, #1
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3730      	adds	r7, #48	; 0x30
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	40021000 	.word	0x40021000
 8016004:	431bde83 	.word	0x431bde83
 8016008:	20032994 	.word	0x20032994

0801600c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801600c:	b480      	push	{r7}
 801600e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016010:	bf00      	nop
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr

0801601a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801601a:	b480      	push	{r7}
 801601c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801601e:	e7fe      	b.n	801601e <HardFault_Handler+0x4>

08016020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016020:	b480      	push	{r7}
 8016022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016024:	e7fe      	b.n	8016024 <MemManage_Handler+0x4>

08016026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016026:	b480      	push	{r7}
 8016028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801602a:	e7fe      	b.n	801602a <BusFault_Handler+0x4>

0801602c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801602c:	b480      	push	{r7}
 801602e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016030:	e7fe      	b.n	8016030 <UsageFault_Handler+0x4>

08016032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016032:	b480      	push	{r7}
 8016034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016036:	bf00      	nop
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr

08016040 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8016044:	4802      	ldr	r0, [pc, #8]	; (8016050 <DMA1_Channel2_IRQHandler+0x10>)
 8016046:	f7ea fe42 	bl	8000cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 801604a:	bf00      	nop
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	20033c48 	.word	0x20033c48

08016054 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8016058:	4802      	ldr	r0, [pc, #8]	; (8016064 <DMA1_Channel3_IRQHandler+0x10>)
 801605a:	f7ea fe38 	bl	8000cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 801605e:	bf00      	nop
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	20033c00 	.word	0x20033c00

08016068 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 801606c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8016070:	f7eb f9cc 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8016074:	bf00      	nop
 8016076:	bd80      	pop	{r7, pc}

08016078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801607c:	4802      	ldr	r0, [pc, #8]	; (8016088 <TIM2_IRQHandler+0x10>)
 801607e:	f7f0 f96d 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8016082:	bf00      	nop
 8016084:	bd80      	pop	{r7, pc}
 8016086:	bf00      	nop
 8016088:	20032994 	.word	0x20032994

0801608c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8016090:	4802      	ldr	r0, [pc, #8]	; (801609c <USART3_IRQHandler+0x10>)
 8016092:	f7f0 ff69 	bl	8006f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8016096:	bf00      	nop
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	20033af0 	.word	0x20033af0

080160a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80160a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80160a8:	f7eb f9b0 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80160ac:	bf00      	nop
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80160b4:	4802      	ldr	r0, [pc, #8]	; (80160c0 <RTC_Alarm_IRQHandler+0x10>)
 80160b6:	f7ee f955 	bl	8004364 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80160ba:	bf00      	nop
 80160bc:	bd80      	pop	{r7, pc}
 80160be:	bf00      	nop
 80160c0:	20032898 	.word	0x20032898

080160c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80160c8:	4802      	ldr	r0, [pc, #8]	; (80160d4 <SDMMC1_IRQHandler+0x10>)
 80160ca:	f7ef f873 	bl	80051b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80160ce:	bf00      	nop
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	200328c8 	.word	0x200328c8

080160d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80160dc:	4802      	ldr	r0, [pc, #8]	; (80160e8 <TIM7_IRQHandler+0x10>)
 80160de:	f7f0 f93d 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80160e2:	bf00      	nop
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	20033a30 	.word	0x20033a30

080160ec <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 80160f0:	4802      	ldr	r0, [pc, #8]	; (80160fc <DMA2_Channel4_IRQHandler+0x10>)
 80160f2:	f7ea fdec 	bl	8000cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80160f6:	bf00      	nop
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	2003294c 	.word	0x2003294c

08016100 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016104:	4802      	ldr	r0, [pc, #8]	; (8016110 <OTG_FS_IRQHandler+0x10>)
 8016106:	f7eb fb38 	bl	800177a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801610a:	bf00      	nop
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	20033f2c 	.word	0x20033f2c

08016114 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_tx);
 8016118:	4802      	ldr	r0, [pc, #8]	; (8016124 <DMA2_Channel6_IRQHandler+0x10>)
 801611a:	f7ea fdd8 	bl	8000cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 801611e:	bf00      	nop
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	20033bb8 	.word	0x20033bb8

08016128 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 801612c:	4802      	ldr	r0, [pc, #8]	; (8016138 <DMA2_Channel7_IRQHandler+0x10>)
 801612e:	f7ea fdce 	bl	8000cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8016132:	bf00      	nop
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	20033b70 	.word	0x20033b70

0801613c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LPUART1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8016142:	2300      	movs	r3, #0
 8016144:	607b      	str	r3, [r7, #4]

  // UART idle interrupt triggered
  if ( __HAL_UART_GET_FLAG( &hlpuart1, UART_FLAG_IDLE ) ) {
 8016146:	4b16      	ldr	r3, [pc, #88]	; (80161a0 <LPUART1_IRQHandler+0x64>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	69db      	ldr	r3, [r3, #28]
 801614c:	f003 0310 	and.w	r3, r3, #16
 8016150:	2b10      	cmp	r3, #16
 8016152:	d112      	bne.n	801617a <LPUART1_IRQHandler+0x3e>

	// Position of DMA write pointer in ring buffer
	volatile uint32_t position = TERMINAL_RX_BUFFER_SIZE - hdma_lpuart_rx.Instance->CNDTR;
 8016154:	4b13      	ldr	r3, [pc, #76]	; (80161a4 <LPUART1_IRQHandler+0x68>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801615e:	603b      	str	r3, [r7, #0]

	// Send position as notification value to terminal task
	xTaskNotifyFromISR( terminalRxTaskHandle, position, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
 8016160:	4b11      	ldr	r3, [pc, #68]	; (80161a8 <LPUART1_IRQHandler+0x6c>)
 8016162:	6818      	ldr	r0, [r3, #0]
 8016164:	6839      	ldr	r1, [r7, #0]
 8016166:	1d3b      	adds	r3, r7, #4
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	2300      	movs	r3, #0
 801616c:	2203      	movs	r2, #3
 801616e:	f7fd fc3f 	bl	80139f0 <xTaskGenericNotifyFromISR>

	// Clear interrupt idle flag
	__HAL_UART_CLEAR_IDLEFLAG( &hlpuart1 );
 8016172:	4b0b      	ldr	r3, [pc, #44]	; (80161a0 <LPUART1_IRQHandler+0x64>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2210      	movs	r2, #16
 8016178:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 801617a:	4809      	ldr	r0, [pc, #36]	; (80161a0 <LPUART1_IRQHandler+0x64>)
 801617c:	f7f0 fef4 	bl	8006f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d007      	beq.n	8016196 <LPUART1_IRQHandler+0x5a>
 8016186:	4b09      	ldr	r3, [pc, #36]	; (80161ac <LPUART1_IRQHandler+0x70>)
 8016188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801618c:	601a      	str	r2, [r3, #0]
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	f3bf 8f6f 	isb	sy
  /* USER CODE END LPUART1_IRQn 1 */
}
 8016196:	bf00      	nop
 8016198:	3708      	adds	r7, #8
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	20033a70 	.word	0x20033a70
 80161a4:	20033b70 	.word	0x20033b70
 80161a8:	200329e0 	.word	0x200329e0
 80161ac:	e000ed04 	.word	0xe000ed04

080161b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af02      	add	r7, sp, #8
 80161b6:	6078      	str	r0, [r7, #4]
  // Track IRQ entry for SystemView
  //  SEGGER_SYSVIEW_RecordEnterISR();
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80161b8:	2300      	movs	r3, #0
 80161ba:	60fb      	str	r3, [r7, #12]

  // Notify task when transmission is complete
  if ( huart == &hlpuart1     ) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	4a0e      	ldr	r2, [pc, #56]	; (80161f8 <HAL_UART_TxCpltCallback+0x48>)
 80161c0:	4293      	cmp	r3, r2
 80161c2:	d109      	bne.n	80161d8 <HAL_UART_TxCpltCallback+0x28>
    xTaskNotifyFromISR( terminalTxTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken );
 80161c4:	4b0d      	ldr	r3, [pc, #52]	; (80161fc <HAL_UART_TxCpltCallback+0x4c>)
 80161c6:	6818      	ldr	r0, [r3, #0]
 80161c8:	f107 030c 	add.w	r3, r7, #12
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	2300      	movs	r3, #0
 80161d0:	2200      	movs	r2, #0
 80161d2:	2100      	movs	r1, #0
 80161d4:	f7fd fc0c 	bl	80139f0 <xTaskGenericNotifyFromISR>
  }

  // Switch to higher priority task if necessary
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d007      	beq.n	80161ee <HAL_UART_TxCpltCallback+0x3e>
 80161de:	4b08      	ldr	r3, [pc, #32]	; (8016200 <HAL_UART_TxCpltCallback+0x50>)
 80161e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161e4:	601a      	str	r2, [r3, #0]
 80161e6:	f3bf 8f4f 	dsb	sy
 80161ea:	f3bf 8f6f 	isb	sy

  // Track ISR exit for SystemView
  //  SEGGER_SYSVIEW_RecordExitISR();

}
 80161ee:	bf00      	nop
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	20033a70 	.word	0x20033a70
 80161fc:	200329dc 	.word	0x200329dc
 8016200:	e000ed04 	.word	0xe000ed04

08016204 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b086      	sub	sp, #24
 8016208:	af02      	add	r7, sp, #8
 801620a:	4603      	mov	r3, r0
 801620c:	80fb      	strh	r3, [r7, #6]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801620e:	2300      	movs	r3, #0
 8016210:	60fb      	str	r3, [r7, #12]

  // USB connection changed
  if ( GPIO_Pin == USB_CONNECT_Pin ) {
 8016212:	88fb      	ldrh	r3, [r7, #6]
 8016214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016218:	d10b      	bne.n	8016232 <HAL_GPIO_EXTI_Callback+0x2e>
    event_t evt = EVENT_USB_CONNECTION;
 801621a:	2304      	movs	r3, #4
 801621c:	72fb      	strb	r3, [r7, #11]
    xQueueSendFromISR( eventQueueHandle, &evt, &xHigherPriorityTaskWoken );
 801621e:	4b13      	ldr	r3, [pc, #76]	; (801626c <HAL_GPIO_EXTI_Callback+0x68>)
 8016220:	6818      	ldr	r0, [r3, #0]
 8016222:	f107 020c 	add.w	r2, r7, #12
 8016226:	f107 010b 	add.w	r1, r7, #11
 801622a:	2300      	movs	r3, #0
 801622c:	f7fa fdce 	bl	8010dcc <xQueueGenericSendFromISR>
 8016230:	e00d      	b.n	801624e <HAL_GPIO_EXTI_Callback+0x4a>
  }

  // Button press
  else if ( GPIO_Pin == BUTTON_1_Pin ) {
 8016232:	88fb      	ldrh	r3, [r7, #6]
 8016234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016238:	d109      	bne.n	801624e <HAL_GPIO_EXTI_Callback+0x4a>
    xTaskNotifyFromISR( buttonTaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken );
 801623a:	4b0d      	ldr	r3, [pc, #52]	; (8016270 <HAL_GPIO_EXTI_Callback+0x6c>)
 801623c:	6818      	ldr	r0, [r3, #0]
 801623e:	f107 030c 	add.w	r3, r7, #12
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	2300      	movs	r3, #0
 8016246:	2200      	movs	r2, #0
 8016248:	2100      	movs	r1, #0
 801624a:	f7fd fbd1 	bl	80139f0 <xTaskGenericNotifyFromISR>
  }

  // Switch to higher priority task if necessary
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d007      	beq.n	8016264 <HAL_GPIO_EXTI_Callback+0x60>
 8016254:	4b07      	ldr	r3, [pc, #28]	; (8016274 <HAL_GPIO_EXTI_Callback+0x70>)
 8016256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801625a:	601a      	str	r2, [r3, #0]
 801625c:	f3bf 8f4f 	dsb	sy
 8016260:	f3bf 8f6f 	isb	sy
}
 8016264:	bf00      	nop
 8016266:	3710      	adds	r7, #16
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	200325fc 	.word	0x200325fc
 8016270:	2003239c 	.word	0x2003239c
 8016274:	e000ed04 	.word	0xe000ed04

08016278 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback.
 * @param  huart UART handle.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016278:	b480      	push	{r7}
 801627a:	b085      	sub	sp, #20
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
     uint32_t error_code = huart->ErrorCode;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016284:	60fb      	str	r3, [r7, #12]
             /*!< DMA transfer error      */
             /*!< Overrun error           */
             /* Blocking errors. Transmission is stopped. Inform the caller*/
             //tty->error = ERR_IO;
     }
     if (0U != (error_code & (HAL_UART_ERROR_NE | HAL_UART_ERROR_FE | HAL_UART_ERROR_PE)))
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	f003 0307 	and.w	r3, r3, #7
 801628c:	2b00      	cmp	r3, #0
 801628e:	d000      	beq.n	8016292 <HAL_UART_ErrorCallback+0x1a>
              * corrupted bytes. */
			 //HAL_UART_Abort(huart);
			 // hdma_lpuart_rx.Instance->CNDTR = TERMINAL_RX_BUFFER_SIZE; // reset Ring Buffer counter
			 //OPTIONS.error = ERR_NOISE;
    	     //huart->ErrorCode= HAL_UART_ERROR_NONE;   // reset error, keep on going
    	     __NOP();
 8016290:	bf00      	nop
     }
}
 8016292:	bf00      	nop
 8016294:	3714      	adds	r7, #20
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr
	...

080162a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80162a8:	4b11      	ldr	r3, [pc, #68]	; (80162f0 <_sbrk+0x50>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d102      	bne.n	80162b6 <_sbrk+0x16>
		heap_end = &end;
 80162b0:	4b0f      	ldr	r3, [pc, #60]	; (80162f0 <_sbrk+0x50>)
 80162b2:	4a10      	ldr	r2, [pc, #64]	; (80162f4 <_sbrk+0x54>)
 80162b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80162b6:	4b0e      	ldr	r3, [pc, #56]	; (80162f0 <_sbrk+0x50>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80162bc:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <_sbrk+0x50>)
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	4413      	add	r3, r2
 80162c4:	466a      	mov	r2, sp
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d907      	bls.n	80162da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80162ca:	f003 f993 	bl	80195f4 <__errno>
 80162ce:	4603      	mov	r3, r0
 80162d0:	220c      	movs	r2, #12
 80162d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80162d4:	f04f 33ff 	mov.w	r3, #4294967295
 80162d8:	e006      	b.n	80162e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80162da:	4b05      	ldr	r3, [pc, #20]	; (80162f0 <_sbrk+0x50>)
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	4413      	add	r3, r2
 80162e2:	4a03      	ldr	r2, [pc, #12]	; (80162f0 <_sbrk+0x50>)
 80162e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80162e6:	68fb      	ldr	r3, [r7, #12]
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3710      	adds	r7, #16
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	200329d4 	.word	0x200329d4
 80162f4:	2003d030 	.word	0x2003d030

080162f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80162f8:	b480      	push	{r7}
 80162fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80162fc:	4b17      	ldr	r3, [pc, #92]	; (801635c <SystemInit+0x64>)
 80162fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016302:	4a16      	ldr	r2, [pc, #88]	; (801635c <SystemInit+0x64>)
 8016304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801630c:	4b14      	ldr	r3, [pc, #80]	; (8016360 <SystemInit+0x68>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4a13      	ldr	r2, [pc, #76]	; (8016360 <SystemInit+0x68>)
 8016312:	f043 0301 	orr.w	r3, r3, #1
 8016316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8016318:	4b11      	ldr	r3, [pc, #68]	; (8016360 <SystemInit+0x68>)
 801631a:	2200      	movs	r2, #0
 801631c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801631e:	4b10      	ldr	r3, [pc, #64]	; (8016360 <SystemInit+0x68>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	4a0f      	ldr	r2, [pc, #60]	; (8016360 <SystemInit+0x68>)
 8016324:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8016328:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801632c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801632e:	4b0c      	ldr	r3, [pc, #48]	; (8016360 <SystemInit+0x68>)
 8016330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016334:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8016336:	4b0a      	ldr	r3, [pc, #40]	; (8016360 <SystemInit+0x68>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	4a09      	ldr	r2, [pc, #36]	; (8016360 <SystemInit+0x68>)
 801633c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016340:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8016342:	4b07      	ldr	r3, [pc, #28]	; (8016360 <SystemInit+0x68>)
 8016344:	2200      	movs	r2, #0
 8016346:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016348:	4b04      	ldr	r3, [pc, #16]	; (801635c <SystemInit+0x64>)
 801634a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801634e:	609a      	str	r2, [r3, #8]
#endif
}
 8016350:	bf00      	nop
 8016352:	46bd      	mov	sp, r7
 8016354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016358:	4770      	bx	lr
 801635a:	bf00      	nop
 801635c:	e000ed00 	.word	0xe000ed00
 8016360:	40021000 	.word	0x40021000

08016364 <terminal_init>:
 * @brief  Initialize the terminal
 * @param  *huart: Handle to terminal UART
 * @retval None
 * ==================================================================== */
void terminal_init( UART_HandleTypeDef *huart )
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b086      	sub	sp, #24
 8016368:	af02      	add	r7, sp, #8
 801636a:	6078      	str	r0, [r7, #4]
  // Set status
  DEVICE_STATUS.terminal = DEVICE_FAIL;
 801636c:	4b26      	ldr	r3, [pc, #152]	; (8016408 <terminal_init+0xa4>)
 801636e:	2201      	movs	r2, #1
 8016370:	709a      	strb	r2, [r3, #2]

  // Store UART handle
  huartTerminal = huart;
 8016372:	4a26      	ldr	r2, [pc, #152]	; (801640c <terminal_init+0xa8>)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	6013      	str	r3, [r2, #0]

  // Create message buffer
  terminalTxBuffer = xMessageBufferCreate( TERMINAL_TX_BUFFER_SIZE );
 8016378:	2201      	movs	r2, #1
 801637a:	2100      	movs	r1, #0
 801637c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016380:	f7fb fbfc 	bl	8011b7c <xStreamBufferGenericCreate>
 8016384:	4603      	mov	r3, r0
 8016386:	4a22      	ldr	r2, [pc, #136]	; (8016410 <terminal_init+0xac>)
 8016388:	6013      	str	r3, [r2, #0]

  // Clear UART idle flag and enable IDLE LINE interrupt
  __HAL_UART_CLEAR_IDLEFLAG( huartTerminal );
 801638a:	4b20      	ldr	r3, [pc, #128]	; (801640c <terminal_init+0xa8>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2210      	movs	r2, #16
 8016392:	621a      	str	r2, [r3, #32]
  __HAL_UART_ENABLE_IT( huartTerminal, UART_IT_IDLE );
 8016394:	4b1d      	ldr	r3, [pc, #116]	; (801640c <terminal_init+0xa8>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	4b1b      	ldr	r3, [pc, #108]	; (801640c <terminal_init+0xa8>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	f042 0210 	orr.w	r2, r2, #16
 80163a6:	601a      	str	r2, [r3, #0]

  // Start DMA based data reception
  HAL_UART_Receive_DMA( huartTerminal, terminalRxBuffer, TERMINAL_RX_BUFFER_SIZE );
 80163a8:	4b18      	ldr	r3, [pc, #96]	; (801640c <terminal_init+0xa8>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80163b0:	4918      	ldr	r1, [pc, #96]	; (8016414 <terminal_init+0xb0>)
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7f0 fc58 	bl	8006c68 <HAL_UART_Receive_DMA>

  // Create RX and TX tasks
  BaseType_t ret;

  ret = xTaskCreate( terminalRxTask, "Terminal RX", TERMINAL_RX_STACK_SIZE, NULL, 1, &terminalRxTaskHandle );
 80163b8:	4b17      	ldr	r3, [pc, #92]	; (8016418 <terminal_init+0xb4>)
 80163ba:	9301      	str	r3, [sp, #4]
 80163bc:	2301      	movs	r3, #1
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	2300      	movs	r3, #0
 80163c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80163c6:	4915      	ldr	r1, [pc, #84]	; (801641c <terminal_init+0xb8>)
 80163c8:	4815      	ldr	r0, [pc, #84]	; (8016420 <terminal_init+0xbc>)
 80163ca:	f7fb ff63 	bl	8012294 <xTaskCreate>
 80163ce:	60f8      	str	r0, [r7, #12]
  if ( ret != pdPASS ) for ( ;; ) {
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	d000      	beq.n	80163d8 <terminal_init+0x74>
 80163d6:	e7fe      	b.n	80163d6 <terminal_init+0x72>
  }


  ret = xTaskCreate( terminalTxTask, "Terminal TX", TERMINAL_TX_STACK_SIZE, NULL, 1, &terminalTxTaskHandle );
 80163d8:	4b12      	ldr	r3, [pc, #72]	; (8016424 <terminal_init+0xc0>)
 80163da:	9301      	str	r3, [sp, #4]
 80163dc:	2301      	movs	r3, #1
 80163de:	9300      	str	r3, [sp, #0]
 80163e0:	2300      	movs	r3, #0
 80163e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80163e6:	4910      	ldr	r1, [pc, #64]	; (8016428 <terminal_init+0xc4>)
 80163e8:	4810      	ldr	r0, [pc, #64]	; (801642c <terminal_init+0xc8>)
 80163ea:	f7fb ff53 	bl	8012294 <xTaskCreate>
 80163ee:	60f8      	str	r0, [r7, #12]
  if ( ret != pdPASS ) for ( ;; ) {
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	d000      	beq.n	80163f8 <terminal_init+0x94>
 80163f6:	e7fe      	b.n	80163f6 <terminal_init+0x92>
  }

  // Set status
  DEVICE_STATUS.terminal = DEVICE_OKAY;
 80163f8:	4b03      	ldr	r3, [pc, #12]	; (8016408 <terminal_init+0xa4>)
 80163fa:	2200      	movs	r2, #0
 80163fc:	709a      	strb	r2, [r3, #2]
}
 80163fe:	bf00      	nop
 8016400:	3710      	adds	r7, #16
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	2003260c 	.word	0x2003260c
 801640c:	200329d8 	.word	0x200329d8
 8016410:	200329e4 	.word	0x200329e4
 8016414:	200329e8 	.word	0x200329e8
 8016418:	200329e0 	.word	0x200329e0
 801641c:	0801a5fc 	.word	0x0801a5fc
 8016420:	08016499 	.word	0x08016499
 8016424:	200329dc 	.word	0x200329dc
 8016428:	0801a608 	.word	0x0801a608
 801642c:	080165f9 	.word	0x080165f9

08016430 <terminal_reset>:
 * @brief  Deinitialize the terminal
 * @param  None
 * @retval None
 * ==================================================================== */
void terminal_reset( void )
{
 8016430:	b580      	push	{r7, lr}
 8016432:	af00      	add	r7, sp, #0
  // Disable IDLE_LINE interrupt and clear UART idle flag
  __HAL_UART_DISABLE_IT( huartTerminal, UART_IT_IDLE );
 8016434:	4b16      	ldr	r3, [pc, #88]	; (8016490 <terminal_reset+0x60>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	681a      	ldr	r2, [r3, #0]
 801643c:	4b14      	ldr	r3, [pc, #80]	; (8016490 <terminal_reset+0x60>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	f022 0210 	bic.w	r2, r2, #16
 8016446:	601a      	str	r2, [r3, #0]
  __HAL_UART_CLEAR_IDLEFLAG( huartTerminal );
 8016448:	4b11      	ldr	r3, [pc, #68]	; (8016490 <terminal_reset+0x60>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2210      	movs	r2, #16
 8016450:	621a      	str	r2, [r3, #32]

  // Stop DMA transmission
  HAL_UART_DMAStop( huartTerminal );
 8016452:	4b0f      	ldr	r3, [pc, #60]	; (8016490 <terminal_reset+0x60>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4618      	mov	r0, r3
 8016458:	f7f0 fc8a 	bl	8006d70 <HAL_UART_DMAStop>

  //HAL_UART_MspDeInit(huartTerminal);
  //MX_LPUART1_UART_Init();
  // Clear UART idle flag and enable IDLE LINE interrupt
  __HAL_UART_CLEAR_IDLEFLAG( huartTerminal );
 801645c:	4b0c      	ldr	r3, [pc, #48]	; (8016490 <terminal_reset+0x60>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2210      	movs	r2, #16
 8016464:	621a      	str	r2, [r3, #32]
  __HAL_UART_ENABLE_IT( huartTerminal, UART_IT_IDLE );
 8016466:	4b0a      	ldr	r3, [pc, #40]	; (8016490 <terminal_reset+0x60>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	681a      	ldr	r2, [r3, #0]
 801646e:	4b08      	ldr	r3, [pc, #32]	; (8016490 <terminal_reset+0x60>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	f042 0210 	orr.w	r2, r2, #16
 8016478:	601a      	str	r2, [r3, #0]

  // Start DMA based data reception
  HAL_UART_Receive_DMA( huartTerminal, terminalRxBuffer, TERMINAL_RX_BUFFER_SIZE );
 801647a:	4b05      	ldr	r3, [pc, #20]	; (8016490 <terminal_reset+0x60>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016482:	4904      	ldr	r1, [pc, #16]	; (8016494 <terminal_reset+0x64>)
 8016484:	4618      	mov	r0, r3
 8016486:	f7f0 fbef 	bl	8006c68 <HAL_UART_Receive_DMA>

}
 801648a:	bf00      	nop
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	200329d8 	.word	0x200329d8
 8016494:	200329e8 	.word	0x200329e8

08016498 <terminalRxTask>:
 * @brief  Terminal receive (RX) task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void terminalRxTask( void *pvParameters )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 801649e:	af00      	add	r7, sp, #0
 80164a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80164a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80164a8:	6018      	str	r0, [r3, #0]
  uint32_t len = 0;
 80164aa:	2300      	movs	r3, #0
 80164ac:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  // Command input and output buffers
  char cmdIn[MAX_INPUT_SIZE];
  char cmdOut[MAX_OUTPUT_SIZE];

  // Clear input string buffer
  memset( cmdIn, '\0', MAX_INPUT_SIZE );
 80164b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80164b4:	22fa      	movs	r2, #250	; 0xfa
 80164b6:	2100      	movs	r1, #0
 80164b8:	4618      	mov	r0, r3
 80164ba:	f003 f8e3 	bl	8019684 <memset>

  // Print command line character
  to_terminal( "> " );
 80164be:	4849      	ldr	r0, [pc, #292]	; (80165e4 <terminalRxTask+0x14c>)
 80164c0:	f000 f900 	bl	80166c4 <to_terminal>

  // Endless loop
  for ( ;; ) {

		// Get next character from terminal
		nb = nextMessageByte();
 80164c4:	f000 f8d2 	bl	801666c <nextMessageByte>
 80164c8:	4603      	mov	r3, r0
 80164ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

		// catch framing error:
		// reset dma and uart in case of framing error
		if(huartTerminal->ErrorCode != HAL_UART_ERROR_NONE){
 80164ce:	4b46      	ldr	r3, [pc, #280]	; (80165e8 <terminalRxTask+0x150>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d014      	beq.n	8016502 <terminalRxTask+0x6a>
			HAL_UART_Abort(huartTerminal);
 80164d8:	4b43      	ldr	r3, [pc, #268]	; (80165e8 <terminalRxTask+0x150>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4618      	mov	r0, r3
 80164de:	f7f0 fcb2 	bl	8006e46 <HAL_UART_Abort>
			HAL_DMA_Abort(&hdma_lpuart_rx);
 80164e2:	4842      	ldr	r0, [pc, #264]	; (80165ec <terminalRxTask+0x154>)
 80164e4:	f7ea fb74 	bl	8000bd0 <HAL_DMA_Abort>
		    // Reset buffer
		    memset( cmdIn, '\0', MAX_INPUT_SIZE );
 80164e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80164ec:	22fa      	movs	r2, #250	; 0xfa
 80164ee:	2100      	movs	r1, #0
 80164f0:	4618      	mov	r0, r3
 80164f2:	f003 f8c7 	bl	8019684 <memset>
		    len = 0;
 80164f6:	2300      	movs	r3, #0
 80164f8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
			terminal_reset();
 80164fc:	f7ff ff98 	bl	8016430 <terminal_reset>
 8016500:	e7e0      	b.n	80164c4 <terminalRxTask+0x2c>
		}
		else{

			// Echo back to terminal
			xMessageBufferSend( terminalTxBuffer, &nb, 1, 0 );
 8016502:	4b3b      	ldr	r3, [pc, #236]	; (80165f0 <terminalRxTask+0x158>)
 8016504:	6818      	ldr	r0, [r3, #0]
 8016506:	f207 11ff 	addw	r1, r7, #511	; 0x1ff
 801650a:	2300      	movs	r3, #0
 801650c:	2201      	movs	r2, #1
 801650e:	f7fb fbb8 	bl	8011c82 <xStreamBufferSend>

			// End of line detected: execute command
			if ( nb == '\n' || nb == '\r' ) {
 8016512:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8016516:	2b0a      	cmp	r3, #10
 8016518:	d003      	beq.n	8016522 <terminalRxTask+0x8a>
 801651a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 801651e:	2b0d      	cmp	r3, #13
 8016520:	d12b      	bne.n	801657a <terminalRxTask+0xe2>

			  // Add implicit '\n' to '\r'
			  if ( nb == '\r' ) to_terminal( "\n" );
 8016522:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8016526:	2b0d      	cmp	r3, #13
 8016528:	d102      	bne.n	8016530 <terminalRxTask+0x98>
 801652a:	4832      	ldr	r0, [pc, #200]	; (80165f4 <terminalRxTask+0x15c>)
 801652c:	f000 f8ca 	bl	80166c4 <to_terminal>


			  // Execute command and print result
			  if ( len > 0 ) {
 8016530:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8016534:	2b00      	cmp	r3, #0
 8016536:	d012      	beq.n	801655e <terminalRxTask+0xc6>
				do {
				  ret = FreeRTOS_CLIProcessCommand( cmdIn, cmdOut, MAX_OUTPUT_SIZE );
 8016538:	f107 0108 	add.w	r1, r7, #8
 801653c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8016540:	22fa      	movs	r2, #250	; 0xfa
 8016542:	4618      	mov	r0, r3
 8016544:	f7fe f83e 	bl	80145c4 <FreeRTOS_CLIProcessCommand>
 8016548:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
				  to_terminal( cmdOut );
 801654c:	f107 0308 	add.w	r3, r7, #8
 8016550:	4618      	mov	r0, r3
 8016552:	f000 f8b7 	bl	80166c4 <to_terminal>
				} while ( ret != pdFALSE );
 8016556:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801655a:	2b00      	cmp	r3, #0
 801655c:	d1ec      	bne.n	8016538 <terminalRxTask+0xa0>
			  }


			  // Reset buffer
			  memset( cmdIn, '\0', MAX_INPUT_SIZE );
 801655e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8016562:	22fa      	movs	r2, #250	; 0xfa
 8016564:	2100      	movs	r1, #0
 8016566:	4618      	mov	r0, r3
 8016568:	f003 f88c 	bl	8019684 <memset>
			  len = 0;
 801656c:	2300      	movs	r3, #0
 801656e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

			  // Print command line character
			  to_terminal( "> " );
 8016572:	481c      	ldr	r0, [pc, #112]	; (80165e4 <terminalRxTask+0x14c>)
 8016574:	f000 f8a6 	bl	80166c4 <to_terminal>
 8016578:	e033      	b.n	80165e2 <terminalRxTask+0x14a>

			// Backspace or ASCII DEL detected
			} else if ( nb == '\b' || nb == 0x7F ) {
 801657a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 801657e:	2b08      	cmp	r3, #8
 8016580:	d003      	beq.n	801658a <terminalRxTask+0xf2>
 8016582:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8016586:	2b7f      	cmp	r3, #127	; 0x7f
 8016588:	d112      	bne.n	80165b0 <terminalRxTask+0x118>
			  if ( len > 0 ) cmdIn[--len] = '\0';
 801658a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801658e:	2b00      	cmp	r3, #0
 8016590:	d027      	beq.n	80165e2 <terminalRxTask+0x14a>
 8016592:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8016596:	3b01      	subs	r3, #1
 8016598:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801659c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80165a0:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80165a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80165a8:	4413      	add	r3, r2
 80165aa:	2200      	movs	r2, #0
 80165ac:	701a      	strb	r2, [r3, #0]
 80165ae:	e018      	b.n	80165e2 <terminalRxTask+0x14a>

			// Normal ASCII character detected
			} else if ( nb >= ' ' && nb <= '~' ) {
 80165b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80165b4:	2b1f      	cmp	r3, #31
 80165b6:	d985      	bls.n	80164c4 <terminalRxTask+0x2c>
 80165b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80165bc:	2b7e      	cmp	r3, #126	; 0x7e
 80165be:	d881      	bhi.n	80164c4 <terminalRxTask+0x2c>
			  if ( len < MAX_INPUT_SIZE - 1 ) cmdIn[len++] = nb;
 80165c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80165c4:	2bf8      	cmp	r3, #248	; 0xf8
 80165c6:	f63f af7d 	bhi.w	80164c4 <terminalRxTask+0x2c>
 80165ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80165ce:	1c5a      	adds	r2, r3, #1
 80165d0:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80165d4:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 80165d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80165dc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80165e0:	54d1      	strb	r1, [r2, r3]
		nb = nextMessageByte();
 80165e2:	e76f      	b.n	80164c4 <terminalRxTask+0x2c>
 80165e4:	0801a614 	.word	0x0801a614
 80165e8:	200329d8 	.word	0x200329d8
 80165ec:	20033b70 	.word	0x20033b70
 80165f0:	200329e4 	.word	0x200329e4
 80165f4:	0801a618 	.word	0x0801a618

080165f8 <terminalTxTask>:
 * @brief  Terminal transmit (TX) task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void terminalTxTask( void * pvParameters )
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80165fe:	b084      	sub	sp, #16
 8016600:	af00      	add	r7, sp, #0
 8016602:	f107 0310 	add.w	r3, r7, #16
 8016606:	f843 0c0c 	str.w	r0, [r3, #-12]
  // Number of received bytes
  size_t nBytes = 0;
 801660a:	2300      	movs	r3, #0
 801660c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8016610:	f102 020c 	add.w	r2, r2, #12
 8016614:	6013      	str	r3, [r2, #0]
  uint8_t buffer[TERMINAL_TX_BUFFER_SIZE];

  // Endless loop
  for ( ;; ) {
    // Wait for new data to arrive
    nBytes = xMessageBufferReceive( terminalTxBuffer, buffer, TERMINAL_TX_BUFFER_SIZE, portMAX_DELAY );
 8016616:	4b13      	ldr	r3, [pc, #76]	; (8016664 <terminalTxTask+0x6c>)
 8016618:	6818      	ldr	r0, [r3, #0]
 801661a:	f107 0110 	add.w	r1, r7, #16
 801661e:	3904      	subs	r1, #4
 8016620:	f04f 33ff 	mov.w	r3, #4294967295
 8016624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016628:	f7fb fc1c 	bl	8011e64 <xStreamBufferReceive>
 801662c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8016630:	f103 030c 	add.w	r3, r3, #12
 8016634:	6018      	str	r0, [r3, #0]

    // Transmit bytes via DMA
    HAL_UART_Transmit_DMA( huartTerminal, buffer, nBytes );
 8016636:	4b0c      	ldr	r3, [pc, #48]	; (8016668 <terminalTxTask+0x70>)
 8016638:	6818      	ldr	r0, [r3, #0]
 801663a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801663e:	f103 030c 	add.w	r3, r3, #12
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	b29a      	uxth	r2, r3
 8016646:	f107 0310 	add.w	r3, r7, #16
 801664a:	3b04      	subs	r3, #4
 801664c:	4619      	mov	r1, r3
 801664e:	f7f0 fa8f 	bl	8006b70 <HAL_UART_Transmit_DMA>
    // Wait for transmission complete
    xTaskNotifyWait( 0x00, 0x00, NULL, portMAX_DELAY );
 8016652:	f04f 33ff 	mov.w	r3, #4294967295
 8016656:	2200      	movs	r2, #0
 8016658:	2100      	movs	r1, #0
 801665a:	2000      	movs	r0, #0
 801665c:	f7fd f8b0 	bl	80137c0 <xTaskNotifyWait>
    nBytes = xMessageBufferReceive( terminalTxBuffer, buffer, TERMINAL_TX_BUFFER_SIZE, portMAX_DELAY );
 8016660:	e7d9      	b.n	8016616 <terminalTxTask+0x1e>
 8016662:	bf00      	nop
 8016664:	200329e4 	.word	0x200329e4
 8016668:	200329d8 	.word	0x200329d8

0801666c <nextMessageByte>:
 * @brief  Read next byte from terminal ring buffer
 * @param  None
 * @retval Next byte
 * ==================================================================== */
static uint8_t nextMessageByte( void )
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
  // Read and write positions
  static uint32_t toRead = 0;
  static uint32_t toWrite = 0;

  // Wait for new bytes to arrive
  if ( toRead == toWrite ) xTaskNotifyWait( 0x00, 0x00, &toWrite, portMAX_DELAY );
 8016672:	4b11      	ldr	r3, [pc, #68]	; (80166b8 <nextMessageByte+0x4c>)
 8016674:	681a      	ldr	r2, [r3, #0]
 8016676:	4b11      	ldr	r3, [pc, #68]	; (80166bc <nextMessageByte+0x50>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	429a      	cmp	r2, r3
 801667c:	d106      	bne.n	801668c <nextMessageByte+0x20>
 801667e:	f04f 33ff 	mov.w	r3, #4294967295
 8016682:	4a0e      	ldr	r2, [pc, #56]	; (80166bc <nextMessageByte+0x50>)
 8016684:	2100      	movs	r1, #0
 8016686:	2000      	movs	r0, #0
 8016688:	f7fd f89a 	bl	80137c0 <xTaskNotifyWait>

  // Read next byte from ring buffer
  uint8_t nextByte = terminalRxBuffer[toRead++];
 801668c:	4b0a      	ldr	r3, [pc, #40]	; (80166b8 <nextMessageByte+0x4c>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	1c5a      	adds	r2, r3, #1
 8016692:	4909      	ldr	r1, [pc, #36]	; (80166b8 <nextMessageByte+0x4c>)
 8016694:	600a      	str	r2, [r1, #0]
 8016696:	4a0a      	ldr	r2, [pc, #40]	; (80166c0 <nextMessageByte+0x54>)
 8016698:	5cd3      	ldrb	r3, [r2, r3]
 801669a:	71fb      	strb	r3, [r7, #7]
  if ( toRead == TERMINAL_RX_BUFFER_SIZE ) {
 801669c:	4b06      	ldr	r3, [pc, #24]	; (80166b8 <nextMessageByte+0x4c>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166a4:	d102      	bne.n	80166ac <nextMessageByte+0x40>
    toRead = 0;
 80166a6:	4b04      	ldr	r3, [pc, #16]	; (80166b8 <nextMessageByte+0x4c>)
 80166a8:	2200      	movs	r2, #0
 80166aa:	601a      	str	r2, [r3, #0]
  }

  // Return byte
  return nextByte;
 80166ac:	79fb      	ldrb	r3, [r7, #7]
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	200339e8 	.word	0x200339e8
 80166bc:	200339ec 	.word	0x200339ec
 80166c0:	200329e8 	.word	0x200329e8

080166c4 <to_terminal>:
 * @brief  Write a string to terminal
 * @param  *str: String
 * @retval None
 * ==================================================================== */
void to_terminal( const char * str )
{
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  uint32_t len = strlen( str );
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f7e9 fd8f 	bl	80001f0 <strlen>
 80166d2:	60f8      	str	r0, [r7, #12]

  if ( len > 0 )
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00a      	beq.n	80166f0 <to_terminal+0x2c>
	  xMessageBufferSend( terminalTxBuffer, (void * ) str, strlen( str ), 0 );
 80166da:	4b07      	ldr	r3, [pc, #28]	; (80166f8 <to_terminal+0x34>)
 80166dc:	681c      	ldr	r4, [r3, #0]
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f7e9 fd86 	bl	80001f0 <strlen>
 80166e4:	4602      	mov	r2, r0
 80166e6:	2300      	movs	r3, #0
 80166e8:	6879      	ldr	r1, [r7, #4]
 80166ea:	4620      	mov	r0, r4
 80166ec:	f7fb fac9 	bl	8011c82 <xStreamBufferSend>
}
 80166f0:	bf00      	nop
 80166f2:	3714      	adds	r7, #20
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd90      	pop	{r4, r7, pc}
 80166f8:	200329e4 	.word	0x200329e4

080166fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b088      	sub	sp, #32
 8016700:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016702:	f107 0310 	add.w	r3, r7, #16
 8016706:	2200      	movs	r2, #0
 8016708:	601a      	str	r2, [r3, #0]
 801670a:	605a      	str	r2, [r3, #4]
 801670c:	609a      	str	r2, [r3, #8]
 801670e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016710:	1d3b      	adds	r3, r7, #4
 8016712:	2200      	movs	r2, #0
 8016714:	601a      	str	r2, [r3, #0]
 8016716:	605a      	str	r2, [r3, #4]
 8016718:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 801671a:	4b20      	ldr	r3, [pc, #128]	; (801679c <MX_TIM1_Init+0xa0>)
 801671c:	4a20      	ldr	r2, [pc, #128]	; (80167a0 <MX_TIM1_Init+0xa4>)
 801671e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1230;
 8016720:	4b1e      	ldr	r3, [pc, #120]	; (801679c <MX_TIM1_Init+0xa0>)
 8016722:	f240 42ce 	movw	r2, #1230	; 0x4ce
 8016726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016728:	4b1c      	ldr	r3, [pc, #112]	; (801679c <MX_TIM1_Init+0xa0>)
 801672a:	2200      	movs	r2, #0
 801672c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 801672e:	4b1b      	ldr	r3, [pc, #108]	; (801679c <MX_TIM1_Init+0xa0>)
 8016730:	22ff      	movs	r2, #255	; 0xff
 8016732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016734:	4b19      	ldr	r3, [pc, #100]	; (801679c <MX_TIM1_Init+0xa0>)
 8016736:	2200      	movs	r2, #0
 8016738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801673a:	4b18      	ldr	r3, [pc, #96]	; (801679c <MX_TIM1_Init+0xa0>)
 801673c:	2200      	movs	r2, #0
 801673e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016740:	4b16      	ldr	r3, [pc, #88]	; (801679c <MX_TIM1_Init+0xa0>)
 8016742:	2200      	movs	r2, #0
 8016744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8016746:	4815      	ldr	r0, [pc, #84]	; (801679c <MX_TIM1_Init+0xa0>)
 8016748:	f7ef fdb2 	bl	80062b0 <HAL_TIM_Base_Init>
 801674c:	4603      	mov	r3, r0
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8016752:	f7fe fdd8 	bl	8015306 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801675a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801675c:	f107 0310 	add.w	r3, r7, #16
 8016760:	4619      	mov	r1, r3
 8016762:	480e      	ldr	r0, [pc, #56]	; (801679c <MX_TIM1_Init+0xa0>)
 8016764:	f7ef ff19 	bl	800659a <HAL_TIM_ConfigClockSource>
 8016768:	4603      	mov	r3, r0
 801676a:	2b00      	cmp	r3, #0
 801676c:	d001      	beq.n	8016772 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 801676e:	f7fe fdca 	bl	8015306 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016772:	2300      	movs	r3, #0
 8016774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016776:	2300      	movs	r3, #0
 8016778:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801677a:	2300      	movs	r3, #0
 801677c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801677e:	1d3b      	adds	r3, r7, #4
 8016780:	4619      	mov	r1, r3
 8016782:	4806      	ldr	r0, [pc, #24]	; (801679c <MX_TIM1_Init+0xa0>)
 8016784:	f7f0 f92c 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8016788:	4603      	mov	r3, r0
 801678a:	2b00      	cmp	r3, #0
 801678c:	d001      	beq.n	8016792 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 801678e:	f7fe fdba 	bl	8015306 <Error_Handler>
  }

}
 8016792:	bf00      	nop
 8016794:	3720      	adds	r7, #32
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	200339f0 	.word	0x200339f0
 80167a0:	40012c00 	.word	0x40012c00

080167a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80167aa:	1d3b      	adds	r3, r7, #4
 80167ac:	2200      	movs	r2, #0
 80167ae:	601a      	str	r2, [r3, #0]
 80167b0:	605a      	str	r2, [r3, #4]
 80167b2:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80167b4:	4b14      	ldr	r3, [pc, #80]	; (8016808 <MX_TIM7_Init+0x64>)
 80167b6:	4a15      	ldr	r2, [pc, #84]	; (801680c <MX_TIM7_Init+0x68>)
 80167b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1600;
 80167ba:	4b13      	ldr	r3, [pc, #76]	; (8016808 <MX_TIM7_Init+0x64>)
 80167bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80167c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80167c2:	4b11      	ldr	r3, [pc, #68]	; (8016808 <MX_TIM7_Init+0x64>)
 80167c4:	2200      	movs	r2, #0
 80167c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1;
 80167c8:	4b0f      	ldr	r3, [pc, #60]	; (8016808 <MX_TIM7_Init+0x64>)
 80167ca:	2201      	movs	r2, #1
 80167cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80167ce:	4b0e      	ldr	r3, [pc, #56]	; (8016808 <MX_TIM7_Init+0x64>)
 80167d0:	2200      	movs	r2, #0
 80167d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80167d4:	480c      	ldr	r0, [pc, #48]	; (8016808 <MX_TIM7_Init+0x64>)
 80167d6:	f7ef fd6b 	bl	80062b0 <HAL_TIM_Base_Init>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d001      	beq.n	80167e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80167e0:	f7fe fd91 	bl	8015306 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80167e4:	2300      	movs	r3, #0
 80167e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80167e8:	2300      	movs	r3, #0
 80167ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80167ec:	1d3b      	adds	r3, r7, #4
 80167ee:	4619      	mov	r1, r3
 80167f0:	4805      	ldr	r0, [pc, #20]	; (8016808 <MX_TIM7_Init+0x64>)
 80167f2:	f7f0 f8f5 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 80167f6:	4603      	mov	r3, r0
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d001      	beq.n	8016800 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80167fc:	f7fe fd83 	bl	8015306 <Error_Handler>
  }

}
 8016800:	bf00      	nop
 8016802:	3710      	adds	r7, #16
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	20033a30 	.word	0x20033a30
 801680c:	40001400 	.word	0x40001400

08016810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4a16      	ldr	r2, [pc, #88]	; (8016878 <HAL_TIM_Base_MspInit+0x68>)
 801681e:	4293      	cmp	r3, r2
 8016820:	d10c      	bne.n	801683c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8016822:	4b16      	ldr	r3, [pc, #88]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 8016824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016826:	4a15      	ldr	r2, [pc, #84]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 8016828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801682c:	6613      	str	r3, [r2, #96]	; 0x60
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 8016830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016836:	60fb      	str	r3, [r7, #12]
 8016838:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 801683a:	e018      	b.n	801686e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	4a0f      	ldr	r2, [pc, #60]	; (8016880 <HAL_TIM_Base_MspInit+0x70>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d113      	bne.n	801686e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8016846:	4b0d      	ldr	r3, [pc, #52]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 8016848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801684a:	4a0c      	ldr	r2, [pc, #48]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 801684c:	f043 0320 	orr.w	r3, r3, #32
 8016850:	6593      	str	r3, [r2, #88]	; 0x58
 8016852:	4b0a      	ldr	r3, [pc, #40]	; (801687c <HAL_TIM_Base_MspInit+0x6c>)
 8016854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016856:	f003 0320 	and.w	r3, r3, #32
 801685a:	60bb      	str	r3, [r7, #8]
 801685c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801685e:	2200      	movs	r2, #0
 8016860:	2105      	movs	r1, #5
 8016862:	2037      	movs	r0, #55	; 0x37
 8016864:	f7e9 ffd2 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8016868:	2037      	movs	r0, #55	; 0x37
 801686a:	f7e9 ffeb 	bl	8000844 <HAL_NVIC_EnableIRQ>
}
 801686e:	bf00      	nop
 8016870:	3710      	adds	r7, #16
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	40012c00 	.word	0x40012c00
 801687c:	40021000 	.word	0x40021000
 8016880:	40001400 	.word	0x40001400

08016884 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8016888:	4b12      	ldr	r3, [pc, #72]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 801688a:	4a13      	ldr	r2, [pc, #76]	; (80168d8 <MX_LPUART1_UART_Init+0x54>)
 801688c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801688e:	4b11      	ldr	r3, [pc, #68]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 8016890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8016894:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8016896:	4b0f      	ldr	r3, [pc, #60]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 8016898:	2200      	movs	r2, #0
 801689a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801689c:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 801689e:	2200      	movs	r2, #0
 80168a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80168a2:	4b0c      	ldr	r3, [pc, #48]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168a4:	2200      	movs	r2, #0
 80168a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80168a8:	4b0a      	ldr	r3, [pc, #40]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168aa:	220c      	movs	r2, #12
 80168ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80168ae:	4b09      	ldr	r3, [pc, #36]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168b0:	2200      	movs	r2, #0
 80168b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80168b4:	4b07      	ldr	r3, [pc, #28]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168b6:	2200      	movs	r2, #0
 80168b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80168ba:	4b06      	ldr	r3, [pc, #24]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168bc:	2200      	movs	r2, #0
 80168be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80168c0:	4804      	ldr	r0, [pc, #16]	; (80168d4 <MX_LPUART1_UART_Init+0x50>)
 80168c2:	f7f0 f907 	bl	8006ad4 <HAL_UART_Init>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80168cc:	f7fe fd1b 	bl	8015306 <Error_Handler>
  }

}
 80168d0:	bf00      	nop
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	20033a70 	.word	0x20033a70
 80168d8:	40008000 	.word	0x40008000

080168dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80168e0:	4b14      	ldr	r3, [pc, #80]	; (8016934 <MX_USART3_UART_Init+0x58>)
 80168e2:	4a15      	ldr	r2, [pc, #84]	; (8016938 <MX_USART3_UART_Init+0x5c>)
 80168e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80168e6:	4b13      	ldr	r3, [pc, #76]	; (8016934 <MX_USART3_UART_Init+0x58>)
 80168e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80168ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80168ee:	4b11      	ldr	r3, [pc, #68]	; (8016934 <MX_USART3_UART_Init+0x58>)
 80168f0:	2200      	movs	r2, #0
 80168f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80168f4:	4b0f      	ldr	r3, [pc, #60]	; (8016934 <MX_USART3_UART_Init+0x58>)
 80168f6:	2200      	movs	r2, #0
 80168f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80168fa:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <MX_USART3_UART_Init+0x58>)
 80168fc:	2200      	movs	r2, #0
 80168fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8016900:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <MX_USART3_UART_Init+0x58>)
 8016902:	220c      	movs	r2, #12
 8016904:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8016906:	4b0b      	ldr	r3, [pc, #44]	; (8016934 <MX_USART3_UART_Init+0x58>)
 8016908:	2200      	movs	r2, #0
 801690a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801690c:	4b09      	ldr	r3, [pc, #36]	; (8016934 <MX_USART3_UART_Init+0x58>)
 801690e:	2200      	movs	r2, #0
 8016910:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8016912:	4b08      	ldr	r3, [pc, #32]	; (8016934 <MX_USART3_UART_Init+0x58>)
 8016914:	2200      	movs	r2, #0
 8016916:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8016918:	4b06      	ldr	r3, [pc, #24]	; (8016934 <MX_USART3_UART_Init+0x58>)
 801691a:	2200      	movs	r2, #0
 801691c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801691e:	4805      	ldr	r0, [pc, #20]	; (8016934 <MX_USART3_UART_Init+0x58>)
 8016920:	f7f0 f8d8 	bl	8006ad4 <HAL_UART_Init>
 8016924:	4603      	mov	r3, r0
 8016926:	2b00      	cmp	r3, #0
 8016928:	d001      	beq.n	801692e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 801692a:	f7fe fcec 	bl	8015306 <Error_Handler>
  }

}
 801692e:	bf00      	nop
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	20033af0 	.word	0x20033af0
 8016938:	40004800 	.word	0x40004800

0801693c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b08c      	sub	sp, #48	; 0x30
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016944:	f107 031c 	add.w	r3, r7, #28
 8016948:	2200      	movs	r2, #0
 801694a:	601a      	str	r2, [r3, #0]
 801694c:	605a      	str	r2, [r3, #4]
 801694e:	609a      	str	r2, [r3, #8]
 8016950:	60da      	str	r2, [r3, #12]
 8016952:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	4a8b      	ldr	r2, [pc, #556]	; (8016b88 <HAL_UART_MspInit+0x24c>)
 801695a:	4293      	cmp	r3, r2
 801695c:	f040 8086 	bne.w	8016a6c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8016960:	4b8a      	ldr	r3, [pc, #552]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016964:	4a89      	ldr	r2, [pc, #548]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016966:	f043 0301 	orr.w	r3, r3, #1
 801696a:	65d3      	str	r3, [r2, #92]	; 0x5c
 801696c:	4b87      	ldr	r3, [pc, #540]	; (8016b8c <HAL_UART_MspInit+0x250>)
 801696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016970:	f003 0301 	and.w	r3, r3, #1
 8016974:	61bb      	str	r3, [r7, #24]
 8016976:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8016978:	4b84      	ldr	r3, [pc, #528]	; (8016b8c <HAL_UART_MspInit+0x250>)
 801697a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801697c:	4a83      	ldr	r2, [pc, #524]	; (8016b8c <HAL_UART_MspInit+0x250>)
 801697e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016984:	4b81      	ldr	r3, [pc, #516]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801698c:	617b      	str	r3, [r7, #20]
 801698e:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8016990:	f7eb fef8 	bl	8002784 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 8016994:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801699a:	2302      	movs	r3, #2
 801699c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801699e:	2300      	movs	r3, #0
 80169a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169a2:	2303      	movs	r3, #3
 80169a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80169a6:	2308      	movs	r3, #8
 80169a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80169aa:	f107 031c 	add.w	r3, r7, #28
 80169ae:	4619      	mov	r1, r3
 80169b0:	4877      	ldr	r0, [pc, #476]	; (8016b90 <HAL_UART_MspInit+0x254>)
 80169b2:	f7ea fa77 	bl	8000ea4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80169b6:	4b77      	ldr	r3, [pc, #476]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169b8:	4a77      	ldr	r2, [pc, #476]	; (8016b98 <HAL_UART_MspInit+0x25c>)
 80169ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80169bc:	4b75      	ldr	r3, [pc, #468]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169be:	2204      	movs	r2, #4
 80169c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80169c2:	4b74      	ldr	r3, [pc, #464]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169c4:	2200      	movs	r2, #0
 80169c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80169c8:	4b72      	ldr	r3, [pc, #456]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169ca:	2200      	movs	r2, #0
 80169cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80169ce:	4b71      	ldr	r3, [pc, #452]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169d0:	2280      	movs	r2, #128	; 0x80
 80169d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80169d4:	4b6f      	ldr	r3, [pc, #444]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169d6:	2200      	movs	r2, #0
 80169d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80169da:	4b6e      	ldr	r3, [pc, #440]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169dc:	2200      	movs	r2, #0
 80169de:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 80169e0:	4b6c      	ldr	r3, [pc, #432]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169e2:	2220      	movs	r2, #32
 80169e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80169e6:	4b6b      	ldr	r3, [pc, #428]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169e8:	2200      	movs	r2, #0
 80169ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80169ec:	4869      	ldr	r0, [pc, #420]	; (8016b94 <HAL_UART_MspInit+0x258>)
 80169ee:	f7e9 ff45 	bl	800087c <HAL_DMA_Init>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d001      	beq.n	80169fc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80169f8:	f7fe fc85 	bl	8015306 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	4a65      	ldr	r2, [pc, #404]	; (8016b94 <HAL_UART_MspInit+0x258>)
 8016a00:	66da      	str	r2, [r3, #108]	; 0x6c
 8016a02:	4a64      	ldr	r2, [pc, #400]	; (8016b94 <HAL_UART_MspInit+0x258>)
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART_TX Init */
    hdma_lpuart_tx.Instance = DMA2_Channel6;
 8016a08:	4b64      	ldr	r3, [pc, #400]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a0a:	4a65      	ldr	r2, [pc, #404]	; (8016ba0 <HAL_UART_MspInit+0x264>)
 8016a0c:	601a      	str	r2, [r3, #0]
    hdma_lpuart_tx.Init.Request = DMA_REQUEST_4;
 8016a0e:	4b63      	ldr	r3, [pc, #396]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a10:	2204      	movs	r2, #4
 8016a12:	605a      	str	r2, [r3, #4]
    hdma_lpuart_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016a14:	4b61      	ldr	r3, [pc, #388]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a16:	2210      	movs	r2, #16
 8016a18:	609a      	str	r2, [r3, #8]
    hdma_lpuart_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016a1a:	4b60      	ldr	r3, [pc, #384]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	60da      	str	r2, [r3, #12]
    hdma_lpuart_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016a20:	4b5e      	ldr	r3, [pc, #376]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a22:	2280      	movs	r2, #128	; 0x80
 8016a24:	611a      	str	r2, [r3, #16]
    hdma_lpuart_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016a26:	4b5d      	ldr	r3, [pc, #372]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a28:	2200      	movs	r2, #0
 8016a2a:	615a      	str	r2, [r3, #20]
    hdma_lpuart_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016a2c:	4b5b      	ldr	r3, [pc, #364]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a2e:	2200      	movs	r2, #0
 8016a30:	619a      	str	r2, [r3, #24]
    hdma_lpuart_tx.Init.Mode = DMA_NORMAL;
 8016a32:	4b5a      	ldr	r3, [pc, #360]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a34:	2200      	movs	r2, #0
 8016a36:	61da      	str	r2, [r3, #28]
    hdma_lpuart_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016a38:	4b58      	ldr	r3, [pc, #352]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_tx) != HAL_OK)
 8016a3e:	4857      	ldr	r0, [pc, #348]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a40:	f7e9 ff1c 	bl	800087c <HAL_DMA_Init>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d001      	beq.n	8016a4e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8016a4a:	f7fe fc5c 	bl	8015306 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart_tx);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	4a52      	ldr	r2, [pc, #328]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a52:	669a      	str	r2, [r3, #104]	; 0x68
 8016a54:	4a51      	ldr	r2, [pc, #324]	; (8016b9c <HAL_UART_MspInit+0x260>)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	2105      	movs	r1, #5
 8016a5e:	2046      	movs	r0, #70	; 0x46
 8016a60:	f7e9 fed4 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8016a64:	2046      	movs	r0, #70	; 0x46
 8016a66:	f7e9 feed 	bl	8000844 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8016a6a:	e088      	b.n	8016b7e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART3)
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4a4c      	ldr	r2, [pc, #304]	; (8016ba4 <HAL_UART_MspInit+0x268>)
 8016a72:	4293      	cmp	r3, r2
 8016a74:	f040 8083 	bne.w	8016b7e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART3_CLK_ENABLE();
 8016a78:	4b44      	ldr	r3, [pc, #272]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a7c:	4a43      	ldr	r2, [pc, #268]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016a82:	6593      	str	r3, [r2, #88]	; 0x58
 8016a84:	4b41      	ldr	r3, [pc, #260]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016a8c:	613b      	str	r3, [r7, #16]
 8016a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016a90:	4b3e      	ldr	r3, [pc, #248]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a94:	4a3d      	ldr	r2, [pc, #244]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a96:	f043 0308 	orr.w	r3, r3, #8
 8016a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016a9c:	4b3b      	ldr	r3, [pc, #236]	; (8016b8c <HAL_UART_MspInit+0x250>)
 8016a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016aa0:	f003 0308 	and.w	r3, r3, #8
 8016aa4:	60fb      	str	r3, [r7, #12]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8016aa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8016aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016aae:	2302      	movs	r3, #2
 8016ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ab6:	2303      	movs	r3, #3
 8016ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016aba:	2307      	movs	r3, #7
 8016abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016abe:	f107 031c 	add.w	r3, r7, #28
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	4838      	ldr	r0, [pc, #224]	; (8016ba8 <HAL_UART_MspInit+0x26c>)
 8016ac6:	f7ea f9ed 	bl	8000ea4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8016aca:	4b38      	ldr	r3, [pc, #224]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016acc:	4a38      	ldr	r2, [pc, #224]	; (8016bb0 <HAL_UART_MspInit+0x274>)
 8016ace:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8016ad0:	4b36      	ldr	r3, [pc, #216]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016ad2:	2202      	movs	r2, #2
 8016ad4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016ad6:	4b35      	ldr	r3, [pc, #212]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016ad8:	2200      	movs	r2, #0
 8016ada:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016adc:	4b33      	ldr	r3, [pc, #204]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8016ae2:	4b32      	ldr	r3, [pc, #200]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016ae4:	2280      	movs	r2, #128	; 0x80
 8016ae6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016ae8:	4b30      	ldr	r3, [pc, #192]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016aea:	2200      	movs	r2, #0
 8016aec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016aee:	4b2f      	ldr	r3, [pc, #188]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016af0:	2200      	movs	r2, #0
 8016af2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8016af4:	4b2d      	ldr	r3, [pc, #180]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016af6:	2200      	movs	r2, #0
 8016af8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016afa:	4b2c      	ldr	r3, [pc, #176]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016afc:	2200      	movs	r2, #0
 8016afe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8016b00:	482a      	ldr	r0, [pc, #168]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016b02:	f7e9 febb 	bl	800087c <HAL_DMA_Init>
 8016b06:	4603      	mov	r3, r0
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d001      	beq.n	8016b10 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8016b0c:	f7fe fbfb 	bl	8015306 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	4a26      	ldr	r2, [pc, #152]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016b14:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b16:	4a25      	ldr	r2, [pc, #148]	; (8016bac <HAL_UART_MspInit+0x270>)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8016b1c:	4b25      	ldr	r3, [pc, #148]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b1e:	4a26      	ldr	r2, [pc, #152]	; (8016bb8 <HAL_UART_MspInit+0x27c>)
 8016b20:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8016b22:	4b24      	ldr	r3, [pc, #144]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b24:	2202      	movs	r2, #2
 8016b26:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016b28:	4b22      	ldr	r3, [pc, #136]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b2a:	2210      	movs	r2, #16
 8016b2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016b2e:	4b21      	ldr	r3, [pc, #132]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016b34:	4b1f      	ldr	r3, [pc, #124]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b36:	2280      	movs	r2, #128	; 0x80
 8016b38:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016b3a:	4b1e      	ldr	r3, [pc, #120]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016b40:	4b1c      	ldr	r3, [pc, #112]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b42:	2200      	movs	r2, #0
 8016b44:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8016b46:	4b1b      	ldr	r3, [pc, #108]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b48:	2200      	movs	r2, #0
 8016b4a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016b4c:	4b19      	ldr	r3, [pc, #100]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b4e:	2200      	movs	r2, #0
 8016b50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8016b52:	4818      	ldr	r0, [pc, #96]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b54:	f7e9 fe92 	bl	800087c <HAL_DMA_Init>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d001      	beq.n	8016b62 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8016b5e:	f7fe fbd2 	bl	8015306 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4a13      	ldr	r2, [pc, #76]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b66:	669a      	str	r2, [r3, #104]	; 0x68
 8016b68:	4a12      	ldr	r2, [pc, #72]	; (8016bb4 <HAL_UART_MspInit+0x278>)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8016b6e:	2200      	movs	r2, #0
 8016b70:	2105      	movs	r1, #5
 8016b72:	2027      	movs	r0, #39	; 0x27
 8016b74:	f7e9 fe4a 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8016b78:	2027      	movs	r0, #39	; 0x27
 8016b7a:	f7e9 fe63 	bl	8000844 <HAL_NVIC_EnableIRQ>
}
 8016b7e:	bf00      	nop
 8016b80:	3730      	adds	r7, #48	; 0x30
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	40008000 	.word	0x40008000
 8016b8c:	40021000 	.word	0x40021000
 8016b90:	48001800 	.word	0x48001800
 8016b94:	20033b70 	.word	0x20033b70
 8016b98:	40020480 	.word	0x40020480
 8016b9c:	20033bb8 	.word	0x20033bb8
 8016ba0:	4002046c 	.word	0x4002046c
 8016ba4:	40004800 	.word	0x40004800
 8016ba8:	48000c00 	.word	0x48000c00
 8016bac:	20033c00 	.word	0x20033c00
 8016bb0:	40020030 	.word	0x40020030
 8016bb4:	20033c48 	.word	0x20033c48
 8016bb8:	4002001c 	.word	0x4002001c

08016bbc <MX_USB_DEVICE_DeInit>:
/**
  * De-init USB device
  * @retval None
  */
void MX_USB_DEVICE_DeInit( void )
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *) hUsbDeviceFS.pData;
 8016bc2:	4b08      	ldr	r3, [pc, #32]	; (8016be4 <MX_USB_DEVICE_DeInit+0x28>)
 8016bc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016bc8:	607b      	str	r3, [r7, #4]

  if ( hpcd != NULL ) {
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d005      	beq.n	8016bdc <MX_USB_DEVICE_DeInit+0x20>
    HAL_PCD_DevDisconnect( hpcd );
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f7eb f954 	bl	8001e7e <HAL_PCD_DevDisconnect>
    USBD_DeInit( &hUsbDeviceFS );
 8016bd6:	4803      	ldr	r0, [pc, #12]	; (8016be4 <MX_USB_DEVICE_DeInit+0x28>)
 8016bd8:	f7f4 fb84 	bl	800b2e4 <USBD_DeInit>
  }
}
 8016bdc:	bf00      	nop
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}
 8016be4:	20033c90 	.word	0x20033c90

08016be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016bec:	2200      	movs	r2, #0
 8016bee:	4912      	ldr	r1, [pc, #72]	; (8016c38 <MX_USB_DEVICE_Init+0x50>)
 8016bf0:	4812      	ldr	r0, [pc, #72]	; (8016c3c <MX_USB_DEVICE_Init+0x54>)
 8016bf2:	f7f4 fb4c 	bl	800b28e <USBD_Init>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d001      	beq.n	8016c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016bfc:	f7fe fb83 	bl	8015306 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016c00:	490f      	ldr	r1, [pc, #60]	; (8016c40 <MX_USB_DEVICE_Init+0x58>)
 8016c02:	480e      	ldr	r0, [pc, #56]	; (8016c3c <MX_USB_DEVICE_Init+0x54>)
 8016c04:	f7f4 fb8b 	bl	800b31e <USBD_RegisterClass>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d001      	beq.n	8016c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c0e:	f7fe fb7a 	bl	8015306 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016c12:	490c      	ldr	r1, [pc, #48]	; (8016c44 <MX_USB_DEVICE_Init+0x5c>)
 8016c14:	4809      	ldr	r0, [pc, #36]	; (8016c3c <MX_USB_DEVICE_Init+0x54>)
 8016c16:	f7f3 fa79 	bl	800a10c <USBD_MSC_RegisterStorage>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c20:	f7fe fb71 	bl	8015306 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016c24:	4805      	ldr	r0, [pc, #20]	; (8016c3c <MX_USB_DEVICE_Init+0x54>)
 8016c26:	f7f4 fb94 	bl	800b352 <USBD_Start>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016c30:	f7fe fb69 	bl	8015306 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016c34:	bf00      	nop
 8016c36:	bd80      	pop	{r7, pc}
 8016c38:	200000c4 	.word	0x200000c4
 8016c3c:	20033c90 	.word	0x20033c90
 8016c40:	20000008 	.word	0x20000008
 8016c44:	20000124 	.word	0x20000124

08016c48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b08a      	sub	sp, #40	; 0x28
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c50:	f107 0314 	add.w	r3, r7, #20
 8016c54:	2200      	movs	r2, #0
 8016c56:	601a      	str	r2, [r3, #0]
 8016c58:	605a      	str	r2, [r3, #4]
 8016c5a:	609a      	str	r2, [r3, #8]
 8016c5c:	60da      	str	r2, [r3, #12]
 8016c5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016c68:	d14e      	bne.n	8016d08 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016c6a:	4b29      	ldr	r3, [pc, #164]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c6e:	4a28      	ldr	r2, [pc, #160]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016c70:	f043 0301 	orr.w	r3, r3, #1
 8016c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016c76:	4b26      	ldr	r3, [pc, #152]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c7a:	f003 0301 	and.w	r3, r3, #1
 8016c7e:	613b      	str	r3, [r7, #16]
 8016c80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016c82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016c88:	2302      	movs	r3, #2
 8016c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016c90:	2303      	movs	r3, #3
 8016c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016c94:	230a      	movs	r3, #10
 8016c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016c98:	f107 0314 	add.w	r3, r7, #20
 8016c9c:	4619      	mov	r1, r3
 8016c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016ca2:	f7ea f8ff 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016ca6:	4b1a      	ldr	r3, [pc, #104]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016caa:	4a19      	ldr	r2, [pc, #100]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016cb2:	4b17      	ldr	r3, [pc, #92]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016cba:	60fb      	str	r3, [r7, #12]
 8016cbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016cbe:	4b14      	ldr	r3, [pc, #80]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d114      	bne.n	8016cf4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016cca:	4b11      	ldr	r3, [pc, #68]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cce:	4a10      	ldr	r2, [pc, #64]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8016cd6:	4b0e      	ldr	r3, [pc, #56]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016cde:	60bb      	str	r3, [r7, #8]
 8016ce0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8016ce2:	f7eb fd2f 	bl	8002744 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8016ce6:	4b0a      	ldr	r3, [pc, #40]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cea:	4a09      	ldr	r2, [pc, #36]	; (8016d10 <HAL_PCD_MspInit+0xc8>)
 8016cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8016cf2:	e001      	b.n	8016cf8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8016cf4:	f7eb fd26 	bl	8002744 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	2105      	movs	r1, #5
 8016cfc:	2043      	movs	r0, #67	; 0x43
 8016cfe:	f7e9 fd85 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016d02:	2043      	movs	r0, #67	; 0x43
 8016d04:	f7e9 fd9e 	bl	8000844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016d08:	bf00      	nop
 8016d0a:	3728      	adds	r7, #40	; 0x28
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	40021000 	.word	0x40021000

08016d14 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016d24:	d12b      	bne.n	8016d7e <HAL_PCD_MspDeInit+0x6a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8016d26:	4b18      	ldr	r3, [pc, #96]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d2a:	4a17      	ldr	r2, [pc, #92]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d30:	64d3      	str	r3, [r2, #76]	; 0x4c
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8016d32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8016d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016d3a:	f7ea fa45 	bl	80011c8 <HAL_GPIO_DeInit>

    /* Disable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016d3e:	4b12      	ldr	r3, [pc, #72]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d114      	bne.n	8016d74 <HAL_PCD_MspDeInit+0x60>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016d4a:	4b0f      	ldr	r3, [pc, #60]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d4e:	4a0e      	ldr	r2, [pc, #56]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016d54:	6593      	str	r3, [r2, #88]	; 0x58
 8016d56:	4b0c      	ldr	r3, [pc, #48]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016d5e:	60fb      	str	r3, [r7, #12]
 8016d60:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_DisableVddUSB();
 8016d62:	f7eb fcff 	bl	8002764 <HAL_PWREx_DisableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8016d66:	4b08      	ldr	r3, [pc, #32]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d6a:	4a07      	ldr	r2, [pc, #28]	; (8016d88 <HAL_PCD_MspDeInit+0x74>)
 8016d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016d70:	6593      	str	r3, [r2, #88]	; 0x58
 8016d72:	e001      	b.n	8016d78 <HAL_PCD_MspDeInit+0x64>
    }
    else
    {
      HAL_PWREx_DisableVddUSB();
 8016d74:	f7eb fcf6 	bl	8002764 <HAL_PWREx_DisableVddUSB>
    }

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8016d78:	2043      	movs	r0, #67	; 0x43
 8016d7a:	f7e9 fd71 	bl	8000860 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8016d7e:	bf00      	nop
 8016d80:	3710      	adds	r7, #16
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	40021000 	.word	0x40021000

08016d8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016da0:	4619      	mov	r1, r3
 8016da2:	4610      	mov	r0, r2
 8016da4:	f7f4 fb1e 	bl	800b3e4 <USBD_LL_SetupStage>
}
 8016da8:	bf00      	nop
 8016daa:	3708      	adds	r7, #8
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	460b      	mov	r3, r1
 8016dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016dc2:	78fa      	ldrb	r2, [r7, #3]
 8016dc4:	6879      	ldr	r1, [r7, #4]
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	00db      	lsls	r3, r3, #3
 8016dca:	1a9b      	subs	r3, r3, r2
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	440b      	add	r3, r1
 8016dd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	78fb      	ldrb	r3, [r7, #3]
 8016dd8:	4619      	mov	r1, r3
 8016dda:	f7f4 fb50 	bl	800b47e <USBD_LL_DataOutStage>
}
 8016dde:	bf00      	nop
 8016de0:	3708      	adds	r7, #8
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}

08016de6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016de6:	b580      	push	{r7, lr}
 8016de8:	b082      	sub	sp, #8
 8016dea:	af00      	add	r7, sp, #0
 8016dec:	6078      	str	r0, [r7, #4]
 8016dee:	460b      	mov	r3, r1
 8016df0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016df8:	78fa      	ldrb	r2, [r7, #3]
 8016dfa:	6879      	ldr	r1, [r7, #4]
 8016dfc:	4613      	mov	r3, r2
 8016dfe:	00db      	lsls	r3, r3, #3
 8016e00:	1a9b      	subs	r3, r3, r2
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	440b      	add	r3, r1
 8016e06:	3348      	adds	r3, #72	; 0x48
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	78fb      	ldrb	r3, [r7, #3]
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	f7f4 fba7 	bl	800b560 <USBD_LL_DataInStage>
}
 8016e12:	bf00      	nop
 8016e14:	3708      	adds	r7, #8
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}

08016e1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e1a:	b580      	push	{r7, lr}
 8016e1c:	b082      	sub	sp, #8
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7f4 fcb5 	bl	800b798 <USBD_LL_SOF>
}
 8016e2e:	bf00      	nop
 8016e30:	3708      	adds	r7, #8
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}

08016e36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016e36:	b580      	push	{r7, lr}
 8016e38:	b084      	sub	sp, #16
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016e3e:	2301      	movs	r3, #1
 8016e40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	2b02      	cmp	r3, #2
 8016e48:	d001      	beq.n	8016e4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016e4a:	f7fe fa5c 	bl	8015306 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e54:	7bfa      	ldrb	r2, [r7, #15]
 8016e56:	4611      	mov	r1, r2
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7f4 fc67 	bl	800b72c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7f4 fc20 	bl	800b6aa <USBD_LL_Reset>
}
 8016e6a:	bf00      	nop
 8016e6c:	3710      	adds	r7, #16
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
	...

08016e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	6812      	ldr	r2, [r2, #0]
 8016e8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016e8e:	f043 0301 	orr.w	r3, r3, #1
 8016e92:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7f4 fc56 	bl	800b74c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	6a1b      	ldr	r3, [r3, #32]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d005      	beq.n	8016eb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ea8:	4b04      	ldr	r3, [pc, #16]	; (8016ebc <HAL_PCD_SuspendCallback+0x48>)
 8016eaa:	691b      	ldr	r3, [r3, #16]
 8016eac:	4a03      	ldr	r2, [pc, #12]	; (8016ebc <HAL_PCD_SuspendCallback+0x48>)
 8016eae:	f043 0306 	orr.w	r3, r3, #6
 8016eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016eb4:	bf00      	nop
 8016eb6:	3708      	adds	r7, #8
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}
 8016ebc:	e000ed00 	.word	0xe000ed00

08016ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b082      	sub	sp, #8
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	6812      	ldr	r2, [r2, #0]
 8016ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016eda:	f023 0301 	bic.w	r3, r3, #1
 8016ede:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6a1b      	ldr	r3, [r3, #32]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d007      	beq.n	8016ef8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ee8:	4b08      	ldr	r3, [pc, #32]	; (8016f0c <HAL_PCD_ResumeCallback+0x4c>)
 8016eea:	691b      	ldr	r3, [r3, #16]
 8016eec:	4a07      	ldr	r2, [pc, #28]	; (8016f0c <HAL_PCD_ResumeCallback+0x4c>)
 8016eee:	f023 0306 	bic.w	r3, r3, #6
 8016ef2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016ef4:	f000 fb94 	bl	8017620 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7f4 fc39 	bl	800b776 <USBD_LL_Resume>
}
 8016f04:	bf00      	nop
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	e000ed00 	.word	0xe000ed00

08016f10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	460b      	mov	r3, r1
 8016f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016f22:	78fa      	ldrb	r2, [r7, #3]
 8016f24:	4611      	mov	r1, r2
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7f4 fc5d 	bl	800b7e6 <USBD_LL_IsoOUTIncomplete>
}
 8016f2c:	bf00      	nop
 8016f2e:	3708      	adds	r7, #8
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016f46:	78fa      	ldrb	r2, [r7, #3]
 8016f48:	4611      	mov	r1, r2
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7f4 fc3e 	bl	800b7cc <USBD_LL_IsoINIncomplete>
}
 8016f50:	bf00      	nop
 8016f52:	3708      	adds	r7, #8
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b082      	sub	sp, #8
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f4 fc4a 	bl	800b800 <USBD_LL_DevConnected>
}
 8016f6c:	bf00      	nop
 8016f6e:	3708      	adds	r7, #8
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd80      	pop	{r7, pc}

08016f74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7f4 fc47 	bl	800b816 <USBD_LL_DevDisconnected>
}
 8016f88:	bf00      	nop
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b082      	sub	sp, #8
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	781b      	ldrb	r3, [r3, #0]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d13c      	bne.n	801701a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016fa0:	4a20      	ldr	r2, [pc, #128]	; (8017024 <USBD_LL_Init+0x94>)
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	4a1e      	ldr	r2, [pc, #120]	; (8017024 <USBD_LL_Init+0x94>)
 8016fac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016fb0:	4b1c      	ldr	r3, [pc, #112]	; (8017024 <USBD_LL_Init+0x94>)
 8016fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016fb8:	4b1a      	ldr	r3, [pc, #104]	; (8017024 <USBD_LL_Init+0x94>)
 8016fba:	2206      	movs	r2, #6
 8016fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016fbe:	4b19      	ldr	r3, [pc, #100]	; (8017024 <USBD_LL_Init+0x94>)
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016fc4:	4b17      	ldr	r3, [pc, #92]	; (8017024 <USBD_LL_Init+0x94>)
 8016fc6:	2202      	movs	r2, #2
 8016fc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016fca:	4b16      	ldr	r3, [pc, #88]	; (8017024 <USBD_LL_Init+0x94>)
 8016fcc:	2200      	movs	r2, #0
 8016fce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016fd0:	4b14      	ldr	r3, [pc, #80]	; (8017024 <USBD_LL_Init+0x94>)
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016fd6:	4b13      	ldr	r3, [pc, #76]	; (8017024 <USBD_LL_Init+0x94>)
 8016fd8:	2200      	movs	r2, #0
 8016fda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016fdc:	4b11      	ldr	r3, [pc, #68]	; (8017024 <USBD_LL_Init+0x94>)
 8016fde:	2200      	movs	r2, #0
 8016fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016fe2:	4b10      	ldr	r3, [pc, #64]	; (8017024 <USBD_LL_Init+0x94>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016fe8:	4b0e      	ldr	r3, [pc, #56]	; (8017024 <USBD_LL_Init+0x94>)
 8016fea:	2200      	movs	r2, #0
 8016fec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016fee:	480d      	ldr	r0, [pc, #52]	; (8017024 <USBD_LL_Init+0x94>)
 8016ff0:	f7ea fa24 	bl	800143c <HAL_PCD_Init>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d001      	beq.n	8016ffe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016ffa:	f7fe f984 	bl	8015306 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016ffe:	2180      	movs	r1, #128	; 0x80
 8017000:	4808      	ldr	r0, [pc, #32]	; (8017024 <USBD_LL_Init+0x94>)
 8017002:	f7eb fb06 	bl	8002612 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017006:	2240      	movs	r2, #64	; 0x40
 8017008:	2100      	movs	r1, #0
 801700a:	4806      	ldr	r0, [pc, #24]	; (8017024 <USBD_LL_Init+0x94>)
 801700c:	f7eb faba 	bl	8002584 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017010:	2280      	movs	r2, #128	; 0x80
 8017012:	2101      	movs	r1, #1
 8017014:	4803      	ldr	r0, [pc, #12]	; (8017024 <USBD_LL_Init+0x94>)
 8017016:	f7eb fab5 	bl	8002584 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801701a:	2300      	movs	r3, #0
}
 801701c:	4618      	mov	r0, r3
 801701e:	3708      	adds	r7, #8
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}
 8017024:	20033f2c 	.word	0x20033f2c

08017028 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017030:	2300      	movs	r3, #0
 8017032:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017034:	2300      	movs	r3, #0
 8017036:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801703e:	4618      	mov	r0, r3
 8017040:	f7ea fb20 	bl	8001684 <HAL_PCD_DeInit>
 8017044:	4603      	mov	r3, r0
 8017046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017048:	7bbb      	ldrb	r3, [r7, #14]
 801704a:	2b03      	cmp	r3, #3
 801704c:	d816      	bhi.n	801707c <USBD_LL_DeInit+0x54>
 801704e:	a201      	add	r2, pc, #4	; (adr r2, 8017054 <USBD_LL_DeInit+0x2c>)
 8017050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017054:	08017065 	.word	0x08017065
 8017058:	0801706b 	.word	0x0801706b
 801705c:	08017071 	.word	0x08017071
 8017060:	08017077 	.word	0x08017077
    case HAL_OK :
      usb_status = USBD_OK;
 8017064:	2300      	movs	r3, #0
 8017066:	73fb      	strb	r3, [r7, #15]
    break;
 8017068:	e00b      	b.n	8017082 <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801706a:	2302      	movs	r3, #2
 801706c:	73fb      	strb	r3, [r7, #15]
    break;
 801706e:	e008      	b.n	8017082 <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017070:	2301      	movs	r3, #1
 8017072:	73fb      	strb	r3, [r7, #15]
    break;
 8017074:	e005      	b.n	8017082 <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017076:	2302      	movs	r3, #2
 8017078:	73fb      	strb	r3, [r7, #15]
    break;
 801707a:	e002      	b.n	8017082 <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 801707c:	2302      	movs	r3, #2
 801707e:	73fb      	strb	r3, [r7, #15]
    break;
 8017080:	bf00      	nop
  }
  return usb_status; 
 8017082:	7bfb      	ldrb	r3, [r7, #15]
}
 8017084:	4618      	mov	r0, r3
 8017086:	3710      	adds	r7, #16
 8017088:	46bd      	mov	sp, r7
 801708a:	bd80      	pop	{r7, pc}

0801708c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b084      	sub	sp, #16
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017094:	2300      	movs	r3, #0
 8017096:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017098:	2300      	movs	r3, #0
 801709a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7ea fb0a 	bl	80016bc <HAL_PCD_Start>
 80170a8:	4603      	mov	r3, r0
 80170aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80170ac:	7bbb      	ldrb	r3, [r7, #14]
 80170ae:	2b03      	cmp	r3, #3
 80170b0:	d816      	bhi.n	80170e0 <USBD_LL_Start+0x54>
 80170b2:	a201      	add	r2, pc, #4	; (adr r2, 80170b8 <USBD_LL_Start+0x2c>)
 80170b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170b8:	080170c9 	.word	0x080170c9
 80170bc:	080170cf 	.word	0x080170cf
 80170c0:	080170d5 	.word	0x080170d5
 80170c4:	080170db 	.word	0x080170db
    case HAL_OK :
      usb_status = USBD_OK;
 80170c8:	2300      	movs	r3, #0
 80170ca:	73fb      	strb	r3, [r7, #15]
    break;
 80170cc:	e00b      	b.n	80170e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170ce:	2302      	movs	r3, #2
 80170d0:	73fb      	strb	r3, [r7, #15]
    break;
 80170d2:	e008      	b.n	80170e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170d4:	2301      	movs	r3, #1
 80170d6:	73fb      	strb	r3, [r7, #15]
    break;
 80170d8:	e005      	b.n	80170e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170da:	2302      	movs	r3, #2
 80170dc:	73fb      	strb	r3, [r7, #15]
    break;
 80170de:	e002      	b.n	80170e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80170e0:	2302      	movs	r3, #2
 80170e2:	73fb      	strb	r3, [r7, #15]
    break;
 80170e4:	bf00      	nop
  }
  return usb_status;
 80170e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170e8:	4618      	mov	r0, r3
 80170ea:	3710      	adds	r7, #16
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}

080170f0 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b084      	sub	sp, #16
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170f8:	2300      	movs	r3, #0
 80170fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170fc:	2300      	movs	r3, #0
 80170fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017106:	4618      	mov	r0, r3
 8017108:	f7ea fb07 	bl	800171a <HAL_PCD_Stop>
 801710c:	4603      	mov	r3, r0
 801710e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017110:	7bbb      	ldrb	r3, [r7, #14]
 8017112:	2b03      	cmp	r3, #3
 8017114:	d816      	bhi.n	8017144 <USBD_LL_Stop+0x54>
 8017116:	a201      	add	r2, pc, #4	; (adr r2, 801711c <USBD_LL_Stop+0x2c>)
 8017118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801711c:	0801712d 	.word	0x0801712d
 8017120:	08017133 	.word	0x08017133
 8017124:	08017139 	.word	0x08017139
 8017128:	0801713f 	.word	0x0801713f
    case HAL_OK :
      usb_status = USBD_OK;
 801712c:	2300      	movs	r3, #0
 801712e:	73fb      	strb	r3, [r7, #15]
    break;
 8017130:	e00b      	b.n	801714a <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017132:	2302      	movs	r3, #2
 8017134:	73fb      	strb	r3, [r7, #15]
    break;
 8017136:	e008      	b.n	801714a <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017138:	2301      	movs	r3, #1
 801713a:	73fb      	strb	r3, [r7, #15]
    break;
 801713c:	e005      	b.n	801714a <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801713e:	2302      	movs	r3, #2
 8017140:	73fb      	strb	r3, [r7, #15]
    break;
 8017142:	e002      	b.n	801714a <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 8017144:	2302      	movs	r3, #2
 8017146:	73fb      	strb	r3, [r7, #15]
    break;
 8017148:	bf00      	nop
  }
  return usb_status;
 801714a:	7bfb      	ldrb	r3, [r7, #15]
}
 801714c:	4618      	mov	r0, r3
 801714e:	3710      	adds	r7, #16
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	4608      	mov	r0, r1
 801715e:	4611      	mov	r1, r2
 8017160:	461a      	mov	r2, r3
 8017162:	4603      	mov	r3, r0
 8017164:	70fb      	strb	r3, [r7, #3]
 8017166:	460b      	mov	r3, r1
 8017168:	70bb      	strb	r3, [r7, #2]
 801716a:	4613      	mov	r3, r2
 801716c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801716e:	2300      	movs	r3, #0
 8017170:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017172:	2300      	movs	r3, #0
 8017174:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801717c:	78bb      	ldrb	r3, [r7, #2]
 801717e:	883a      	ldrh	r2, [r7, #0]
 8017180:	78f9      	ldrb	r1, [r7, #3]
 8017182:	f7ea fecb 	bl	8001f1c <HAL_PCD_EP_Open>
 8017186:	4603      	mov	r3, r0
 8017188:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801718a:	7bbb      	ldrb	r3, [r7, #14]
 801718c:	2b03      	cmp	r3, #3
 801718e:	d817      	bhi.n	80171c0 <USBD_LL_OpenEP+0x6c>
 8017190:	a201      	add	r2, pc, #4	; (adr r2, 8017198 <USBD_LL_OpenEP+0x44>)
 8017192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017196:	bf00      	nop
 8017198:	080171a9 	.word	0x080171a9
 801719c:	080171af 	.word	0x080171af
 80171a0:	080171b5 	.word	0x080171b5
 80171a4:	080171bb 	.word	0x080171bb
    case HAL_OK :
      usb_status = USBD_OK;
 80171a8:	2300      	movs	r3, #0
 80171aa:	73fb      	strb	r3, [r7, #15]
    break;
 80171ac:	e00b      	b.n	80171c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80171ae:	2302      	movs	r3, #2
 80171b0:	73fb      	strb	r3, [r7, #15]
    break;
 80171b2:	e008      	b.n	80171c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80171b4:	2301      	movs	r3, #1
 80171b6:	73fb      	strb	r3, [r7, #15]
    break;
 80171b8:	e005      	b.n	80171c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80171ba:	2302      	movs	r3, #2
 80171bc:	73fb      	strb	r3, [r7, #15]
    break;
 80171be:	e002      	b.n	80171c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80171c0:	2302      	movs	r3, #2
 80171c2:	73fb      	strb	r3, [r7, #15]
    break;
 80171c4:	bf00      	nop
  }
  return usb_status;
 80171c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3710      	adds	r7, #16
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	460b      	mov	r3, r1
 80171da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171dc:	2300      	movs	r3, #0
 80171de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171e0:	2300      	movs	r3, #0
 80171e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80171ea:	78fa      	ldrb	r2, [r7, #3]
 80171ec:	4611      	mov	r1, r2
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7ea fefc 	bl	8001fec <HAL_PCD_EP_Close>
 80171f4:	4603      	mov	r3, r0
 80171f6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80171f8:	7bbb      	ldrb	r3, [r7, #14]
 80171fa:	2b03      	cmp	r3, #3
 80171fc:	d816      	bhi.n	801722c <USBD_LL_CloseEP+0x5c>
 80171fe:	a201      	add	r2, pc, #4	; (adr r2, 8017204 <USBD_LL_CloseEP+0x34>)
 8017200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017204:	08017215 	.word	0x08017215
 8017208:	0801721b 	.word	0x0801721b
 801720c:	08017221 	.word	0x08017221
 8017210:	08017227 	.word	0x08017227
    case HAL_OK :
      usb_status = USBD_OK;
 8017214:	2300      	movs	r3, #0
 8017216:	73fb      	strb	r3, [r7, #15]
    break;
 8017218:	e00b      	b.n	8017232 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801721a:	2302      	movs	r3, #2
 801721c:	73fb      	strb	r3, [r7, #15]
    break;
 801721e:	e008      	b.n	8017232 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017220:	2301      	movs	r3, #1
 8017222:	73fb      	strb	r3, [r7, #15]
    break;
 8017224:	e005      	b.n	8017232 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017226:	2302      	movs	r3, #2
 8017228:	73fb      	strb	r3, [r7, #15]
    break;
 801722a:	e002      	b.n	8017232 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801722c:	2302      	movs	r3, #2
 801722e:	73fb      	strb	r3, [r7, #15]
    break;
 8017230:	bf00      	nop
  }
  return usb_status;  
 8017232:	7bfb      	ldrb	r3, [r7, #15]
}
 8017234:	4618      	mov	r0, r3
 8017236:	3710      	adds	r7, #16
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}

0801723c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b084      	sub	sp, #16
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	460b      	mov	r3, r1
 8017246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017248:	2300      	movs	r3, #0
 801724a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801724c:	2300      	movs	r3, #0
 801724e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017256:	78fa      	ldrb	r2, [r7, #3]
 8017258:	4611      	mov	r1, r2
 801725a:	4618      	mov	r0, r3
 801725c:	f7eb f85b 	bl	8002316 <HAL_PCD_EP_Flush>
 8017260:	4603      	mov	r3, r0
 8017262:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8017264:	7bbb      	ldrb	r3, [r7, #14]
 8017266:	2b03      	cmp	r3, #3
 8017268:	d816      	bhi.n	8017298 <USBD_LL_FlushEP+0x5c>
 801726a:	a201      	add	r2, pc, #4	; (adr r2, 8017270 <USBD_LL_FlushEP+0x34>)
 801726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017270:	08017281 	.word	0x08017281
 8017274:	08017287 	.word	0x08017287
 8017278:	0801728d 	.word	0x0801728d
 801727c:	08017293 	.word	0x08017293
    case HAL_OK :
      usb_status = USBD_OK;
 8017280:	2300      	movs	r3, #0
 8017282:	73fb      	strb	r3, [r7, #15]
    break;
 8017284:	e00b      	b.n	801729e <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017286:	2302      	movs	r3, #2
 8017288:	73fb      	strb	r3, [r7, #15]
    break;
 801728a:	e008      	b.n	801729e <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801728c:	2301      	movs	r3, #1
 801728e:	73fb      	strb	r3, [r7, #15]
    break;
 8017290:	e005      	b.n	801729e <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017292:	2302      	movs	r3, #2
 8017294:	73fb      	strb	r3, [r7, #15]
    break;
 8017296:	e002      	b.n	801729e <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017298:	2302      	movs	r3, #2
 801729a:	73fb      	strb	r3, [r7, #15]
    break;
 801729c:	bf00      	nop
  }
  return usb_status;  
 801729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b084      	sub	sp, #16
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	460b      	mov	r3, r1
 80172b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172b4:	2300      	movs	r3, #0
 80172b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172b8:	2300      	movs	r3, #0
 80172ba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80172c2:	78fa      	ldrb	r2, [r7, #3]
 80172c4:	4611      	mov	r1, r2
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7ea ff6d 	bl	80021a6 <HAL_PCD_EP_SetStall>
 80172cc:	4603      	mov	r3, r0
 80172ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80172d0:	7bbb      	ldrb	r3, [r7, #14]
 80172d2:	2b03      	cmp	r3, #3
 80172d4:	d816      	bhi.n	8017304 <USBD_LL_StallEP+0x5c>
 80172d6:	a201      	add	r2, pc, #4	; (adr r2, 80172dc <USBD_LL_StallEP+0x34>)
 80172d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172dc:	080172ed 	.word	0x080172ed
 80172e0:	080172f3 	.word	0x080172f3
 80172e4:	080172f9 	.word	0x080172f9
 80172e8:	080172ff 	.word	0x080172ff
    case HAL_OK :
      usb_status = USBD_OK;
 80172ec:	2300      	movs	r3, #0
 80172ee:	73fb      	strb	r3, [r7, #15]
    break;
 80172f0:	e00b      	b.n	801730a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80172f2:	2302      	movs	r3, #2
 80172f4:	73fb      	strb	r3, [r7, #15]
    break;
 80172f6:	e008      	b.n	801730a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80172f8:	2301      	movs	r3, #1
 80172fa:	73fb      	strb	r3, [r7, #15]
    break;
 80172fc:	e005      	b.n	801730a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80172fe:	2302      	movs	r3, #2
 8017300:	73fb      	strb	r3, [r7, #15]
    break;
 8017302:	e002      	b.n	801730a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017304:	2302      	movs	r3, #2
 8017306:	73fb      	strb	r3, [r7, #15]
    break;
 8017308:	bf00      	nop
  }
  return usb_status;  
 801730a:	7bfb      	ldrb	r3, [r7, #15]
}
 801730c:	4618      	mov	r0, r3
 801730e:	3710      	adds	r7, #16
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}

08017314 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b084      	sub	sp, #16
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
 801731c:	460b      	mov	r3, r1
 801731e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017320:	2300      	movs	r3, #0
 8017322:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017324:	2300      	movs	r3, #0
 8017326:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801732e:	78fa      	ldrb	r2, [r7, #3]
 8017330:	4611      	mov	r1, r2
 8017332:	4618      	mov	r0, r3
 8017334:	f7ea ff99 	bl	800226a <HAL_PCD_EP_ClrStall>
 8017338:	4603      	mov	r3, r0
 801733a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 801733c:	7bbb      	ldrb	r3, [r7, #14]
 801733e:	2b03      	cmp	r3, #3
 8017340:	d816      	bhi.n	8017370 <USBD_LL_ClearStallEP+0x5c>
 8017342:	a201      	add	r2, pc, #4	; (adr r2, 8017348 <USBD_LL_ClearStallEP+0x34>)
 8017344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017348:	08017359 	.word	0x08017359
 801734c:	0801735f 	.word	0x0801735f
 8017350:	08017365 	.word	0x08017365
 8017354:	0801736b 	.word	0x0801736b
    case HAL_OK :
      usb_status = USBD_OK;
 8017358:	2300      	movs	r3, #0
 801735a:	73fb      	strb	r3, [r7, #15]
    break;
 801735c:	e00b      	b.n	8017376 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801735e:	2302      	movs	r3, #2
 8017360:	73fb      	strb	r3, [r7, #15]
    break;
 8017362:	e008      	b.n	8017376 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017364:	2301      	movs	r3, #1
 8017366:	73fb      	strb	r3, [r7, #15]
    break;
 8017368:	e005      	b.n	8017376 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801736a:	2302      	movs	r3, #2
 801736c:	73fb      	strb	r3, [r7, #15]
    break;
 801736e:	e002      	b.n	8017376 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017370:	2302      	movs	r3, #2
 8017372:	73fb      	strb	r3, [r7, #15]
    break;
 8017374:	bf00      	nop
  }
  return usb_status; 
 8017376:	7bfb      	ldrb	r3, [r7, #15]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3710      	adds	r7, #16
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017380:	b480      	push	{r7}
 8017382:	b085      	sub	sp, #20
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	460b      	mov	r3, r1
 801738a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017392:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017398:	2b00      	cmp	r3, #0
 801739a:	da0b      	bge.n	80173b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801739c:	78fb      	ldrb	r3, [r7, #3]
 801739e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80173a2:	68f9      	ldr	r1, [r7, #12]
 80173a4:	4613      	mov	r3, r2
 80173a6:	00db      	lsls	r3, r3, #3
 80173a8:	1a9b      	subs	r3, r3, r2
 80173aa:	009b      	lsls	r3, r3, #2
 80173ac:	440b      	add	r3, r1
 80173ae:	333e      	adds	r3, #62	; 0x3e
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	e00b      	b.n	80173cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80173b4:	78fb      	ldrb	r3, [r7, #3]
 80173b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80173ba:	68f9      	ldr	r1, [r7, #12]
 80173bc:	4613      	mov	r3, r2
 80173be:	00db      	lsls	r3, r3, #3
 80173c0:	1a9b      	subs	r3, r3, r2
 80173c2:	009b      	lsls	r3, r3, #2
 80173c4:	440b      	add	r3, r1
 80173c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80173ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3714      	adds	r7, #20
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr

080173d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b084      	sub	sp, #16
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	460b      	mov	r3, r1
 80173e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173e4:	2300      	movs	r3, #0
 80173e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173e8:	2300      	movs	r3, #0
 80173ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80173f2:	78fa      	ldrb	r2, [r7, #3]
 80173f4:	4611      	mov	r1, r2
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7ea fd6b 	bl	8001ed2 <HAL_PCD_SetAddress>
 80173fc:	4603      	mov	r3, r0
 80173fe:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8017400:	7bbb      	ldrb	r3, [r7, #14]
 8017402:	2b03      	cmp	r3, #3
 8017404:	d816      	bhi.n	8017434 <USBD_LL_SetUSBAddress+0x5c>
 8017406:	a201      	add	r2, pc, #4	; (adr r2, 801740c <USBD_LL_SetUSBAddress+0x34>)
 8017408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801740c:	0801741d 	.word	0x0801741d
 8017410:	08017423 	.word	0x08017423
 8017414:	08017429 	.word	0x08017429
 8017418:	0801742f 	.word	0x0801742f
    case HAL_OK :
      usb_status = USBD_OK;
 801741c:	2300      	movs	r3, #0
 801741e:	73fb      	strb	r3, [r7, #15]
    break;
 8017420:	e00b      	b.n	801743a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017422:	2302      	movs	r3, #2
 8017424:	73fb      	strb	r3, [r7, #15]
    break;
 8017426:	e008      	b.n	801743a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017428:	2301      	movs	r3, #1
 801742a:	73fb      	strb	r3, [r7, #15]
    break;
 801742c:	e005      	b.n	801743a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801742e:	2302      	movs	r3, #2
 8017430:	73fb      	strb	r3, [r7, #15]
    break;
 8017432:	e002      	b.n	801743a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8017434:	2302      	movs	r3, #2
 8017436:	73fb      	strb	r3, [r7, #15]
    break;
 8017438:	bf00      	nop
  }
  return usb_status;  
 801743a:	7bfb      	ldrb	r3, [r7, #15]
}
 801743c:	4618      	mov	r0, r3
 801743e:	3710      	adds	r7, #16
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	607a      	str	r2, [r7, #4]
 801744e:	461a      	mov	r2, r3
 8017450:	460b      	mov	r3, r1
 8017452:	72fb      	strb	r3, [r7, #11]
 8017454:	4613      	mov	r3, r2
 8017456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017458:	2300      	movs	r3, #0
 801745a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801745c:	2300      	movs	r3, #0
 801745e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017466:	893b      	ldrh	r3, [r7, #8]
 8017468:	7af9      	ldrb	r1, [r7, #11]
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	f7ea fe5e 	bl	800212c <HAL_PCD_EP_Transmit>
 8017470:	4603      	mov	r3, r0
 8017472:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8017474:	7dbb      	ldrb	r3, [r7, #22]
 8017476:	2b03      	cmp	r3, #3
 8017478:	d816      	bhi.n	80174a8 <USBD_LL_Transmit+0x64>
 801747a:	a201      	add	r2, pc, #4	; (adr r2, 8017480 <USBD_LL_Transmit+0x3c>)
 801747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017480:	08017491 	.word	0x08017491
 8017484:	08017497 	.word	0x08017497
 8017488:	0801749d 	.word	0x0801749d
 801748c:	080174a3 	.word	0x080174a3
    case HAL_OK :
      usb_status = USBD_OK;
 8017490:	2300      	movs	r3, #0
 8017492:	75fb      	strb	r3, [r7, #23]
    break;
 8017494:	e00b      	b.n	80174ae <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017496:	2302      	movs	r3, #2
 8017498:	75fb      	strb	r3, [r7, #23]
    break;
 801749a:	e008      	b.n	80174ae <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801749c:	2301      	movs	r3, #1
 801749e:	75fb      	strb	r3, [r7, #23]
    break;
 80174a0:	e005      	b.n	80174ae <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80174a2:	2302      	movs	r3, #2
 80174a4:	75fb      	strb	r3, [r7, #23]
    break;
 80174a6:	e002      	b.n	80174ae <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80174a8:	2302      	movs	r3, #2
 80174aa:	75fb      	strb	r3, [r7, #23]
    break;
 80174ac:	bf00      	nop
  }
  return usb_status;    
 80174ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3718      	adds	r7, #24
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}

080174b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b086      	sub	sp, #24
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	607a      	str	r2, [r7, #4]
 80174c2:	461a      	mov	r2, r3
 80174c4:	460b      	mov	r3, r1
 80174c6:	72fb      	strb	r3, [r7, #11]
 80174c8:	4613      	mov	r3, r2
 80174ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174d0:	2300      	movs	r3, #0
 80174d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80174da:	893b      	ldrh	r3, [r7, #8]
 80174dc:	7af9      	ldrb	r1, [r7, #11]
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	f7ea fdce 	bl	8002080 <HAL_PCD_EP_Receive>
 80174e4:	4603      	mov	r3, r0
 80174e6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80174e8:	7dbb      	ldrb	r3, [r7, #22]
 80174ea:	2b03      	cmp	r3, #3
 80174ec:	d816      	bhi.n	801751c <USBD_LL_PrepareReceive+0x64>
 80174ee:	a201      	add	r2, pc, #4	; (adr r2, 80174f4 <USBD_LL_PrepareReceive+0x3c>)
 80174f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174f4:	08017505 	.word	0x08017505
 80174f8:	0801750b 	.word	0x0801750b
 80174fc:	08017511 	.word	0x08017511
 8017500:	08017517 	.word	0x08017517
    case HAL_OK :
      usb_status = USBD_OK;
 8017504:	2300      	movs	r3, #0
 8017506:	75fb      	strb	r3, [r7, #23]
    break;
 8017508:	e00b      	b.n	8017522 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801750a:	2302      	movs	r3, #2
 801750c:	75fb      	strb	r3, [r7, #23]
    break;
 801750e:	e008      	b.n	8017522 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017510:	2301      	movs	r3, #1
 8017512:	75fb      	strb	r3, [r7, #23]
    break;
 8017514:	e005      	b.n	8017522 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017516:	2302      	movs	r3, #2
 8017518:	75fb      	strb	r3, [r7, #23]
    break;
 801751a:	e002      	b.n	8017522 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 801751c:	2302      	movs	r3, #2
 801751e:	75fb      	strb	r3, [r7, #23]
    break;
 8017520:	bf00      	nop
  }
  return usb_status; 
 8017522:	7dfb      	ldrb	r3, [r7, #23]
}
 8017524:	4618      	mov	r0, r3
 8017526:	3718      	adds	r7, #24
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	460b      	mov	r3, r1
 8017536:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801753e:	78fa      	ldrb	r2, [r7, #3]
 8017540:	4611      	mov	r1, r2
 8017542:	4618      	mov	r0, r3
 8017544:	f7ea fdda 	bl	80020fc <HAL_PCD_EP_GetRxCount>
 8017548:	4603      	mov	r3, r0
}
 801754a:	4618      	mov	r0, r3
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
	...

08017554 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	460b      	mov	r3, r1
 801755e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017560:	78fb      	ldrb	r3, [r7, #3]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d002      	beq.n	801756c <HAL_PCDEx_LPM_Callback+0x18>
 8017566:	2b01      	cmp	r3, #1
 8017568:	d01f      	beq.n	80175aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801756a:	e03b      	b.n	80175e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6a1b      	ldr	r3, [r3, #32]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d007      	beq.n	8017584 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017574:	f000 f854 	bl	8017620 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017578:	4b1c      	ldr	r3, [pc, #112]	; (80175ec <HAL_PCDEx_LPM_Callback+0x98>)
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	4a1b      	ldr	r2, [pc, #108]	; (80175ec <HAL_PCDEx_LPM_Callback+0x98>)
 801757e:	f023 0306 	bic.w	r3, r3, #6
 8017582:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	687a      	ldr	r2, [r7, #4]
 8017590:	6812      	ldr	r2, [r2, #0]
 8017592:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017596:	f023 0301 	bic.w	r3, r3, #1
 801759a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7f4 f8e7 	bl	800b776 <USBD_LL_Resume>
    break;
 80175a8:	e01c      	b.n	80175e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	687a      	ldr	r2, [r7, #4]
 80175b6:	6812      	ldr	r2, [r2, #0]
 80175b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80175bc:	f043 0301 	orr.w	r3, r3, #1
 80175c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7f4 f8bf 	bl	800b74c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6a1b      	ldr	r3, [r3, #32]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d005      	beq.n	80175e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80175d6:	4b05      	ldr	r3, [pc, #20]	; (80175ec <HAL_PCDEx_LPM_Callback+0x98>)
 80175d8:	691b      	ldr	r3, [r3, #16]
 80175da:	4a04      	ldr	r2, [pc, #16]	; (80175ec <HAL_PCDEx_LPM_Callback+0x98>)
 80175dc:	f043 0306 	orr.w	r3, r3, #6
 80175e0:	6113      	str	r3, [r2, #16]
    break;   
 80175e2:	bf00      	nop
}
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	e000ed00 	.word	0xe000ed00

080175f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80175f8:	4b03      	ldr	r3, [pc, #12]	; (8017608 <USBD_static_malloc+0x18>)
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	370c      	adds	r7, #12
 80175fe:	46bd      	mov	sp, r7
 8017600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	20034334 	.word	0x20034334

0801760c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801760c:	b480      	push	{r7}
 801760e:	b083      	sub	sp, #12
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]

}
 8017614:	bf00      	nop
 8017616:	370c      	adds	r7, #12
 8017618:	46bd      	mov	sp, r7
 801761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761e:	4770      	bx	lr

08017620 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017624:	f7fd fdc4 	bl	80151b0 <SystemClock_Config>
}
 8017628:	bf00      	nop
 801762a:	bd80      	pop	{r7, pc}

0801762c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
 8017632:	4603      	mov	r3, r0
 8017634:	6039      	str	r1, [r7, #0]
 8017636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	2212      	movs	r2, #18
 801763c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801763e:	4b03      	ldr	r3, [pc, #12]	; (801764c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017640:	4618      	mov	r0, r3
 8017642:	370c      	adds	r7, #12
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr
 801764c:	200000e4 	.word	0x200000e4

08017650 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017650:	b480      	push	{r7}
 8017652:	b083      	sub	sp, #12
 8017654:	af00      	add	r7, sp, #0
 8017656:	4603      	mov	r3, r0
 8017658:	6039      	str	r1, [r7, #0]
 801765a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	2204      	movs	r2, #4
 8017660:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017662:	4b03      	ldr	r3, [pc, #12]	; (8017670 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017664:	4618      	mov	r0, r3
 8017666:	370c      	adds	r7, #12
 8017668:	46bd      	mov	sp, r7
 801766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766e:	4770      	bx	lr
 8017670:	20000104 	.word	0x20000104

08017674 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b082      	sub	sp, #8
 8017678:	af00      	add	r7, sp, #0
 801767a:	4603      	mov	r3, r0
 801767c:	6039      	str	r1, [r7, #0]
 801767e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017680:	79fb      	ldrb	r3, [r7, #7]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d105      	bne.n	8017692 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017686:	683a      	ldr	r2, [r7, #0]
 8017688:	4907      	ldr	r1, [pc, #28]	; (80176a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801768a:	4808      	ldr	r0, [pc, #32]	; (80176ac <USBD_FS_ProductStrDescriptor+0x38>)
 801768c:	f7f4 fdc1 	bl	800c212 <USBD_GetString>
 8017690:	e004      	b.n	801769c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	4904      	ldr	r1, [pc, #16]	; (80176a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8017696:	4805      	ldr	r0, [pc, #20]	; (80176ac <USBD_FS_ProductStrDescriptor+0x38>)
 8017698:	f7f4 fdbb 	bl	800c212 <USBD_GetString>
  }
  return USBD_StrDesc;
 801769c:	4b02      	ldr	r3, [pc, #8]	; (80176a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801769e:	4618      	mov	r0, r3
 80176a0:	3708      	adds	r7, #8
 80176a2:	46bd      	mov	sp, r7
 80176a4:	bd80      	pop	{r7, pc}
 80176a6:	bf00      	nop
 80176a8:	2003c3a4 	.word	0x2003c3a4
 80176ac:	0801a61c 	.word	0x0801a61c

080176b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	4603      	mov	r3, r0
 80176b8:	6039      	str	r1, [r7, #0]
 80176ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80176bc:	683a      	ldr	r2, [r7, #0]
 80176be:	4904      	ldr	r1, [pc, #16]	; (80176d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80176c0:	4804      	ldr	r0, [pc, #16]	; (80176d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80176c2:	f7f4 fda6 	bl	800c212 <USBD_GetString>
  return USBD_StrDesc;
 80176c6:	4b02      	ldr	r3, [pc, #8]	; (80176d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	3708      	adds	r7, #8
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}
 80176d0:	2003c3a4 	.word	0x2003c3a4
 80176d4:	0801a630 	.word	0x0801a630

080176d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	4603      	mov	r3, r0
 80176e0:	6039      	str	r1, [r7, #0]
 80176e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	221a      	movs	r2, #26
 80176e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80176ea:	f000 f855 	bl	8017798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80176ee:	4b02      	ldr	r3, [pc, #8]	; (80176f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	20000108 	.word	0x20000108

080176fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	4603      	mov	r3, r0
 8017704:	6039      	str	r1, [r7, #0]
 8017706:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017708:	79fb      	ldrb	r3, [r7, #7]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d105      	bne.n	801771a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801770e:	683a      	ldr	r2, [r7, #0]
 8017710:	4907      	ldr	r1, [pc, #28]	; (8017730 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017712:	4808      	ldr	r0, [pc, #32]	; (8017734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017714:	f7f4 fd7d 	bl	800c212 <USBD_GetString>
 8017718:	e004      	b.n	8017724 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801771a:	683a      	ldr	r2, [r7, #0]
 801771c:	4904      	ldr	r1, [pc, #16]	; (8017730 <USBD_FS_ConfigStrDescriptor+0x34>)
 801771e:	4805      	ldr	r0, [pc, #20]	; (8017734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017720:	f7f4 fd77 	bl	800c212 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017724:	4b02      	ldr	r3, [pc, #8]	; (8017730 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017726:	4618      	mov	r0, r3
 8017728:	3708      	adds	r7, #8
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	2003c3a4 	.word	0x2003c3a4
 8017734:	0801a644 	.word	0x0801a644

08017738 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	4603      	mov	r3, r0
 8017740:	6039      	str	r1, [r7, #0]
 8017742:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017744:	79fb      	ldrb	r3, [r7, #7]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d105      	bne.n	8017756 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801774a:	683a      	ldr	r2, [r7, #0]
 801774c:	4907      	ldr	r1, [pc, #28]	; (801776c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801774e:	4808      	ldr	r0, [pc, #32]	; (8017770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017750:	f7f4 fd5f 	bl	800c212 <USBD_GetString>
 8017754:	e004      	b.n	8017760 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017756:	683a      	ldr	r2, [r7, #0]
 8017758:	4904      	ldr	r1, [pc, #16]	; (801776c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801775a:	4805      	ldr	r0, [pc, #20]	; (8017770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801775c:	f7f4 fd59 	bl	800c212 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017760:	4b02      	ldr	r3, [pc, #8]	; (801776c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017762:	4618      	mov	r0, r3
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	2003c3a4 	.word	0x2003c3a4
 8017770:	0801a650 	.word	0x0801a650

08017774 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017774:	b480      	push	{r7}
 8017776:	b083      	sub	sp, #12
 8017778:	af00      	add	r7, sp, #0
 801777a:	4603      	mov	r3, r0
 801777c:	6039      	str	r1, [r7, #0]
 801777e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	220c      	movs	r2, #12
 8017784:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017786:	4b03      	ldr	r3, [pc, #12]	; (8017794 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017788:	4618      	mov	r0, r3
 801778a:	370c      	adds	r7, #12
 801778c:	46bd      	mov	sp, r7
 801778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017792:	4770      	bx	lr
 8017794:	200000f8 	.word	0x200000f8

08017798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801779e:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <Get_SerialNum+0x44>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80177a4:	4b0e      	ldr	r3, [pc, #56]	; (80177e0 <Get_SerialNum+0x48>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80177aa:	4b0e      	ldr	r3, [pc, #56]	; (80177e4 <Get_SerialNum+0x4c>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	4413      	add	r3, r2
 80177b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d009      	beq.n	80177d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80177be:	2208      	movs	r2, #8
 80177c0:	4909      	ldr	r1, [pc, #36]	; (80177e8 <Get_SerialNum+0x50>)
 80177c2:	68f8      	ldr	r0, [r7, #12]
 80177c4:	f000 f814 	bl	80177f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80177c8:	2204      	movs	r2, #4
 80177ca:	4908      	ldr	r1, [pc, #32]	; (80177ec <Get_SerialNum+0x54>)
 80177cc:	68b8      	ldr	r0, [r7, #8]
 80177ce:	f000 f80f 	bl	80177f0 <IntToUnicode>
  }
}
 80177d2:	bf00      	nop
 80177d4:	3710      	adds	r7, #16
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	1fff7590 	.word	0x1fff7590
 80177e0:	1fff7594 	.word	0x1fff7594
 80177e4:	1fff7598 	.word	0x1fff7598
 80177e8:	2000010a 	.word	0x2000010a
 80177ec:	2000011a 	.word	0x2000011a

080177f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80177f0:	b480      	push	{r7}
 80177f2:	b087      	sub	sp, #28
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	60b9      	str	r1, [r7, #8]
 80177fa:	4613      	mov	r3, r2
 80177fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017802:	2300      	movs	r3, #0
 8017804:	75fb      	strb	r3, [r7, #23]
 8017806:	e027      	b.n	8017858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	0f1b      	lsrs	r3, r3, #28
 801780c:	2b09      	cmp	r3, #9
 801780e:	d80b      	bhi.n	8017828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	0f1b      	lsrs	r3, r3, #28
 8017814:	b2da      	uxtb	r2, r3
 8017816:	7dfb      	ldrb	r3, [r7, #23]
 8017818:	005b      	lsls	r3, r3, #1
 801781a:	4619      	mov	r1, r3
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	440b      	add	r3, r1
 8017820:	3230      	adds	r2, #48	; 0x30
 8017822:	b2d2      	uxtb	r2, r2
 8017824:	701a      	strb	r2, [r3, #0]
 8017826:	e00a      	b.n	801783e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	0f1b      	lsrs	r3, r3, #28
 801782c:	b2da      	uxtb	r2, r3
 801782e:	7dfb      	ldrb	r3, [r7, #23]
 8017830:	005b      	lsls	r3, r3, #1
 8017832:	4619      	mov	r1, r3
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	440b      	add	r3, r1
 8017838:	3237      	adds	r2, #55	; 0x37
 801783a:	b2d2      	uxtb	r2, r2
 801783c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	011b      	lsls	r3, r3, #4
 8017842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017844:	7dfb      	ldrb	r3, [r7, #23]
 8017846:	005b      	lsls	r3, r3, #1
 8017848:	3301      	adds	r3, #1
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	4413      	add	r3, r2
 801784e:	2200      	movs	r2, #0
 8017850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017852:	7dfb      	ldrb	r3, [r7, #23]
 8017854:	3301      	adds	r3, #1
 8017856:	75fb      	strb	r3, [r7, #23]
 8017858:	7dfa      	ldrb	r2, [r7, #23]
 801785a:	79fb      	ldrb	r3, [r7, #7]
 801785c:	429a      	cmp	r2, r3
 801785e:	d3d3      	bcc.n	8017808 <IntToUnicode+0x18>
  }
}
 8017860:	bf00      	nop
 8017862:	bf00      	nop
 8017864:	371c      	adds	r7, #28
 8017866:	46bd      	mov	sp, r7
 8017868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786c:	4770      	bx	lr

0801786e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801786e:	b480      	push	{r7}
 8017870:	b083      	sub	sp, #12
 8017872:	af00      	add	r7, sp, #0
 8017874:	4603      	mov	r3, r0
 8017876:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	return USBD_OK;
 8017878:	2300      	movs	r3, #0
	/*
  if ( BSP_SD_Init() == MSD_OK )
	  return USBD_OK;
  return USBD_FAIL;*/
  /* USER CODE END 2 */
}
 801787a:	4618      	mov	r0, r3
 801787c:	370c      	adds	r7, #12
 801787e:	46bd      	mov	sp, r7
 8017880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017884:	4770      	bx	lr
	...

08017888 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b08e      	sub	sp, #56	; 0x38
 801788c:	af00      	add	r7, sp, #0
 801788e:	4603      	mov	r3, r0
 8017890:	60b9      	str	r1, [r7, #8]
 8017892:	607a      	str	r2, [r7, #4]
 8017894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 8017896:	23ff      	movs	r3, #255	; 0xff
 8017898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd1, &info);
 801789c:	f107 0314 	add.w	r3, r7, #20
 80178a0:	4619      	mov	r1, r3
 80178a2:	480a      	ldr	r0, [pc, #40]	; (80178cc <STORAGE_GetCapacity_FS+0x44>)
 80178a4:	f7ed ffaa 	bl	80057fc <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 80178a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178aa:	1e5a      	subs	r2, r3, #1
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80178b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b2:	b29a      	uxth	r2, r3
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	801a      	strh	r2, [r3, #0]
  ret = 0;
 80178b8:	2300      	movs	r3, #0
 80178ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 80178be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3738      	adds	r7, #56	; 0x38
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	200328c8 	.word	0x200328c8

080178d0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80178d0:	b480      	push	{r7}
 80178d2:	b083      	sub	sp, #12
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	4603      	mov	r3, r0
 80178d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
   return USBD_OK;
 80178da:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80178dc:	4618      	mov	r0, r3
 80178de:	370c      	adds	r7, #12
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b083      	sub	sp, #12
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	4603      	mov	r3, r0
 80178f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80178f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	370c      	adds	r7, #12
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr

08017900 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b088      	sub	sp, #32
 8017904:	af02      	add	r7, sp, #8
 8017906:	60b9      	str	r1, [r7, #8]
 8017908:	607a      	str	r2, [r7, #4]
 801790a:	461a      	mov	r2, r3
 801790c:	4603      	mov	r3, r0
 801790e:	73fb      	strb	r3, [r7, #15]
 8017910:	4613      	mov	r3, r2
 8017912:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  int8_t ret = -1;
 8017914:	23ff      	movs	r3, #255	; 0xff
 8017916:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017918:	89bb      	ldrh	r3, [r7, #12]
 801791a:	f04f 32ff 	mov.w	r2, #4294967295
 801791e:	9200      	str	r2, [sp, #0]
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	68b9      	ldr	r1, [r7, #8]
 8017924:	4808      	ldr	r0, [pc, #32]	; (8017948 <STORAGE_Read_FS+0x48>)
 8017926:	f7ec fed1 	bl	80046cc <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801792a:	bf00      	nop
 801792c:	4806      	ldr	r0, [pc, #24]	; (8017948 <STORAGE_Read_FS+0x48>)
 801792e:	f7ee f80d 	bl	800594c <HAL_SD_GetCardState>
 8017932:	4603      	mov	r3, r0
 8017934:	2b04      	cmp	r3, #4
 8017936:	d1f9      	bne.n	801792c <STORAGE_Read_FS+0x2c>
  ret = 0;
 8017938:	2300      	movs	r3, #0
 801793a:	75fb      	strb	r3, [r7, #23]
  return ret;
 801793c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017940:	4618      	mov	r0, r3
 8017942:	3718      	adds	r7, #24
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}
 8017948:	200328c8 	.word	0x200328c8

0801794c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b088      	sub	sp, #32
 8017950:	af02      	add	r7, sp, #8
 8017952:	60b9      	str	r1, [r7, #8]
 8017954:	607a      	str	r2, [r7, #4]
 8017956:	461a      	mov	r2, r3
 8017958:	4603      	mov	r3, r0
 801795a:	73fb      	strb	r3, [r7, #15]
 801795c:	4613      	mov	r3, r2
 801795e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  int8_t ret = -1;
 8017960:	23ff      	movs	r3, #255	; 0xff
 8017962:	75fb      	strb	r3, [r7, #23]

  HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017964:	89bb      	ldrh	r3, [r7, #12]
 8017966:	f04f 32ff 	mov.w	r2, #4294967295
 801796a:	9200      	str	r2, [sp, #0]
 801796c:	687a      	ldr	r2, [r7, #4]
 801796e:	68b9      	ldr	r1, [r7, #8]
 8017970:	4808      	ldr	r0, [pc, #32]	; (8017994 <STORAGE_Write_FS+0x48>)
 8017972:	f7ed f8a3 	bl	8004abc <HAL_SD_WriteBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017976:	bf00      	nop
 8017978:	4806      	ldr	r0, [pc, #24]	; (8017994 <STORAGE_Write_FS+0x48>)
 801797a:	f7ed ffe7 	bl	800594c <HAL_SD_GetCardState>
 801797e:	4603      	mov	r3, r0
 8017980:	2b04      	cmp	r3, #4
 8017982:	d1f9      	bne.n	8017978 <STORAGE_Write_FS+0x2c>
  ret = 0;
 8017984:	2300      	movs	r3, #0
 8017986:	75fb      	strb	r3, [r7, #23]
  return ret;
 8017988:	f997 3017 	ldrsb.w	r3, [r7, #23]
  // All okay
  return USBD_OK;
  /* USER CODE END 7 */
}
 801798c:	4618      	mov	r0, r3
 801798e:	3718      	adds	r7, #24
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}
 8017994:	200328c8 	.word	0x200328c8

08017998 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017998:	b480      	push	{r7}
 801799a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801799c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801799e:	4618      	mov	r0, r3
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr

080179a8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80179a8:	b480      	push	{r7}
 80179aa:	b083      	sub	sp, #12
 80179ac:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80179ae:	4b21      	ldr	r3, [pc, #132]	; (8017a34 <_DoInit+0x8c>)
 80179b0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2203      	movs	r2, #3
 80179b6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2203      	movs	r2, #3
 80179bc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	4a1d      	ldr	r2, [pc, #116]	; (8017a38 <_DoInit+0x90>)
 80179c2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	4a1d      	ldr	r2, [pc, #116]	; (8017a3c <_DoInit+0x94>)
 80179c8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80179d0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2200      	movs	r2, #0
 80179d6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2200      	movs	r2, #0
 80179e2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	4a14      	ldr	r2, [pc, #80]	; (8017a38 <_DoInit+0x90>)
 80179e8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	4a14      	ldr	r2, [pc, #80]	; (8017a40 <_DoInit+0x98>)
 80179ee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2210      	movs	r2, #16
 80179f4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2200      	movs	r2, #0
 80179fa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2200      	movs	r2, #0
 8017a00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	3307      	adds	r3, #7
 8017a0c:	4a0d      	ldr	r2, [pc, #52]	; (8017a44 <_DoInit+0x9c>)
 8017a0e:	6810      	ldr	r0, [r2, #0]
 8017a10:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	4a0c      	ldr	r2, [pc, #48]	; (8017a48 <_DoInit+0xa0>)
 8017a16:	6810      	ldr	r0, [r2, #0]
 8017a18:	6018      	str	r0, [r3, #0]
 8017a1a:	8891      	ldrh	r1, [r2, #4]
 8017a1c:	7992      	ldrb	r2, [r2, #6]
 8017a1e:	8099      	strh	r1, [r3, #4]
 8017a20:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	2220      	movs	r2, #32
 8017a26:	719a      	strb	r2, [r3, #6]
}
 8017a28:	bf00      	nop
 8017a2a:	370c      	adds	r7, #12
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr
 8017a34:	2003c5a4 	.word	0x2003c5a4
 8017a38:	0801a660 	.word	0x0801a660
 8017a3c:	2003c64c 	.word	0x2003c64c
 8017a40:	2003ca4c 	.word	0x2003ca4c
 8017a44:	0801a66c 	.word	0x0801a66c
 8017a48:	0801a670 	.word	0x0801a670

08017a4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b08a      	sub	sp, #40	; 0x28
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	60f8      	str	r0, [r7, #12]
 8017a54:	60b9      	str	r1, [r7, #8]
 8017a56:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8017a58:	4b3c      	ldr	r3, [pc, #240]	; (8017b4c <SEGGER_RTT_ReadNoLock+0x100>)
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <SEGGER_RTT_ReadNoLock+0x18>
 8017a60:	f7ff ffa2 	bl	80179a8 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8017a64:	68fa      	ldr	r2, [r7, #12]
 8017a66:	4613      	mov	r3, r2
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	4413      	add	r3, r2
 8017a6c:	00db      	lsls	r3, r3, #3
 8017a6e:	3360      	adds	r3, #96	; 0x60
 8017a70:	4a36      	ldr	r2, [pc, #216]	; (8017b4c <SEGGER_RTT_ReadNoLock+0x100>)
 8017a72:	4413      	add	r3, r2
 8017a74:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	691b      	ldr	r3, [r3, #16]
 8017a7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8017a80:	69bb      	ldr	r3, [r7, #24]
 8017a82:	68db      	ldr	r3, [r3, #12]
 8017a84:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8017a86:	2300      	movs	r3, #0
 8017a88:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8017a8a:	6a3a      	ldr	r2, [r7, #32]
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d92a      	bls.n	8017ae8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8017a92:	69bb      	ldr	r3, [r7, #24]
 8017a94:	689a      	ldr	r2, [r3, #8]
 8017a96:	6a3b      	ldr	r3, [r7, #32]
 8017a98:	1ad3      	subs	r3, r2, r3
 8017a9a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8017a9c:	693a      	ldr	r2, [r7, #16]
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	bf28      	it	cs
 8017aa4:	4613      	movcs	r3, r2
 8017aa6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8017aa8:	69bb      	ldr	r3, [r7, #24]
 8017aaa:	685a      	ldr	r2, [r3, #4]
 8017aac:	6a3b      	ldr	r3, [r7, #32]
 8017aae:	4413      	add	r3, r2
 8017ab0:	693a      	ldr	r2, [r7, #16]
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	69f8      	ldr	r0, [r7, #28]
 8017ab6:	f001 fdd7 	bl	8019668 <memcpy>
    NumBytesRead += NumBytesRem;
 8017aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017abc:	693b      	ldr	r3, [r7, #16]
 8017abe:	4413      	add	r3, r2
 8017ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8017ac2:	69fa      	ldr	r2, [r7, #28]
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	4413      	add	r3, r2
 8017ac8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	1ad3      	subs	r3, r2, r3
 8017ad0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8017ad2:	6a3a      	ldr	r2, [r7, #32]
 8017ad4:	693b      	ldr	r3, [r7, #16]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8017ada:	69bb      	ldr	r3, [r7, #24]
 8017adc:	689b      	ldr	r3, [r3, #8]
 8017ade:	6a3a      	ldr	r2, [r7, #32]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d101      	bne.n	8017ae8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8017ae8:	697a      	ldr	r2, [r7, #20]
 8017aea:	6a3b      	ldr	r3, [r7, #32]
 8017aec:	1ad3      	subs	r3, r2, r3
 8017aee:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8017af0:	693a      	ldr	r2, [r7, #16]
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	4293      	cmp	r3, r2
 8017af6:	bf28      	it	cs
 8017af8:	4613      	movcs	r3, r2
 8017afa:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8017afc:	693b      	ldr	r3, [r7, #16]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d018      	beq.n	8017b34 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8017b02:	69bb      	ldr	r3, [r7, #24]
 8017b04:	685a      	ldr	r2, [r3, #4]
 8017b06:	6a3b      	ldr	r3, [r7, #32]
 8017b08:	4413      	add	r3, r2
 8017b0a:	693a      	ldr	r2, [r7, #16]
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	69f8      	ldr	r0, [r7, #28]
 8017b10:	f001 fdaa 	bl	8019668 <memcpy>
    NumBytesRead += NumBytesRem;
 8017b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	4413      	add	r3, r2
 8017b1a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8017b1c:	69fa      	ldr	r2, [r7, #28]
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	4413      	add	r3, r2
 8017b22:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8017b24:	687a      	ldr	r2, [r7, #4]
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	1ad3      	subs	r3, r2, r3
 8017b2a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8017b2c:	6a3a      	ldr	r2, [r7, #32]
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	4413      	add	r3, r2
 8017b32:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8017b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d002      	beq.n	8017b40 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8017b3a:	69bb      	ldr	r3, [r7, #24]
 8017b3c:	6a3a      	ldr	r2, [r7, #32]
 8017b3e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8017b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b42:	4618      	mov	r0, r3
 8017b44:	3728      	adds	r7, #40	; 0x28
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	2003c5a4 	.word	0x2003c5a4

08017b50 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b08a      	sub	sp, #40	; 0x28
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	60f8      	str	r0, [r7, #12]
 8017b58:	60b9      	str	r1, [r7, #8]
 8017b5a:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	1c5a      	adds	r2, r3, #1
 8017b64:	4613      	mov	r3, r2
 8017b66:	005b      	lsls	r3, r3, #1
 8017b68:	4413      	add	r3, r2
 8017b6a:	00db      	lsls	r3, r3, #3
 8017b6c:	4a3f      	ldr	r2, [pc, #252]	; (8017c6c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8017b6e:	4413      	add	r3, r2
 8017b70:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8017b72:	6a3b      	ldr	r3, [r7, #32]
 8017b74:	691b      	ldr	r3, [r3, #16]
 8017b76:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8017b78:	6a3b      	ldr	r3, [r7, #32]
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8017b7e:	69fa      	ldr	r2, [r7, #28]
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d854      	bhi.n	8017c30 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8017b86:	6a3b      	ldr	r3, [r7, #32]
 8017b88:	689a      	ldr	r2, [r3, #8]
 8017b8a:	69bb      	ldr	r3, [r7, #24]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8017b92:	697a      	ldr	r2, [r7, #20]
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d30f      	bcc.n	8017bba <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8017b9a:	6a3b      	ldr	r3, [r7, #32]
 8017b9c:	685a      	ldr	r2, [r3, #4]
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	687a      	ldr	r2, [r7, #4]
 8017ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f001 fd5e 	bl	8019668 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8017bac:	69ba      	ldr	r2, [r7, #24]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	441a      	add	r2, r3
 8017bb2:	6a3b      	ldr	r3, [r7, #32]
 8017bb4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	e054      	b.n	8017c64 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8017bba:	697a      	ldr	r2, [r7, #20]
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	4413      	add	r3, r2
 8017bc0:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8017bc2:	697a      	ldr	r2, [r7, #20]
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d34b      	bcc.n	8017c62 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8017bca:	6a3b      	ldr	r3, [r7, #32]
 8017bcc:	689a      	ldr	r2, [r3, #8]
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	1ad3      	subs	r3, r2, r3
 8017bd2:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8017bd4:	693a      	ldr	r2, [r7, #16]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d90e      	bls.n	8017bfa <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8017bdc:	6a3b      	ldr	r3, [r7, #32]
 8017bde:	685a      	ldr	r2, [r3, #4]
 8017be0:	69bb      	ldr	r3, [r7, #24]
 8017be2:	4413      	add	r3, r2
 8017be4:	687a      	ldr	r2, [r7, #4]
 8017be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017be8:	4618      	mov	r0, r3
 8017bea:	f001 fd3d 	bl	8019668 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8017bee:	69ba      	ldr	r2, [r7, #24]
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	441a      	add	r2, r3
 8017bf4:	6a3b      	ldr	r3, [r7, #32]
 8017bf6:	60da      	str	r2, [r3, #12]
 8017bf8:	e018      	b.n	8017c2c <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8017bfa:	6a3b      	ldr	r3, [r7, #32]
 8017bfc:	685a      	ldr	r2, [r3, #4]
 8017bfe:	69bb      	ldr	r3, [r7, #24]
 8017c00:	4413      	add	r3, r2
 8017c02:	693a      	ldr	r2, [r7, #16]
 8017c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c06:	4618      	mov	r0, r3
 8017c08:	f001 fd2e 	bl	8019668 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8017c0c:	6a3b      	ldr	r3, [r7, #32]
 8017c0e:	6858      	ldr	r0, [r3, #4]
 8017c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	18d1      	adds	r1, r2, r3
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	693b      	ldr	r3, [r7, #16]
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	461a      	mov	r2, r3
 8017c1e:	f001 fd23 	bl	8019668 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8017c22:	687a      	ldr	r2, [r7, #4]
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	1ad2      	subs	r2, r2, r3
 8017c28:	6a3b      	ldr	r3, [r7, #32]
 8017c2a:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e019      	b.n	8017c64 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8017c30:	69fa      	ldr	r2, [r7, #28]
 8017c32:	69bb      	ldr	r3, [r7, #24]
 8017c34:	1ad3      	subs	r3, r2, r3
 8017c36:	3b01      	subs	r3, #1
 8017c38:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8017c3a:	697a      	ldr	r2, [r7, #20]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d30f      	bcc.n	8017c62 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8017c42:	6a3b      	ldr	r3, [r7, #32]
 8017c44:	685a      	ldr	r2, [r3, #4]
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	4413      	add	r3, r2
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f001 fd0a 	bl	8019668 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8017c54:	69ba      	ldr	r2, [r7, #24]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	441a      	add	r2, r3
 8017c5a:	6a3b      	ldr	r3, [r7, #32]
 8017c5c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8017c5e:	2301      	movs	r3, #1
 8017c60:	e000      	b.n	8017c64 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8017c62:	2300      	movs	r3, #0
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3728      	adds	r7, #40	; 0x28
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	2003c5a4 	.word	0x2003c5a4

08017c70 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b086      	sub	sp, #24
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	60f8      	str	r0, [r7, #12]
 8017c78:	60b9      	str	r1, [r7, #8]
 8017c7a:	607a      	str	r2, [r7, #4]
 8017c7c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8017c7e:	4b30      	ldr	r3, [pc, #192]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017c80:	781b      	ldrb	r3, [r3, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d101      	bne.n	8017c8a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8017c86:	f7ff fe8f 	bl	80179a8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8017c8a:	4b2d      	ldr	r3, [pc, #180]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017c8c:	691b      	ldr	r3, [r3, #16]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	4293      	cmp	r3, r2
 8017c94:	d24c      	bcs.n	8017d30 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8017c96:	f3ef 8311 	mrs	r3, BASEPRI
 8017c9a:	f04f 0120 	mov.w	r1, #32
 8017c9e:	f381 8811 	msr	BASEPRI, r1
 8017ca2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d032      	beq.n	8017d10 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8017caa:	4925      	ldr	r1, [pc, #148]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	1c5a      	adds	r2, r3, #1
 8017cb0:	4613      	mov	r3, r2
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	4413      	add	r3, r2
 8017cb6:	00db      	lsls	r3, r3, #3
 8017cb8:	440b      	add	r3, r1
 8017cba:	68ba      	ldr	r2, [r7, #8]
 8017cbc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8017cbe:	4920      	ldr	r1, [pc, #128]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	005b      	lsls	r3, r3, #1
 8017cc8:	4413      	add	r3, r2
 8017cca:	00db      	lsls	r3, r3, #3
 8017ccc:	440b      	add	r3, r1
 8017cce:	3304      	adds	r3, #4
 8017cd0:	687a      	ldr	r2, [r7, #4]
 8017cd2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8017cd4:	491a      	ldr	r1, [pc, #104]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017cd6:	68fa      	ldr	r2, [r7, #12]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	4413      	add	r3, r2
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	440b      	add	r3, r1
 8017ce2:	3320      	adds	r3, #32
 8017ce4:	683a      	ldr	r2, [r7, #0]
 8017ce6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8017ce8:	4915      	ldr	r1, [pc, #84]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017cea:	68fa      	ldr	r2, [r7, #12]
 8017cec:	4613      	mov	r3, r2
 8017cee:	005b      	lsls	r3, r3, #1
 8017cf0:	4413      	add	r3, r2
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	440b      	add	r3, r1
 8017cf6:	3328      	adds	r3, #40	; 0x28
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8017cfc:	4910      	ldr	r1, [pc, #64]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017cfe:	68fa      	ldr	r2, [r7, #12]
 8017d00:	4613      	mov	r3, r2
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	4413      	add	r3, r2
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	440b      	add	r3, r1
 8017d0a:	3324      	adds	r3, #36	; 0x24
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8017d10:	490b      	ldr	r1, [pc, #44]	; (8017d40 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8017d12:	68fa      	ldr	r2, [r7, #12]
 8017d14:	4613      	mov	r3, r2
 8017d16:	005b      	lsls	r3, r3, #1
 8017d18:	4413      	add	r3, r2
 8017d1a:	00db      	lsls	r3, r3, #3
 8017d1c:	440b      	add	r3, r1
 8017d1e:	332c      	adds	r3, #44	; 0x2c
 8017d20:	6a3a      	ldr	r2, [r7, #32]
 8017d22:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	617b      	str	r3, [r7, #20]
 8017d2e:	e002      	b.n	8017d36 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8017d30:	f04f 33ff 	mov.w	r3, #4294967295
 8017d34:	617b      	str	r3, [r7, #20]
  }
  return r;
 8017d36:	697b      	ldr	r3, [r7, #20]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3718      	adds	r7, #24
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	2003c5a4 	.word	0x2003c5a4

08017d44 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b086      	sub	sp, #24
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	60f8      	str	r0, [r7, #12]
 8017d4c:	60b9      	str	r1, [r7, #8]
 8017d4e:	607a      	str	r2, [r7, #4]
 8017d50:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8017d52:	4b30      	ldr	r3, [pc, #192]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d101      	bne.n	8017d5e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8017d5a:	f7ff fe25 	bl	80179a8 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8017d5e:	4b2d      	ldr	r3, [pc, #180]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017d60:	695b      	ldr	r3, [r3, #20]
 8017d62:	461a      	mov	r2, r3
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	4293      	cmp	r3, r2
 8017d68:	d24b      	bcs.n	8017e02 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8017d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8017d6e:	f04f 0120 	mov.w	r1, #32
 8017d72:	f381 8811 	msr	BASEPRI, r1
 8017d76:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d031      	beq.n	8017de2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8017d7e:	4925      	ldr	r1, [pc, #148]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017d80:	68fa      	ldr	r2, [r7, #12]
 8017d82:	4613      	mov	r3, r2
 8017d84:	005b      	lsls	r3, r3, #1
 8017d86:	4413      	add	r3, r2
 8017d88:	00db      	lsls	r3, r3, #3
 8017d8a:	440b      	add	r3, r1
 8017d8c:	3360      	adds	r3, #96	; 0x60
 8017d8e:	68ba      	ldr	r2, [r7, #8]
 8017d90:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8017d92:	4920      	ldr	r1, [pc, #128]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	4613      	mov	r3, r2
 8017d98:	005b      	lsls	r3, r3, #1
 8017d9a:	4413      	add	r3, r2
 8017d9c:	00db      	lsls	r3, r3, #3
 8017d9e:	440b      	add	r3, r1
 8017da0:	3364      	adds	r3, #100	; 0x64
 8017da2:	687a      	ldr	r2, [r7, #4]
 8017da4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8017da6:	491b      	ldr	r1, [pc, #108]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017da8:	68fa      	ldr	r2, [r7, #12]
 8017daa:	4613      	mov	r3, r2
 8017dac:	005b      	lsls	r3, r3, #1
 8017dae:	4413      	add	r3, r2
 8017db0:	00db      	lsls	r3, r3, #3
 8017db2:	440b      	add	r3, r1
 8017db4:	3368      	adds	r3, #104	; 0x68
 8017db6:	683a      	ldr	r2, [r7, #0]
 8017db8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8017dba:	4916      	ldr	r1, [pc, #88]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017dbc:	68fa      	ldr	r2, [r7, #12]
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	005b      	lsls	r3, r3, #1
 8017dc2:	4413      	add	r3, r2
 8017dc4:	00db      	lsls	r3, r3, #3
 8017dc6:	440b      	add	r3, r1
 8017dc8:	3370      	adds	r3, #112	; 0x70
 8017dca:	2200      	movs	r2, #0
 8017dcc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8017dce:	4911      	ldr	r1, [pc, #68]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	4413      	add	r3, r2
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	440b      	add	r3, r1
 8017ddc:	336c      	adds	r3, #108	; 0x6c
 8017dde:	2200      	movs	r2, #0
 8017de0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8017de2:	490c      	ldr	r1, [pc, #48]	; (8017e14 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	4613      	mov	r3, r2
 8017de8:	005b      	lsls	r3, r3, #1
 8017dea:	4413      	add	r3, r2
 8017dec:	00db      	lsls	r3, r3, #3
 8017dee:	440b      	add	r3, r1
 8017df0:	3374      	adds	r3, #116	; 0x74
 8017df2:	6a3a      	ldr	r2, [r7, #32]
 8017df4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	617b      	str	r3, [r7, #20]
 8017e00:	e002      	b.n	8017e08 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8017e02:	f04f 33ff 	mov.w	r3, #4294967295
 8017e06:	617b      	str	r3, [r7, #20]
  }
  return r;
 8017e08:	697b      	ldr	r3, [r7, #20]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3718      	adds	r7, #24
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	2003c5a4 	.word	0x2003c5a4

08017e18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8017e18:	b480      	push	{r7}
 8017e1a:	b087      	sub	sp, #28
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8017e24:	2300      	movs	r3, #0
 8017e26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8017e28:	e002      	b.n	8017e30 <_EncodeStr+0x18>
    Len++;
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8017e30:	68ba      	ldr	r2, [r7, #8]
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	4413      	add	r3, r2
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d1f6      	bne.n	8017e2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8017e3c:	693a      	ldr	r2, [r7, #16]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d901      	bls.n	8017e48 <_EncodeStr+0x30>
    Len = Limit;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8017e4c:	d806      	bhi.n	8017e5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	1c5a      	adds	r2, r3, #1
 8017e52:	60fa      	str	r2, [r7, #12]
 8017e54:	693a      	ldr	r2, [r7, #16]
 8017e56:	b2d2      	uxtb	r2, r2
 8017e58:	701a      	strb	r2, [r3, #0]
 8017e5a:	e011      	b.n	8017e80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	1c5a      	adds	r2, r3, #1
 8017e60:	60fa      	str	r2, [r7, #12]
 8017e62:	22ff      	movs	r2, #255	; 0xff
 8017e64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	1c5a      	adds	r2, r3, #1
 8017e6a:	60fa      	str	r2, [r7, #12]
 8017e6c:	693a      	ldr	r2, [r7, #16]
 8017e6e:	b2d2      	uxtb	r2, r2
 8017e70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	0a19      	lsrs	r1, r3, #8
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	1c5a      	adds	r2, r3, #1
 8017e7a:	60fa      	str	r2, [r7, #12]
 8017e7c:	b2ca      	uxtb	r2, r1
 8017e7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8017e80:	2300      	movs	r3, #0
 8017e82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8017e84:	e00a      	b.n	8017e9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8017e86:	68ba      	ldr	r2, [r7, #8]
 8017e88:	1c53      	adds	r3, r2, #1
 8017e8a:	60bb      	str	r3, [r7, #8]
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	1c59      	adds	r1, r3, #1
 8017e90:	60f9      	str	r1, [r7, #12]
 8017e92:	7812      	ldrb	r2, [r2, #0]
 8017e94:	701a      	strb	r2, [r3, #0]
    n++;
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	3301      	adds	r3, #1
 8017e9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8017e9c:	697a      	ldr	r2, [r7, #20]
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d3f0      	bcc.n	8017e86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	371c      	adds	r7, #28
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8017eb2:	b480      	push	{r7}
 8017eb4:	b083      	sub	sp, #12
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	3304      	adds	r3, #4
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr
	...

08017ecc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8017ed2:	1cfb      	adds	r3, r7, #3
 8017ed4:	2201      	movs	r2, #1
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	2001      	movs	r0, #1
 8017eda:	f7ff fdb7 	bl	8017a4c <SEGGER_RTT_ReadNoLock>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	dd4c      	ble.n	8017f82 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8017ee8:	78fb      	ldrb	r3, [r7, #3]
 8017eea:	2b07      	cmp	r3, #7
 8017eec:	dc16      	bgt.n	8017f1c <_HandleIncomingPacket+0x50>
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	dd3c      	ble.n	8017f6c <_HandleIncomingPacket+0xa0>
 8017ef2:	3b01      	subs	r3, #1
 8017ef4:	2b06      	cmp	r3, #6
 8017ef6:	d839      	bhi.n	8017f6c <_HandleIncomingPacket+0xa0>
 8017ef8:	a201      	add	r2, pc, #4	; (adr r2, 8017f00 <_HandleIncomingPacket+0x34>)
 8017efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017efe:	bf00      	nop
 8017f00:	08017f23 	.word	0x08017f23
 8017f04:	08017f29 	.word	0x08017f29
 8017f08:	08017f2f 	.word	0x08017f2f
 8017f0c:	08017f35 	.word	0x08017f35
 8017f10:	08017f3b 	.word	0x08017f3b
 8017f14:	08017f41 	.word	0x08017f41
 8017f18:	08017f47 	.word	0x08017f47
 8017f1c:	2b80      	cmp	r3, #128	; 0x80
 8017f1e:	d015      	beq.n	8017f4c <_HandleIncomingPacket+0x80>
 8017f20:	e024      	b.n	8017f6c <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8017f22:	f000 fc33 	bl	801878c <SEGGER_SYSVIEW_Start>
      break;
 8017f26:	e031      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8017f28:	f000 fcec 	bl	8018904 <SEGGER_SYSVIEW_Stop>
      break;
 8017f2c:	e02e      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8017f2e:	f000 fec7 	bl	8018cc0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8017f32:	e02b      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8017f34:	f000 fe8c 	bl	8018c50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8017f38:	e028      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8017f3a:	f000 fd09 	bl	8018950 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8017f3e:	e025      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8017f40:	f001 f888 	bl	8019054 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8017f44:	e022      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8017f46:	f001 f867 	bl	8019018 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8017f4a:	e01f      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8017f4c:	1cfb      	adds	r3, r7, #3
 8017f4e:	2201      	movs	r2, #1
 8017f50:	4619      	mov	r1, r3
 8017f52:	2001      	movs	r0, #1
 8017f54:	f7ff fd7a 	bl	8017a4c <SEGGER_RTT_ReadNoLock>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	dd11      	ble.n	8017f86 <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8017f62:	78fb      	ldrb	r3, [r7, #3]
 8017f64:	4618      	mov	r0, r3
 8017f66:	f000 ffd7 	bl	8018f18 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8017f6a:	e00c      	b.n	8017f86 <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8017f6c:	78fb      	ldrb	r3, [r7, #3]
 8017f6e:	b25b      	sxtb	r3, r3
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	da0a      	bge.n	8017f8a <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8017f74:	1cfb      	adds	r3, r7, #3
 8017f76:	2201      	movs	r2, #1
 8017f78:	4619      	mov	r1, r3
 8017f7a:	2001      	movs	r0, #1
 8017f7c:	f7ff fd66 	bl	8017a4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8017f80:	e003      	b.n	8017f8a <_HandleIncomingPacket+0xbe>
    }
  }
 8017f82:	bf00      	nop
 8017f84:	e002      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
      break;
 8017f86:	bf00      	nop
 8017f88:	e000      	b.n	8017f8c <_HandleIncomingPacket+0xc0>
      break;
 8017f8a:	bf00      	nop
}
 8017f8c:	bf00      	nop
 8017f8e:	3708      	adds	r7, #8
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b08c      	sub	sp, #48	; 0x30
 8017f98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8017f9e:	1d3b      	adds	r3, r7, #4
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8017fa4:	69fb      	ldr	r3, [r7, #28]
 8017fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fa8:	4b30      	ldr	r3, [pc, #192]	; (801806c <_TrySendOverflowPacket+0xd8>)
 8017faa:	695b      	ldr	r3, [r3, #20]
 8017fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fae:	e00b      	b.n	8017fc8 <_TrySendOverflowPacket+0x34>
 8017fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	1c59      	adds	r1, r3, #1
 8017fb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8017fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017fbe:	b2d2      	uxtb	r2, r2
 8017fc0:	701a      	strb	r2, [r3, #0]
 8017fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc4:	09db      	lsrs	r3, r3, #7
 8017fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fca:	2b7f      	cmp	r3, #127	; 0x7f
 8017fcc:	d8f0      	bhi.n	8017fb0 <_TrySendOverflowPacket+0x1c>
 8017fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd0:	1c5a      	adds	r2, r3, #1
 8017fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fd6:	b2d2      	uxtb	r2, r2
 8017fd8:	701a      	strb	r2, [r3, #0]
 8017fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fdc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8017fde:	4b24      	ldr	r3, [pc, #144]	; (8018070 <_TrySendOverflowPacket+0xdc>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8017fe4:	4b21      	ldr	r3, [pc, #132]	; (801806c <_TrySendOverflowPacket+0xd8>)
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	69ba      	ldr	r2, [r7, #24]
 8017fea:	1ad3      	subs	r3, r2, r3
 8017fec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8017fee:	69fb      	ldr	r3, [r7, #28]
 8017ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	623b      	str	r3, [r7, #32]
 8017ff6:	e00b      	b.n	8018010 <_TrySendOverflowPacket+0x7c>
 8017ff8:	6a3b      	ldr	r3, [r7, #32]
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffe:	1c59      	adds	r1, r3, #1
 8018000:	6279      	str	r1, [r7, #36]	; 0x24
 8018002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018006:	b2d2      	uxtb	r2, r2
 8018008:	701a      	strb	r2, [r3, #0]
 801800a:	6a3b      	ldr	r3, [r7, #32]
 801800c:	09db      	lsrs	r3, r3, #7
 801800e:	623b      	str	r3, [r7, #32]
 8018010:	6a3b      	ldr	r3, [r7, #32]
 8018012:	2b7f      	cmp	r3, #127	; 0x7f
 8018014:	d8f0      	bhi.n	8017ff8 <_TrySendOverflowPacket+0x64>
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018018:	1c5a      	adds	r2, r3, #1
 801801a:	627a      	str	r2, [r7, #36]	; 0x24
 801801c:	6a3a      	ldr	r2, [r7, #32]
 801801e:	b2d2      	uxtb	r2, r2
 8018020:	701a      	strb	r2, [r3, #0]
 8018022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018024:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8018026:	1d3b      	adds	r3, r7, #4
 8018028:	69fa      	ldr	r2, [r7, #28]
 801802a:	1ad3      	subs	r3, r2, r3
 801802c:	461a      	mov	r2, r3
 801802e:	1d3b      	adds	r3, r7, #4
 8018030:	4619      	mov	r1, r3
 8018032:	2001      	movs	r0, #1
 8018034:	f7ff fd8c 	bl	8017b50 <SEGGER_RTT_WriteSkipNoLock>
 8018038:	4603      	mov	r3, r0
 801803a:	613b      	str	r3, [r7, #16]
  if (Status) {
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d009      	beq.n	8018056 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8018042:	4a0a      	ldr	r2, [pc, #40]	; (801806c <_TrySendOverflowPacket+0xd8>)
 8018044:	69bb      	ldr	r3, [r7, #24]
 8018046:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8018048:	4b08      	ldr	r3, [pc, #32]	; (801806c <_TrySendOverflowPacket+0xd8>)
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	3b01      	subs	r3, #1
 801804e:	b2da      	uxtb	r2, r3
 8018050:	4b06      	ldr	r3, [pc, #24]	; (801806c <_TrySendOverflowPacket+0xd8>)
 8018052:	701a      	strb	r2, [r3, #0]
 8018054:	e004      	b.n	8018060 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8018056:	4b05      	ldr	r3, [pc, #20]	; (801806c <_TrySendOverflowPacket+0xd8>)
 8018058:	695b      	ldr	r3, [r3, #20]
 801805a:	3301      	adds	r3, #1
 801805c:	4a03      	ldr	r2, [pc, #12]	; (801806c <_TrySendOverflowPacket+0xd8>)
 801805e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8018060:	693b      	ldr	r3, [r7, #16]
}
 8018062:	4618      	mov	r0, r3
 8018064:	3730      	adds	r7, #48	; 0x30
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	2003ce64 	.word	0x2003ce64
 8018070:	e0001004 	.word	0xe0001004

08018074 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8018074:	b580      	push	{r7, lr}
 8018076:	b08a      	sub	sp, #40	; 0x28
 8018078:	af00      	add	r7, sp, #0
 801807a:	60f8      	str	r0, [r7, #12]
 801807c:	60b9      	str	r1, [r7, #8]
 801807e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8018080:	4b63      	ldr	r3, [pc, #396]	; (8018210 <_SendPacket+0x19c>)
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	2b01      	cmp	r3, #1
 8018086:	d010      	beq.n	80180aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8018088:	4b61      	ldr	r3, [pc, #388]	; (8018210 <_SendPacket+0x19c>)
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 80a1 	beq.w	80181d4 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8018092:	4b5f      	ldr	r3, [pc, #380]	; (8018210 <_SendPacket+0x19c>)
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b02      	cmp	r3, #2
 8018098:	d109      	bne.n	80180ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 801809a:	f7ff ff7b 	bl	8017f94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 801809e:	4b5c      	ldr	r3, [pc, #368]	; (8018210 <_SendPacket+0x19c>)
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	2b01      	cmp	r3, #1
 80180a4:	f040 8098 	bne.w	80181d8 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80180a8:	e001      	b.n	80180ae <_SendPacket+0x3a>
    goto Send;
 80180aa:	bf00      	nop
 80180ac:	e000      	b.n	80180b0 <_SendPacket+0x3c>
Send:
 80180ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2b1f      	cmp	r3, #31
 80180b4:	d809      	bhi.n	80180ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80180b6:	4b56      	ldr	r3, [pc, #344]	; (8018210 <_SendPacket+0x19c>)
 80180b8:	69da      	ldr	r2, [r3, #28]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	fa22 f303 	lsr.w	r3, r2, r3
 80180c0:	f003 0301 	and.w	r3, r3, #1
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f040 8089 	bne.w	80181dc <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2b17      	cmp	r3, #23
 80180ce:	d807      	bhi.n	80180e0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	3b01      	subs	r3, #1
 80180d4:	60fb      	str	r3, [r7, #12]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	b2da      	uxtb	r2, r3
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	701a      	strb	r2, [r3, #0]
 80180de:	e03d      	b.n	801815c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80180e0:	68ba      	ldr	r2, [r7, #8]
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	1ad3      	subs	r3, r2, r3
 80180e6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80180e8:	69fb      	ldr	r3, [r7, #28]
 80180ea:	2b7f      	cmp	r3, #127	; 0x7f
 80180ec:	d912      	bls.n	8018114 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80180ee:	69fb      	ldr	r3, [r7, #28]
 80180f0:	09da      	lsrs	r2, r3, #7
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	3b01      	subs	r3, #1
 80180f6:	60fb      	str	r3, [r7, #12]
 80180f8:	b2d2      	uxtb	r2, r2
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80180fe:	69fb      	ldr	r3, [r7, #28]
 8018100:	b2db      	uxtb	r3, r3
 8018102:	68fa      	ldr	r2, [r7, #12]
 8018104:	3a01      	subs	r2, #1
 8018106:	60fa      	str	r2, [r7, #12]
 8018108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801810c:	b2da      	uxtb	r2, r3
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	701a      	strb	r2, [r3, #0]
 8018112:	e006      	b.n	8018122 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	3b01      	subs	r3, #1
 8018118:	60fb      	str	r3, [r7, #12]
 801811a:	69fb      	ldr	r3, [r7, #28]
 801811c:	b2da      	uxtb	r2, r3
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2b7f      	cmp	r3, #127	; 0x7f
 8018126:	d912      	bls.n	801814e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	09da      	lsrs	r2, r3, #7
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	3b01      	subs	r3, #1
 8018130:	60fb      	str	r3, [r7, #12]
 8018132:	b2d2      	uxtb	r2, r2
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	b2db      	uxtb	r3, r3
 801813c:	68fa      	ldr	r2, [r7, #12]
 801813e:	3a01      	subs	r2, #1
 8018140:	60fa      	str	r2, [r7, #12]
 8018142:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018146:	b2da      	uxtb	r2, r3
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	701a      	strb	r2, [r3, #0]
 801814c:	e006      	b.n	801815c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	3b01      	subs	r3, #1
 8018152:	60fb      	str	r3, [r7, #12]
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	b2da      	uxtb	r2, r3
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801815c:	4b2d      	ldr	r3, [pc, #180]	; (8018214 <_SendPacket+0x1a0>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8018162:	4b2b      	ldr	r3, [pc, #172]	; (8018210 <_SendPacket+0x19c>)
 8018164:	68db      	ldr	r3, [r3, #12]
 8018166:	69ba      	ldr	r2, [r7, #24]
 8018168:	1ad3      	subs	r3, r2, r3
 801816a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	627b      	str	r3, [r7, #36]	; 0x24
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	623b      	str	r3, [r7, #32]
 8018174:	e00b      	b.n	801818e <_SendPacket+0x11a>
 8018176:	6a3b      	ldr	r3, [r7, #32]
 8018178:	b2da      	uxtb	r2, r3
 801817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817c:	1c59      	adds	r1, r3, #1
 801817e:	6279      	str	r1, [r7, #36]	; 0x24
 8018180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018184:	b2d2      	uxtb	r2, r2
 8018186:	701a      	strb	r2, [r3, #0]
 8018188:	6a3b      	ldr	r3, [r7, #32]
 801818a:	09db      	lsrs	r3, r3, #7
 801818c:	623b      	str	r3, [r7, #32]
 801818e:	6a3b      	ldr	r3, [r7, #32]
 8018190:	2b7f      	cmp	r3, #127	; 0x7f
 8018192:	d8f0      	bhi.n	8018176 <_SendPacket+0x102>
 8018194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018196:	1c5a      	adds	r2, r3, #1
 8018198:	627a      	str	r2, [r7, #36]	; 0x24
 801819a:	6a3a      	ldr	r2, [r7, #32]
 801819c:	b2d2      	uxtb	r2, r2
 801819e:	701a      	strb	r2, [r3, #0]
 80181a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80181a4:	68ba      	ldr	r2, [r7, #8]
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	1ad3      	subs	r3, r2, r3
 80181aa:	461a      	mov	r2, r3
 80181ac:	68f9      	ldr	r1, [r7, #12]
 80181ae:	2001      	movs	r0, #1
 80181b0:	f7ff fcce 	bl	8017b50 <SEGGER_RTT_WriteSkipNoLock>
 80181b4:	4603      	mov	r3, r0
 80181b6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80181b8:	693b      	ldr	r3, [r7, #16]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d003      	beq.n	80181c6 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80181be:	4a14      	ldr	r2, [pc, #80]	; (8018210 <_SendPacket+0x19c>)
 80181c0:	69bb      	ldr	r3, [r7, #24]
 80181c2:	60d3      	str	r3, [r2, #12]
 80181c4:	e00b      	b.n	80181de <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80181c6:	4b12      	ldr	r3, [pc, #72]	; (8018210 <_SendPacket+0x19c>)
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	3301      	adds	r3, #1
 80181cc:	b2da      	uxtb	r2, r3
 80181ce:	4b10      	ldr	r3, [pc, #64]	; (8018210 <_SendPacket+0x19c>)
 80181d0:	701a      	strb	r2, [r3, #0]
 80181d2:	e004      	b.n	80181de <_SendPacket+0x16a>
    goto SendDone;
 80181d4:	bf00      	nop
 80181d6:	e002      	b.n	80181de <_SendPacket+0x16a>
      goto SendDone;
 80181d8:	bf00      	nop
 80181da:	e000      	b.n	80181de <_SendPacket+0x16a>
      goto SendDone;
 80181dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80181de:	4b0e      	ldr	r3, [pc, #56]	; (8018218 <_SendPacket+0x1a4>)
 80181e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80181e4:	4b0c      	ldr	r3, [pc, #48]	; (8018218 <_SendPacket+0x1a4>)
 80181e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d00b      	beq.n	8018206 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80181ee:	4b08      	ldr	r3, [pc, #32]	; (8018210 <_SendPacket+0x19c>)
 80181f0:	789b      	ldrb	r3, [r3, #2]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d107      	bne.n	8018206 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80181f6:	4b06      	ldr	r3, [pc, #24]	; (8018210 <_SendPacket+0x19c>)
 80181f8:	2201      	movs	r2, #1
 80181fa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80181fc:	f7ff fe66 	bl	8017ecc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8018200:	4b03      	ldr	r3, [pc, #12]	; (8018210 <_SendPacket+0x19c>)
 8018202:	2200      	movs	r2, #0
 8018204:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8018206:	bf00      	nop
 8018208:	3728      	adds	r7, #40	; 0x28
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	2003ce64 	.word	0x2003ce64
 8018214:	e0001004 	.word	0xe0001004
 8018218:	2003c5a4 	.word	0x2003c5a4

0801821c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 801821c:	b580      	push	{r7, lr}
 801821e:	b086      	sub	sp, #24
 8018220:	af02      	add	r7, sp, #8
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
 8018228:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801822a:	2300      	movs	r3, #0
 801822c:	9300      	str	r3, [sp, #0]
 801822e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018232:	4a14      	ldr	r2, [pc, #80]	; (8018284 <SEGGER_SYSVIEW_Init+0x68>)
 8018234:	4914      	ldr	r1, [pc, #80]	; (8018288 <SEGGER_SYSVIEW_Init+0x6c>)
 8018236:	2001      	movs	r0, #1
 8018238:	f7ff fd1a 	bl	8017c70 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801823c:	2300      	movs	r3, #0
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	2308      	movs	r3, #8
 8018242:	4a12      	ldr	r2, [pc, #72]	; (801828c <SEGGER_SYSVIEW_Init+0x70>)
 8018244:	4910      	ldr	r1, [pc, #64]	; (8018288 <SEGGER_SYSVIEW_Init+0x6c>)
 8018246:	2001      	movs	r0, #1
 8018248:	f7ff fd7c 	bl	8017d44 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 801824c:	4b10      	ldr	r3, [pc, #64]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 801824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018252:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018254:	4b0f      	ldr	r3, [pc, #60]	; (8018294 <SEGGER_SYSVIEW_Init+0x78>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	4a0d      	ldr	r2, [pc, #52]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 801825a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 801825c:	4a0c      	ldr	r2, [pc, #48]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8018262:	4a0b      	ldr	r2, [pc, #44]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8018268:	4a09      	ldr	r2, [pc, #36]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 801826e:	4a08      	ldr	r2, [pc, #32]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8018274:	4b06      	ldr	r3, [pc, #24]	; (8018290 <SEGGER_SYSVIEW_Init+0x74>)
 8018276:	2200      	movs	r2, #0
 8018278:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 801827a:	bf00      	nop
 801827c:	3710      	adds	r7, #16
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	2003ca5c 	.word	0x2003ca5c
 8018288:	0801a678 	.word	0x0801a678
 801828c:	2003ce5c 	.word	0x2003ce5c
 8018290:	2003ce64 	.word	0x2003ce64
 8018294:	e0001004 	.word	0xe0001004

08018298 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8018298:	b480      	push	{r7}
 801829a:	b083      	sub	sp, #12
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80182a0:	4a04      	ldr	r2, [pc, #16]	; (80182b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6113      	str	r3, [r2, #16]
}
 80182a6:	bf00      	nop
 80182a8:	370c      	adds	r7, #12
 80182aa:	46bd      	mov	sp, r7
 80182ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b0:	4770      	bx	lr
 80182b2:	bf00      	nop
 80182b4:	2003ce64 	.word	0x2003ce64

080182b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80182c0:	f3ef 8311 	mrs	r3, BASEPRI
 80182c4:	f04f 0120 	mov.w	r1, #32
 80182c8:	f381 8811 	msr	BASEPRI, r1
 80182cc:	60fb      	str	r3, [r7, #12]
 80182ce:	4808      	ldr	r0, [pc, #32]	; (80182f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80182d0:	f7ff fdef 	bl	8017eb2 <_PreparePacket>
 80182d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80182d6:	687a      	ldr	r2, [r7, #4]
 80182d8:	68b9      	ldr	r1, [r7, #8]
 80182da:	68b8      	ldr	r0, [r7, #8]
 80182dc:	f7ff feca 	bl	8018074 <_SendPacket>
  RECORD_END();
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	f383 8811 	msr	BASEPRI, r3
}
 80182e6:	bf00      	nop
 80182e8:	3710      	adds	r7, #16
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	bf00      	nop
 80182f0:	2003ce94 	.word	0x2003ce94

080182f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b088      	sub	sp, #32
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
 80182fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80182fe:	f3ef 8311 	mrs	r3, BASEPRI
 8018302:	f04f 0120 	mov.w	r1, #32
 8018306:	f381 8811 	msr	BASEPRI, r1
 801830a:	617b      	str	r3, [r7, #20]
 801830c:	4816      	ldr	r0, [pc, #88]	; (8018368 <SEGGER_SYSVIEW_RecordU32+0x74>)
 801830e:	f7ff fdd0 	bl	8017eb2 <_PreparePacket>
 8018312:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	61fb      	str	r3, [r7, #28]
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	61bb      	str	r3, [r7, #24]
 8018320:	e00b      	b.n	801833a <SEGGER_SYSVIEW_RecordU32+0x46>
 8018322:	69bb      	ldr	r3, [r7, #24]
 8018324:	b2da      	uxtb	r2, r3
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	1c59      	adds	r1, r3, #1
 801832a:	61f9      	str	r1, [r7, #28]
 801832c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018330:	b2d2      	uxtb	r2, r2
 8018332:	701a      	strb	r2, [r3, #0]
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	09db      	lsrs	r3, r3, #7
 8018338:	61bb      	str	r3, [r7, #24]
 801833a:	69bb      	ldr	r3, [r7, #24]
 801833c:	2b7f      	cmp	r3, #127	; 0x7f
 801833e:	d8f0      	bhi.n	8018322 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	1c5a      	adds	r2, r3, #1
 8018344:	61fa      	str	r2, [r7, #28]
 8018346:	69ba      	ldr	r2, [r7, #24]
 8018348:	b2d2      	uxtb	r2, r2
 801834a:	701a      	strb	r2, [r3, #0]
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	68f9      	ldr	r1, [r7, #12]
 8018354:	6938      	ldr	r0, [r7, #16]
 8018356:	f7ff fe8d 	bl	8018074 <_SendPacket>
  RECORD_END();
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	f383 8811 	msr	BASEPRI, r3
}
 8018360:	bf00      	nop
 8018362:	3720      	adds	r7, #32
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	2003ce94 	.word	0x2003ce94

0801836c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 801836c:	b580      	push	{r7, lr}
 801836e:	b08c      	sub	sp, #48	; 0x30
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8018378:	f3ef 8311 	mrs	r3, BASEPRI
 801837c:	f04f 0120 	mov.w	r1, #32
 8018380:	f381 8811 	msr	BASEPRI, r1
 8018384:	61fb      	str	r3, [r7, #28]
 8018386:	4825      	ldr	r0, [pc, #148]	; (801841c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8018388:	f7ff fd93 	bl	8017eb2 <_PreparePacket>
 801838c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	62bb      	str	r3, [r7, #40]	; 0x28
 801839a:	e00b      	b.n	80183b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 801839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839e:	b2da      	uxtb	r2, r3
 80183a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a2:	1c59      	adds	r1, r3, #1
 80183a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80183a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80183aa:	b2d2      	uxtb	r2, r2
 80183ac:	701a      	strb	r2, [r3, #0]
 80183ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b0:	09db      	lsrs	r3, r3, #7
 80183b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80183b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b6:	2b7f      	cmp	r3, #127	; 0x7f
 80183b8:	d8f0      	bhi.n	801839c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80183ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183bc:	1c5a      	adds	r2, r3, #1
 80183be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80183c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183c2:	b2d2      	uxtb	r2, r2
 80183c4:	701a      	strb	r2, [r3, #0]
 80183c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	627b      	str	r3, [r7, #36]	; 0x24
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	623b      	str	r3, [r7, #32]
 80183d2:	e00b      	b.n	80183ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80183d4:	6a3b      	ldr	r3, [r7, #32]
 80183d6:	b2da      	uxtb	r2, r3
 80183d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183da:	1c59      	adds	r1, r3, #1
 80183dc:	6279      	str	r1, [r7, #36]	; 0x24
 80183de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80183e2:	b2d2      	uxtb	r2, r2
 80183e4:	701a      	strb	r2, [r3, #0]
 80183e6:	6a3b      	ldr	r3, [r7, #32]
 80183e8:	09db      	lsrs	r3, r3, #7
 80183ea:	623b      	str	r3, [r7, #32]
 80183ec:	6a3b      	ldr	r3, [r7, #32]
 80183ee:	2b7f      	cmp	r3, #127	; 0x7f
 80183f0:	d8f0      	bhi.n	80183d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80183f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f4:	1c5a      	adds	r2, r3, #1
 80183f6:	627a      	str	r2, [r7, #36]	; 0x24
 80183f8:	6a3a      	ldr	r2, [r7, #32]
 80183fa:	b2d2      	uxtb	r2, r2
 80183fc:	701a      	strb	r2, [r3, #0]
 80183fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018400:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018402:	68fa      	ldr	r2, [r7, #12]
 8018404:	6979      	ldr	r1, [r7, #20]
 8018406:	69b8      	ldr	r0, [r7, #24]
 8018408:	f7ff fe34 	bl	8018074 <_SendPacket>
  RECORD_END();
 801840c:	69fb      	ldr	r3, [r7, #28]
 801840e:	f383 8811 	msr	BASEPRI, r3
}
 8018412:	bf00      	nop
 8018414:	3730      	adds	r7, #48	; 0x30
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}
 801841a:	bf00      	nop
 801841c:	2003ce94 	.word	0x2003ce94

08018420 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8018420:	b580      	push	{r7, lr}
 8018422:	b08e      	sub	sp, #56	; 0x38
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	607a      	str	r2, [r7, #4]
 801842c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 801842e:	f3ef 8311 	mrs	r3, BASEPRI
 8018432:	f04f 0120 	mov.w	r1, #32
 8018436:	f381 8811 	msr	BASEPRI, r1
 801843a:	61fb      	str	r3, [r7, #28]
 801843c:	4832      	ldr	r0, [pc, #200]	; (8018508 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 801843e:	f7ff fd38 	bl	8017eb2 <_PreparePacket>
 8018442:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018444:	69bb      	ldr	r3, [r7, #24]
 8018446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	637b      	str	r3, [r7, #52]	; 0x34
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	633b      	str	r3, [r7, #48]	; 0x30
 8018450:	e00b      	b.n	801846a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	b2da      	uxtb	r2, r3
 8018456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018458:	1c59      	adds	r1, r3, #1
 801845a:	6379      	str	r1, [r7, #52]	; 0x34
 801845c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018460:	b2d2      	uxtb	r2, r2
 8018462:	701a      	strb	r2, [r3, #0]
 8018464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018466:	09db      	lsrs	r3, r3, #7
 8018468:	633b      	str	r3, [r7, #48]	; 0x30
 801846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846c:	2b7f      	cmp	r3, #127	; 0x7f
 801846e:	d8f0      	bhi.n	8018452 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8018470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018472:	1c5a      	adds	r2, r3, #1
 8018474:	637a      	str	r2, [r7, #52]	; 0x34
 8018476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018478:	b2d2      	uxtb	r2, r2
 801847a:	701a      	strb	r2, [r3, #0]
 801847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801847e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	62bb      	str	r3, [r7, #40]	; 0x28
 8018488:	e00b      	b.n	80184a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 801848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848c:	b2da      	uxtb	r2, r3
 801848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018490:	1c59      	adds	r1, r3, #1
 8018492:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018498:	b2d2      	uxtb	r2, r2
 801849a:	701a      	strb	r2, [r3, #0]
 801849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849e:	09db      	lsrs	r3, r3, #7
 80184a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80184a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a4:	2b7f      	cmp	r3, #127	; 0x7f
 80184a6:	d8f0      	bhi.n	801848a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80184a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184aa:	1c5a      	adds	r2, r3, #1
 80184ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80184ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184b0:	b2d2      	uxtb	r2, r2
 80184b2:	701a      	strb	r2, [r3, #0]
 80184b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	627b      	str	r3, [r7, #36]	; 0x24
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	623b      	str	r3, [r7, #32]
 80184c0:	e00b      	b.n	80184da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80184c2:	6a3b      	ldr	r3, [r7, #32]
 80184c4:	b2da      	uxtb	r2, r3
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	1c59      	adds	r1, r3, #1
 80184ca:	6279      	str	r1, [r7, #36]	; 0x24
 80184cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80184d0:	b2d2      	uxtb	r2, r2
 80184d2:	701a      	strb	r2, [r3, #0]
 80184d4:	6a3b      	ldr	r3, [r7, #32]
 80184d6:	09db      	lsrs	r3, r3, #7
 80184d8:	623b      	str	r3, [r7, #32]
 80184da:	6a3b      	ldr	r3, [r7, #32]
 80184dc:	2b7f      	cmp	r3, #127	; 0x7f
 80184de:	d8f0      	bhi.n	80184c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80184e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e2:	1c5a      	adds	r2, r3, #1
 80184e4:	627a      	str	r2, [r7, #36]	; 0x24
 80184e6:	6a3a      	ldr	r2, [r7, #32]
 80184e8:	b2d2      	uxtb	r2, r2
 80184ea:	701a      	strb	r2, [r3, #0]
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80184f0:	68fa      	ldr	r2, [r7, #12]
 80184f2:	6979      	ldr	r1, [r7, #20]
 80184f4:	69b8      	ldr	r0, [r7, #24]
 80184f6:	f7ff fdbd 	bl	8018074 <_SendPacket>
  RECORD_END();
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	f383 8811 	msr	BASEPRI, r3
}
 8018500:	bf00      	nop
 8018502:	3738      	adds	r7, #56	; 0x38
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}
 8018508:	2003ce94 	.word	0x2003ce94

0801850c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 801850c:	b580      	push	{r7, lr}
 801850e:	b090      	sub	sp, #64	; 0x40
 8018510:	af00      	add	r7, sp, #0
 8018512:	60f8      	str	r0, [r7, #12]
 8018514:	60b9      	str	r1, [r7, #8]
 8018516:	607a      	str	r2, [r7, #4]
 8018518:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801851a:	f3ef 8311 	mrs	r3, BASEPRI
 801851e:	f04f 0120 	mov.w	r1, #32
 8018522:	f381 8811 	msr	BASEPRI, r1
 8018526:	61fb      	str	r3, [r7, #28]
 8018528:	4840      	ldr	r0, [pc, #256]	; (801862c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 801852a:	f7ff fcc2 	bl	8017eb2 <_PreparePacket>
 801852e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018530:	69bb      	ldr	r3, [r7, #24]
 8018532:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018534:	697b      	ldr	r3, [r7, #20]
 8018536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	63bb      	str	r3, [r7, #56]	; 0x38
 801853c:	e00b      	b.n	8018556 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 801853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018540:	b2da      	uxtb	r2, r3
 8018542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018544:	1c59      	adds	r1, r3, #1
 8018546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8018548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801854c:	b2d2      	uxtb	r2, r2
 801854e:	701a      	strb	r2, [r3, #0]
 8018550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018552:	09db      	lsrs	r3, r3, #7
 8018554:	63bb      	str	r3, [r7, #56]	; 0x38
 8018556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018558:	2b7f      	cmp	r3, #127	; 0x7f
 801855a:	d8f0      	bhi.n	801853e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 801855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801855e:	1c5a      	adds	r2, r3, #1
 8018560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018564:	b2d2      	uxtb	r2, r2
 8018566:	701a      	strb	r2, [r3, #0]
 8018568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801856a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	637b      	str	r3, [r7, #52]	; 0x34
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	633b      	str	r3, [r7, #48]	; 0x30
 8018574:	e00b      	b.n	801858e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8018576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018578:	b2da      	uxtb	r2, r3
 801857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801857c:	1c59      	adds	r1, r3, #1
 801857e:	6379      	str	r1, [r7, #52]	; 0x34
 8018580:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018584:	b2d2      	uxtb	r2, r2
 8018586:	701a      	strb	r2, [r3, #0]
 8018588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858a:	09db      	lsrs	r3, r3, #7
 801858c:	633b      	str	r3, [r7, #48]	; 0x30
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	2b7f      	cmp	r3, #127	; 0x7f
 8018592:	d8f0      	bhi.n	8018576 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8018594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018596:	1c5a      	adds	r2, r3, #1
 8018598:	637a      	str	r2, [r7, #52]	; 0x34
 801859a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801859c:	b2d2      	uxtb	r2, r2
 801859e:	701a      	strb	r2, [r3, #0]
 80185a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80185ac:	e00b      	b.n	80185c6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80185ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b0:	b2da      	uxtb	r2, r3
 80185b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185b4:	1c59      	adds	r1, r3, #1
 80185b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80185b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80185bc:	b2d2      	uxtb	r2, r2
 80185be:	701a      	strb	r2, [r3, #0]
 80185c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c2:	09db      	lsrs	r3, r3, #7
 80185c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80185c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c8:	2b7f      	cmp	r3, #127	; 0x7f
 80185ca:	d8f0      	bhi.n	80185ae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80185cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ce:	1c5a      	adds	r2, r3, #1
 80185d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80185d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185d4:	b2d2      	uxtb	r2, r2
 80185d6:	701a      	strb	r2, [r3, #0]
 80185d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80185dc:	697b      	ldr	r3, [r7, #20]
 80185de:	627b      	str	r3, [r7, #36]	; 0x24
 80185e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185e2:	623b      	str	r3, [r7, #32]
 80185e4:	e00b      	b.n	80185fe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80185e6:	6a3b      	ldr	r3, [r7, #32]
 80185e8:	b2da      	uxtb	r2, r3
 80185ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ec:	1c59      	adds	r1, r3, #1
 80185ee:	6279      	str	r1, [r7, #36]	; 0x24
 80185f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80185f4:	b2d2      	uxtb	r2, r2
 80185f6:	701a      	strb	r2, [r3, #0]
 80185f8:	6a3b      	ldr	r3, [r7, #32]
 80185fa:	09db      	lsrs	r3, r3, #7
 80185fc:	623b      	str	r3, [r7, #32]
 80185fe:	6a3b      	ldr	r3, [r7, #32]
 8018600:	2b7f      	cmp	r3, #127	; 0x7f
 8018602:	d8f0      	bhi.n	80185e6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	1c5a      	adds	r2, r3, #1
 8018608:	627a      	str	r2, [r7, #36]	; 0x24
 801860a:	6a3a      	ldr	r2, [r7, #32]
 801860c:	b2d2      	uxtb	r2, r2
 801860e:	701a      	strb	r2, [r3, #0]
 8018610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018612:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018614:	68fa      	ldr	r2, [r7, #12]
 8018616:	6979      	ldr	r1, [r7, #20]
 8018618:	69b8      	ldr	r0, [r7, #24]
 801861a:	f7ff fd2b 	bl	8018074 <_SendPacket>
  RECORD_END();
 801861e:	69fb      	ldr	r3, [r7, #28]
 8018620:	f383 8811 	msr	BASEPRI, r3
}
 8018624:	bf00      	nop
 8018626:	3740      	adds	r7, #64	; 0x40
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}
 801862c:	2003ce94 	.word	0x2003ce94

08018630 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8018630:	b580      	push	{r7, lr}
 8018632:	b092      	sub	sp, #72	; 0x48
 8018634:	af00      	add	r7, sp, #0
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	60b9      	str	r1, [r7, #8]
 801863a:	607a      	str	r2, [r7, #4]
 801863c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 801863e:	f3ef 8311 	mrs	r3, BASEPRI
 8018642:	f04f 0120 	mov.w	r1, #32
 8018646:	f381 8811 	msr	BASEPRI, r1
 801864a:	61fb      	str	r3, [r7, #28]
 801864c:	484e      	ldr	r0, [pc, #312]	; (8018788 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 801864e:	f7ff fc30 	bl	8017eb2 <_PreparePacket>
 8018652:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018654:	69bb      	ldr	r3, [r7, #24]
 8018656:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	647b      	str	r3, [r7, #68]	; 0x44
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	643b      	str	r3, [r7, #64]	; 0x40
 8018660:	e00b      	b.n	801867a <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8018662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018664:	b2da      	uxtb	r2, r3
 8018666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018668:	1c59      	adds	r1, r3, #1
 801866a:	6479      	str	r1, [r7, #68]	; 0x44
 801866c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018670:	b2d2      	uxtb	r2, r2
 8018672:	701a      	strb	r2, [r3, #0]
 8018674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018676:	09db      	lsrs	r3, r3, #7
 8018678:	643b      	str	r3, [r7, #64]	; 0x40
 801867a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801867c:	2b7f      	cmp	r3, #127	; 0x7f
 801867e:	d8f0      	bhi.n	8018662 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8018680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018682:	1c5a      	adds	r2, r3, #1
 8018684:	647a      	str	r2, [r7, #68]	; 0x44
 8018686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018688:	b2d2      	uxtb	r2, r2
 801868a:	701a      	strb	r2, [r3, #0]
 801868c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801868e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	63bb      	str	r3, [r7, #56]	; 0x38
 8018698:	e00b      	b.n	80186b2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 801869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801869c:	b2da      	uxtb	r2, r3
 801869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186a0:	1c59      	adds	r1, r3, #1
 80186a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80186a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80186a8:	b2d2      	uxtb	r2, r2
 80186aa:	701a      	strb	r2, [r3, #0]
 80186ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ae:	09db      	lsrs	r3, r3, #7
 80186b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80186b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b4:	2b7f      	cmp	r3, #127	; 0x7f
 80186b6:	d8f0      	bhi.n	801869a <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80186b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186ba:	1c5a      	adds	r2, r3, #1
 80186bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80186be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186c0:	b2d2      	uxtb	r2, r2
 80186c2:	701a      	strb	r2, [r3, #0]
 80186c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80186c8:	697b      	ldr	r3, [r7, #20]
 80186ca:	637b      	str	r3, [r7, #52]	; 0x34
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	633b      	str	r3, [r7, #48]	; 0x30
 80186d0:	e00b      	b.n	80186ea <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80186d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d4:	b2da      	uxtb	r2, r3
 80186d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d8:	1c59      	adds	r1, r3, #1
 80186da:	6379      	str	r1, [r7, #52]	; 0x34
 80186dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80186e0:	b2d2      	uxtb	r2, r2
 80186e2:	701a      	strb	r2, [r3, #0]
 80186e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e6:	09db      	lsrs	r3, r3, #7
 80186e8:	633b      	str	r3, [r7, #48]	; 0x30
 80186ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ec:	2b7f      	cmp	r3, #127	; 0x7f
 80186ee:	d8f0      	bhi.n	80186d2 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80186f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f2:	1c5a      	adds	r2, r3, #1
 80186f4:	637a      	str	r2, [r7, #52]	; 0x34
 80186f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186f8:	b2d2      	uxtb	r2, r2
 80186fa:	701a      	strb	r2, [r3, #0]
 80186fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018706:	62bb      	str	r3, [r7, #40]	; 0x28
 8018708:	e00b      	b.n	8018722 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 801870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870c:	b2da      	uxtb	r2, r3
 801870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018710:	1c59      	adds	r1, r3, #1
 8018712:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018718:	b2d2      	uxtb	r2, r2
 801871a:	701a      	strb	r2, [r3, #0]
 801871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871e:	09db      	lsrs	r3, r3, #7
 8018720:	62bb      	str	r3, [r7, #40]	; 0x28
 8018722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018724:	2b7f      	cmp	r3, #127	; 0x7f
 8018726:	d8f0      	bhi.n	801870a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8018728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872a:	1c5a      	adds	r2, r3, #1
 801872c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801872e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018730:	b2d2      	uxtb	r2, r2
 8018732:	701a      	strb	r2, [r3, #0]
 8018734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018736:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	627b      	str	r3, [r7, #36]	; 0x24
 801873c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801873e:	623b      	str	r3, [r7, #32]
 8018740:	e00b      	b.n	801875a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8018742:	6a3b      	ldr	r3, [r7, #32]
 8018744:	b2da      	uxtb	r2, r3
 8018746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018748:	1c59      	adds	r1, r3, #1
 801874a:	6279      	str	r1, [r7, #36]	; 0x24
 801874c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018750:	b2d2      	uxtb	r2, r2
 8018752:	701a      	strb	r2, [r3, #0]
 8018754:	6a3b      	ldr	r3, [r7, #32]
 8018756:	09db      	lsrs	r3, r3, #7
 8018758:	623b      	str	r3, [r7, #32]
 801875a:	6a3b      	ldr	r3, [r7, #32]
 801875c:	2b7f      	cmp	r3, #127	; 0x7f
 801875e:	d8f0      	bhi.n	8018742 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8018760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018762:	1c5a      	adds	r2, r3, #1
 8018764:	627a      	str	r2, [r7, #36]	; 0x24
 8018766:	6a3a      	ldr	r2, [r7, #32]
 8018768:	b2d2      	uxtb	r2, r2
 801876a:	701a      	strb	r2, [r3, #0]
 801876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801876e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018770:	68fa      	ldr	r2, [r7, #12]
 8018772:	6979      	ldr	r1, [r7, #20]
 8018774:	69b8      	ldr	r0, [r7, #24]
 8018776:	f7ff fc7d 	bl	8018074 <_SendPacket>
  RECORD_END();
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	f383 8811 	msr	BASEPRI, r3
}
 8018780:	bf00      	nop
 8018782:	3748      	adds	r7, #72	; 0x48
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	2003ce94 	.word	0x2003ce94

0801878c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 801878c:	b580      	push	{r7, lr}
 801878e:	b08c      	sub	sp, #48	; 0x30
 8018790:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8018792:	4b59      	ldr	r3, [pc, #356]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	f040 80aa 	bne.w	80188f0 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 801879c:	4b56      	ldr	r3, [pc, #344]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 801879e:	2201      	movs	r2, #1
 80187a0:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80187a2:	f3ef 8311 	mrs	r3, BASEPRI
 80187a6:	f04f 0120 	mov.w	r1, #32
 80187aa:	f381 8811 	msr	BASEPRI, r1
 80187ae:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80187b0:	220a      	movs	r2, #10
 80187b2:	4952      	ldr	r1, [pc, #328]	; (80188fc <SEGGER_SYSVIEW_Start+0x170>)
 80187b4:	2001      	movs	r0, #1
 80187b6:	f7ff f9cb 	bl	8017b50 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80187c0:	200a      	movs	r0, #10
 80187c2:	f7ff fd79 	bl	80182b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80187c6:	f3ef 8311 	mrs	r3, BASEPRI
 80187ca:	f04f 0120 	mov.w	r1, #32
 80187ce:	f381 8811 	msr	BASEPRI, r1
 80187d2:	60bb      	str	r3, [r7, #8]
 80187d4:	484a      	ldr	r0, [pc, #296]	; (8018900 <SEGGER_SYSVIEW_Start+0x174>)
 80187d6:	f7ff fb6c 	bl	8017eb2 <_PreparePacket>
 80187da:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187e4:	4b44      	ldr	r3, [pc, #272]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80187ea:	e00b      	b.n	8018804 <SEGGER_SYSVIEW_Start+0x78>
 80187ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ee:	b2da      	uxtb	r2, r3
 80187f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f2:	1c59      	adds	r1, r3, #1
 80187f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80187f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80187fa:	b2d2      	uxtb	r2, r2
 80187fc:	701a      	strb	r2, [r3, #0]
 80187fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018800:	09db      	lsrs	r3, r3, #7
 8018802:	62bb      	str	r3, [r7, #40]	; 0x28
 8018804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018806:	2b7f      	cmp	r3, #127	; 0x7f
 8018808:	d8f0      	bhi.n	80187ec <SEGGER_SYSVIEW_Start+0x60>
 801880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880c:	1c5a      	adds	r2, r3, #1
 801880e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018812:	b2d2      	uxtb	r2, r2
 8018814:	701a      	strb	r2, [r3, #0]
 8018816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018818:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	627b      	str	r3, [r7, #36]	; 0x24
 801881e:	4b36      	ldr	r3, [pc, #216]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8018820:	689b      	ldr	r3, [r3, #8]
 8018822:	623b      	str	r3, [r7, #32]
 8018824:	e00b      	b.n	801883e <SEGGER_SYSVIEW_Start+0xb2>
 8018826:	6a3b      	ldr	r3, [r7, #32]
 8018828:	b2da      	uxtb	r2, r3
 801882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882c:	1c59      	adds	r1, r3, #1
 801882e:	6279      	str	r1, [r7, #36]	; 0x24
 8018830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018834:	b2d2      	uxtb	r2, r2
 8018836:	701a      	strb	r2, [r3, #0]
 8018838:	6a3b      	ldr	r3, [r7, #32]
 801883a:	09db      	lsrs	r3, r3, #7
 801883c:	623b      	str	r3, [r7, #32]
 801883e:	6a3b      	ldr	r3, [r7, #32]
 8018840:	2b7f      	cmp	r3, #127	; 0x7f
 8018842:	d8f0      	bhi.n	8018826 <SEGGER_SYSVIEW_Start+0x9a>
 8018844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	627a      	str	r2, [r7, #36]	; 0x24
 801884a:	6a3a      	ldr	r2, [r7, #32]
 801884c:	b2d2      	uxtb	r2, r2
 801884e:	701a      	strb	r2, [r3, #0]
 8018850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018852:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8018854:	683b      	ldr	r3, [r7, #0]
 8018856:	61fb      	str	r3, [r7, #28]
 8018858:	4b27      	ldr	r3, [pc, #156]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 801885a:	691b      	ldr	r3, [r3, #16]
 801885c:	61bb      	str	r3, [r7, #24]
 801885e:	e00b      	b.n	8018878 <SEGGER_SYSVIEW_Start+0xec>
 8018860:	69bb      	ldr	r3, [r7, #24]
 8018862:	b2da      	uxtb	r2, r3
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	1c59      	adds	r1, r3, #1
 8018868:	61f9      	str	r1, [r7, #28]
 801886a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801886e:	b2d2      	uxtb	r2, r2
 8018870:	701a      	strb	r2, [r3, #0]
 8018872:	69bb      	ldr	r3, [r7, #24]
 8018874:	09db      	lsrs	r3, r3, #7
 8018876:	61bb      	str	r3, [r7, #24]
 8018878:	69bb      	ldr	r3, [r7, #24]
 801887a:	2b7f      	cmp	r3, #127	; 0x7f
 801887c:	d8f0      	bhi.n	8018860 <SEGGER_SYSVIEW_Start+0xd4>
 801887e:	69fb      	ldr	r3, [r7, #28]
 8018880:	1c5a      	adds	r2, r3, #1
 8018882:	61fa      	str	r2, [r7, #28]
 8018884:	69ba      	ldr	r2, [r7, #24]
 8018886:	b2d2      	uxtb	r2, r2
 8018888:	701a      	strb	r2, [r3, #0]
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	617b      	str	r3, [r7, #20]
 8018892:	2302      	movs	r3, #2
 8018894:	613b      	str	r3, [r7, #16]
 8018896:	e00b      	b.n	80188b0 <SEGGER_SYSVIEW_Start+0x124>
 8018898:	693b      	ldr	r3, [r7, #16]
 801889a:	b2da      	uxtb	r2, r3
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	1c59      	adds	r1, r3, #1
 80188a0:	6179      	str	r1, [r7, #20]
 80188a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80188a6:	b2d2      	uxtb	r2, r2
 80188a8:	701a      	strb	r2, [r3, #0]
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	09db      	lsrs	r3, r3, #7
 80188ae:	613b      	str	r3, [r7, #16]
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	2b7f      	cmp	r3, #127	; 0x7f
 80188b4:	d8f0      	bhi.n	8018898 <SEGGER_SYSVIEW_Start+0x10c>
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	1c5a      	adds	r2, r3, #1
 80188ba:	617a      	str	r2, [r7, #20]
 80188bc:	693a      	ldr	r2, [r7, #16]
 80188be:	b2d2      	uxtb	r2, r2
 80188c0:	701a      	strb	r2, [r3, #0]
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80188c6:	2218      	movs	r2, #24
 80188c8:	6839      	ldr	r1, [r7, #0]
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f7ff fbd2 	bl	8018074 <_SendPacket>
      RECORD_END();
 80188d0:	68bb      	ldr	r3, [r7, #8]
 80188d2:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80188d6:	4b08      	ldr	r3, [pc, #32]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80188d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d002      	beq.n	80188e4 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80188de:	4b06      	ldr	r3, [pc, #24]	; (80188f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80188e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188e2:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80188e4:	f000 f9ec 	bl	8018cc0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80188e8:	f000 f9b2 	bl	8018c50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80188ec:	f000 fbb2 	bl	8019054 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80188f0:	bf00      	nop
 80188f2:	3730      	adds	r7, #48	; 0x30
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}
 80188f8:	2003ce64 	.word	0x2003ce64
 80188fc:	0801ac84 	.word	0x0801ac84
 8018900:	2003ce94 	.word	0x2003ce94

08018904 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8018904:	b580      	push	{r7, lr}
 8018906:	b082      	sub	sp, #8
 8018908:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801890a:	f3ef 8311 	mrs	r3, BASEPRI
 801890e:	f04f 0120 	mov.w	r1, #32
 8018912:	f381 8811 	msr	BASEPRI, r1
 8018916:	607b      	str	r3, [r7, #4]
 8018918:	480b      	ldr	r0, [pc, #44]	; (8018948 <SEGGER_SYSVIEW_Stop+0x44>)
 801891a:	f7ff faca 	bl	8017eb2 <_PreparePacket>
 801891e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8018920:	4b0a      	ldr	r3, [pc, #40]	; (801894c <SEGGER_SYSVIEW_Stop+0x48>)
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d007      	beq.n	8018938 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8018928:	220b      	movs	r2, #11
 801892a:	6839      	ldr	r1, [r7, #0]
 801892c:	6838      	ldr	r0, [r7, #0]
 801892e:	f7ff fba1 	bl	8018074 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8018932:	4b06      	ldr	r3, [pc, #24]	; (801894c <SEGGER_SYSVIEW_Stop+0x48>)
 8018934:	2200      	movs	r2, #0
 8018936:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f383 8811 	msr	BASEPRI, r3
}
 801893e:	bf00      	nop
 8018940:	3708      	adds	r7, #8
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	2003ce94 	.word	0x2003ce94
 801894c:	2003ce64 	.word	0x2003ce64

08018950 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8018950:	b580      	push	{r7, lr}
 8018952:	b08c      	sub	sp, #48	; 0x30
 8018954:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8018956:	f3ef 8311 	mrs	r3, BASEPRI
 801895a:	f04f 0120 	mov.w	r1, #32
 801895e:	f381 8811 	msr	BASEPRI, r1
 8018962:	60fb      	str	r3, [r7, #12]
 8018964:	4845      	ldr	r0, [pc, #276]	; (8018a7c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8018966:	f7ff faa4 	bl	8017eb2 <_PreparePacket>
 801896a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018974:	4b42      	ldr	r3, [pc, #264]	; (8018a80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8018976:	685b      	ldr	r3, [r3, #4]
 8018978:	62bb      	str	r3, [r7, #40]	; 0x28
 801897a:	e00b      	b.n	8018994 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 801897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801897e:	b2da      	uxtb	r2, r3
 8018980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018982:	1c59      	adds	r1, r3, #1
 8018984:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801898a:	b2d2      	uxtb	r2, r2
 801898c:	701a      	strb	r2, [r3, #0]
 801898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018990:	09db      	lsrs	r3, r3, #7
 8018992:	62bb      	str	r3, [r7, #40]	; 0x28
 8018994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018996:	2b7f      	cmp	r3, #127	; 0x7f
 8018998:	d8f0      	bhi.n	801897c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 801899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801899c:	1c5a      	adds	r2, r3, #1
 801899e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80189a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189a2:	b2d2      	uxtb	r2, r2
 80189a4:	701a      	strb	r2, [r3, #0]
 80189a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	627b      	str	r3, [r7, #36]	; 0x24
 80189ae:	4b34      	ldr	r3, [pc, #208]	; (8018a80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80189b0:	689b      	ldr	r3, [r3, #8]
 80189b2:	623b      	str	r3, [r7, #32]
 80189b4:	e00b      	b.n	80189ce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80189b6:	6a3b      	ldr	r3, [r7, #32]
 80189b8:	b2da      	uxtb	r2, r3
 80189ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189bc:	1c59      	adds	r1, r3, #1
 80189be:	6279      	str	r1, [r7, #36]	; 0x24
 80189c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80189c4:	b2d2      	uxtb	r2, r2
 80189c6:	701a      	strb	r2, [r3, #0]
 80189c8:	6a3b      	ldr	r3, [r7, #32]
 80189ca:	09db      	lsrs	r3, r3, #7
 80189cc:	623b      	str	r3, [r7, #32]
 80189ce:	6a3b      	ldr	r3, [r7, #32]
 80189d0:	2b7f      	cmp	r3, #127	; 0x7f
 80189d2:	d8f0      	bhi.n	80189b6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80189d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d6:	1c5a      	adds	r2, r3, #1
 80189d8:	627a      	str	r2, [r7, #36]	; 0x24
 80189da:	6a3a      	ldr	r2, [r7, #32]
 80189dc:	b2d2      	uxtb	r2, r2
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	61fb      	str	r3, [r7, #28]
 80189e8:	4b25      	ldr	r3, [pc, #148]	; (8018a80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80189ea:	691b      	ldr	r3, [r3, #16]
 80189ec:	61bb      	str	r3, [r7, #24]
 80189ee:	e00b      	b.n	8018a08 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80189f0:	69bb      	ldr	r3, [r7, #24]
 80189f2:	b2da      	uxtb	r2, r3
 80189f4:	69fb      	ldr	r3, [r7, #28]
 80189f6:	1c59      	adds	r1, r3, #1
 80189f8:	61f9      	str	r1, [r7, #28]
 80189fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80189fe:	b2d2      	uxtb	r2, r2
 8018a00:	701a      	strb	r2, [r3, #0]
 8018a02:	69bb      	ldr	r3, [r7, #24]
 8018a04:	09db      	lsrs	r3, r3, #7
 8018a06:	61bb      	str	r3, [r7, #24]
 8018a08:	69bb      	ldr	r3, [r7, #24]
 8018a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8018a0c:	d8f0      	bhi.n	80189f0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8018a0e:	69fb      	ldr	r3, [r7, #28]
 8018a10:	1c5a      	adds	r2, r3, #1
 8018a12:	61fa      	str	r2, [r7, #28]
 8018a14:	69ba      	ldr	r2, [r7, #24]
 8018a16:	b2d2      	uxtb	r2, r2
 8018a18:	701a      	strb	r2, [r3, #0]
 8018a1a:	69fb      	ldr	r3, [r7, #28]
 8018a1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	617b      	str	r3, [r7, #20]
 8018a22:	2302      	movs	r3, #2
 8018a24:	613b      	str	r3, [r7, #16]
 8018a26:	e00b      	b.n	8018a40 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	b2da      	uxtb	r2, r3
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	1c59      	adds	r1, r3, #1
 8018a30:	6179      	str	r1, [r7, #20]
 8018a32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018a36:	b2d2      	uxtb	r2, r2
 8018a38:	701a      	strb	r2, [r3, #0]
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	09db      	lsrs	r3, r3, #7
 8018a3e:	613b      	str	r3, [r7, #16]
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	2b7f      	cmp	r3, #127	; 0x7f
 8018a44:	d8f0      	bhi.n	8018a28 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	1c5a      	adds	r2, r3, #1
 8018a4a:	617a      	str	r2, [r7, #20]
 8018a4c:	693a      	ldr	r2, [r7, #16]
 8018a4e:	b2d2      	uxtb	r2, r2
 8018a50:	701a      	strb	r2, [r3, #0]
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8018a56:	2218      	movs	r2, #24
 8018a58:	6879      	ldr	r1, [r7, #4]
 8018a5a:	68b8      	ldr	r0, [r7, #8]
 8018a5c:	f7ff fb0a 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8018a66:	4b06      	ldr	r3, [pc, #24]	; (8018a80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8018a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d002      	beq.n	8018a74 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8018a6e:	4b04      	ldr	r3, [pc, #16]	; (8018a80 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8018a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a72:	4798      	blx	r3
  }
}
 8018a74:	bf00      	nop
 8018a76:	3730      	adds	r7, #48	; 0x30
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}
 8018a7c:	2003ce94 	.word	0x2003ce94
 8018a80:	2003ce64 	.word	0x2003ce64

08018a84 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b092      	sub	sp, #72	; 0x48
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8018a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8018a90:	f04f 0120 	mov.w	r1, #32
 8018a94:	f381 8811 	msr	BASEPRI, r1
 8018a98:	617b      	str	r3, [r7, #20]
 8018a9a:	486b      	ldr	r0, [pc, #428]	; (8018c48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8018a9c:	f7ff fa09 	bl	8017eb2 <_PreparePacket>
 8018aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	4b67      	ldr	r3, [pc, #412]	; (8018c4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8018ab0:	691b      	ldr	r3, [r3, #16]
 8018ab2:	1ad3      	subs	r3, r2, r3
 8018ab4:	089b      	lsrs	r3, r3, #2
 8018ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8018ab8:	e00b      	b.n	8018ad2 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8018aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018abc:	b2da      	uxtb	r2, r3
 8018abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ac0:	1c59      	adds	r1, r3, #1
 8018ac2:	6479      	str	r1, [r7, #68]	; 0x44
 8018ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018ac8:	b2d2      	uxtb	r2, r2
 8018aca:	701a      	strb	r2, [r3, #0]
 8018acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ace:	09db      	lsrs	r3, r3, #7
 8018ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8018ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8018ad6:	d8f0      	bhi.n	8018aba <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8018ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ada:	1c5a      	adds	r2, r3, #1
 8018adc:	647a      	str	r2, [r7, #68]	; 0x44
 8018ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018ae0:	b2d2      	uxtb	r2, r2
 8018ae2:	701a      	strb	r2, [r3, #0]
 8018ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ae6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	689b      	ldr	r3, [r3, #8]
 8018af0:	63bb      	str	r3, [r7, #56]	; 0x38
 8018af2:	e00b      	b.n	8018b0c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8018af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af6:	b2da      	uxtb	r2, r3
 8018af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018afa:	1c59      	adds	r1, r3, #1
 8018afc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8018afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018b02:	b2d2      	uxtb	r2, r2
 8018b04:	701a      	strb	r2, [r3, #0]
 8018b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b08:	09db      	lsrs	r3, r3, #7
 8018b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8018b10:	d8f0      	bhi.n	8018af4 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8018b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b14:	1c5a      	adds	r2, r3, #1
 8018b16:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018b1a:	b2d2      	uxtb	r2, r2
 8018b1c:	701a      	strb	r2, [r3, #0]
 8018b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b20:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	2220      	movs	r2, #32
 8018b28:	4619      	mov	r1, r3
 8018b2a:	68f8      	ldr	r0, [r7, #12]
 8018b2c:	f7ff f974 	bl	8017e18 <_EncodeStr>
 8018b30:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8018b32:	2209      	movs	r2, #9
 8018b34:	68f9      	ldr	r1, [r7, #12]
 8018b36:	6938      	ldr	r0, [r7, #16]
 8018b38:	f7ff fa9c 	bl	8018074 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8018b3c:	693b      	ldr	r3, [r7, #16]
 8018b3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	637b      	str	r3, [r7, #52]	; 0x34
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681a      	ldr	r2, [r3, #0]
 8018b48:	4b40      	ldr	r3, [pc, #256]	; (8018c4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8018b4a:	691b      	ldr	r3, [r3, #16]
 8018b4c:	1ad3      	subs	r3, r2, r3
 8018b4e:	089b      	lsrs	r3, r3, #2
 8018b50:	633b      	str	r3, [r7, #48]	; 0x30
 8018b52:	e00b      	b.n	8018b6c <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8018b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b56:	b2da      	uxtb	r2, r3
 8018b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b5a:	1c59      	adds	r1, r3, #1
 8018b5c:	6379      	str	r1, [r7, #52]	; 0x34
 8018b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018b62:	b2d2      	uxtb	r2, r2
 8018b64:	701a      	strb	r2, [r3, #0]
 8018b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b68:	09db      	lsrs	r3, r3, #7
 8018b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8018b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8018b70:	d8f0      	bhi.n	8018b54 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8018b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b74:	1c5a      	adds	r2, r3, #1
 8018b76:	637a      	str	r2, [r7, #52]	; 0x34
 8018b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b7a:	b2d2      	uxtb	r2, r2
 8018b7c:	701a      	strb	r2, [r3, #0]
 8018b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	68db      	ldr	r3, [r3, #12]
 8018b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b8c:	e00b      	b.n	8018ba6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8018b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b90:	b2da      	uxtb	r2, r3
 8018b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b94:	1c59      	adds	r1, r3, #1
 8018b96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018b9c:	b2d2      	uxtb	r2, r2
 8018b9e:	701a      	strb	r2, [r3, #0]
 8018ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba2:	09db      	lsrs	r3, r3, #7
 8018ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8018baa:	d8f0      	bhi.n	8018b8e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8018bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bae:	1c5a      	adds	r2, r3, #1
 8018bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bb4:	b2d2      	uxtb	r2, r2
 8018bb6:	701a      	strb	r2, [r3, #0]
 8018bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	691b      	ldr	r3, [r3, #16]
 8018bc4:	623b      	str	r3, [r7, #32]
 8018bc6:	e00b      	b.n	8018be0 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8018bc8:	6a3b      	ldr	r3, [r7, #32]
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bce:	1c59      	adds	r1, r3, #1
 8018bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8018bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018bd6:	b2d2      	uxtb	r2, r2
 8018bd8:	701a      	strb	r2, [r3, #0]
 8018bda:	6a3b      	ldr	r3, [r7, #32]
 8018bdc:	09db      	lsrs	r3, r3, #7
 8018bde:	623b      	str	r3, [r7, #32]
 8018be0:	6a3b      	ldr	r3, [r7, #32]
 8018be2:	2b7f      	cmp	r3, #127	; 0x7f
 8018be4:	d8f0      	bhi.n	8018bc8 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8018be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be8:	1c5a      	adds	r2, r3, #1
 8018bea:	627a      	str	r2, [r7, #36]	; 0x24
 8018bec:	6a3a      	ldr	r2, [r7, #32]
 8018bee:	b2d2      	uxtb	r2, r2
 8018bf0:	701a      	strb	r2, [r3, #0]
 8018bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	61fb      	str	r3, [r7, #28]
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	61bb      	str	r3, [r7, #24]
 8018bfe:	e00b      	b.n	8018c18 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8018c00:	69bb      	ldr	r3, [r7, #24]
 8018c02:	b2da      	uxtb	r2, r3
 8018c04:	69fb      	ldr	r3, [r7, #28]
 8018c06:	1c59      	adds	r1, r3, #1
 8018c08:	61f9      	str	r1, [r7, #28]
 8018c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018c0e:	b2d2      	uxtb	r2, r2
 8018c10:	701a      	strb	r2, [r3, #0]
 8018c12:	69bb      	ldr	r3, [r7, #24]
 8018c14:	09db      	lsrs	r3, r3, #7
 8018c16:	61bb      	str	r3, [r7, #24]
 8018c18:	69bb      	ldr	r3, [r7, #24]
 8018c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8018c1c:	d8f0      	bhi.n	8018c00 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	1c5a      	adds	r2, r3, #1
 8018c22:	61fa      	str	r2, [r7, #28]
 8018c24:	69ba      	ldr	r2, [r7, #24]
 8018c26:	b2d2      	uxtb	r2, r2
 8018c28:	701a      	strb	r2, [r3, #0]
 8018c2a:	69fb      	ldr	r3, [r7, #28]
 8018c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8018c2e:	2215      	movs	r2, #21
 8018c30:	68f9      	ldr	r1, [r7, #12]
 8018c32:	6938      	ldr	r0, [r7, #16]
 8018c34:	f7ff fa1e 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018c38:	697b      	ldr	r3, [r7, #20]
 8018c3a:	f383 8811 	msr	BASEPRI, r3
}
 8018c3e:	bf00      	nop
 8018c40:	3748      	adds	r7, #72	; 0x48
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	2003ce94 	.word	0x2003ce94
 8018c4c:	2003ce64 	.word	0x2003ce64

08018c50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8018c50:	b580      	push	{r7, lr}
 8018c52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8018c54:	4b07      	ldr	r3, [pc, #28]	; (8018c74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8018c56:	6a1b      	ldr	r3, [r3, #32]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d008      	beq.n	8018c6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8018c5c:	4b05      	ldr	r3, [pc, #20]	; (8018c74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8018c5e:	6a1b      	ldr	r3, [r3, #32]
 8018c60:	685b      	ldr	r3, [r3, #4]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d003      	beq.n	8018c6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8018c66:	4b03      	ldr	r3, [pc, #12]	; (8018c74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8018c68:	6a1b      	ldr	r3, [r3, #32]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	4798      	blx	r3
  }
}
 8018c6e:	bf00      	nop
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	2003ce64 	.word	0x2003ce64

08018c78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b086      	sub	sp, #24
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8018c80:	f3ef 8311 	mrs	r3, BASEPRI
 8018c84:	f04f 0120 	mov.w	r1, #32
 8018c88:	f381 8811 	msr	BASEPRI, r1
 8018c8c:	617b      	str	r3, [r7, #20]
 8018c8e:	480b      	ldr	r0, [pc, #44]	; (8018cbc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8018c90:	f7ff f90f 	bl	8017eb2 <_PreparePacket>
 8018c94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8018c96:	2280      	movs	r2, #128	; 0x80
 8018c98:	6879      	ldr	r1, [r7, #4]
 8018c9a:	6938      	ldr	r0, [r7, #16]
 8018c9c:	f7ff f8bc 	bl	8017e18 <_EncodeStr>
 8018ca0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8018ca2:	220e      	movs	r2, #14
 8018ca4:	68f9      	ldr	r1, [r7, #12]
 8018ca6:	6938      	ldr	r0, [r7, #16]
 8018ca8:	f7ff f9e4 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	f383 8811 	msr	BASEPRI, r3
}
 8018cb2:	bf00      	nop
 8018cb4:	3718      	adds	r7, #24
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	2003ce94 	.word	0x2003ce94

08018cc0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8018cc0:	b590      	push	{r4, r7, lr}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8018cc6:	4b15      	ldr	r3, [pc, #84]	; (8018d1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8018cc8:	6a1b      	ldr	r3, [r3, #32]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d01a      	beq.n	8018d04 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8018cce:	4b13      	ldr	r3, [pc, #76]	; (8018d1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8018cd0:	6a1b      	ldr	r3, [r3, #32]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d015      	beq.n	8018d04 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8018cd8:	4b10      	ldr	r3, [pc, #64]	; (8018d1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8018cda:	6a1b      	ldr	r3, [r3, #32]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	4798      	blx	r3
 8018ce0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8018ce4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8018ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018cea:	f04f 0200 	mov.w	r2, #0
 8018cee:	f04f 0300 	mov.w	r3, #0
 8018cf2:	000a      	movs	r2, r1
 8018cf4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	461a      	mov	r2, r3
 8018cfa:	4621      	mov	r1, r4
 8018cfc:	200d      	movs	r0, #13
 8018cfe:	f7ff fb35 	bl	801836c <SEGGER_SYSVIEW_RecordU32x2>
 8018d02:	e006      	b.n	8018d12 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8018d04:	4b06      	ldr	r3, [pc, #24]	; (8018d20 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	4619      	mov	r1, r3
 8018d0a:	200c      	movs	r0, #12
 8018d0c:	f7ff faf2 	bl	80182f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8018d10:	bf00      	nop
 8018d12:	bf00      	nop
 8018d14:	370c      	adds	r7, #12
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bd90      	pop	{r4, r7, pc}
 8018d1a:	bf00      	nop
 8018d1c:	2003ce64 	.word	0x2003ce64
 8018d20:	e0001004 	.word	0xe0001004

08018d24 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8018d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8018d2e:	f04f 0120 	mov.w	r1, #32
 8018d32:	f381 8811 	msr	BASEPRI, r1
 8018d36:	607b      	str	r3, [r7, #4]
 8018d38:	4807      	ldr	r0, [pc, #28]	; (8018d58 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8018d3a:	f7ff f8ba 	bl	8017eb2 <_PreparePacket>
 8018d3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8018d40:	2211      	movs	r2, #17
 8018d42:	6839      	ldr	r1, [r7, #0]
 8018d44:	6838      	ldr	r0, [r7, #0]
 8018d46:	f7ff f995 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f383 8811 	msr	BASEPRI, r3
}
 8018d50:	bf00      	nop
 8018d52:	3708      	adds	r7, #8
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	2003ce94 	.word	0x2003ce94

08018d5c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b088      	sub	sp, #32
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8018d64:	f3ef 8311 	mrs	r3, BASEPRI
 8018d68:	f04f 0120 	mov.w	r1, #32
 8018d6c:	f381 8811 	msr	BASEPRI, r1
 8018d70:	617b      	str	r3, [r7, #20]
 8018d72:	481a      	ldr	r0, [pc, #104]	; (8018ddc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8018d74:	f7ff f89d 	bl	8017eb2 <_PreparePacket>
 8018d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018d7a:	693b      	ldr	r3, [r7, #16]
 8018d7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8018d7e:	4b18      	ldr	r3, [pc, #96]	; (8018de0 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8018d80:	691b      	ldr	r3, [r3, #16]
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	1ad3      	subs	r3, r2, r3
 8018d86:	089b      	lsrs	r3, r3, #2
 8018d88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	61fb      	str	r3, [r7, #28]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	61bb      	str	r3, [r7, #24]
 8018d92:	e00b      	b.n	8018dac <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8018d94:	69bb      	ldr	r3, [r7, #24]
 8018d96:	b2da      	uxtb	r2, r3
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	1c59      	adds	r1, r3, #1
 8018d9c:	61f9      	str	r1, [r7, #28]
 8018d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018da2:	b2d2      	uxtb	r2, r2
 8018da4:	701a      	strb	r2, [r3, #0]
 8018da6:	69bb      	ldr	r3, [r7, #24]
 8018da8:	09db      	lsrs	r3, r3, #7
 8018daa:	61bb      	str	r3, [r7, #24]
 8018dac:	69bb      	ldr	r3, [r7, #24]
 8018dae:	2b7f      	cmp	r3, #127	; 0x7f
 8018db0:	d8f0      	bhi.n	8018d94 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8018db2:	69fb      	ldr	r3, [r7, #28]
 8018db4:	1c5a      	adds	r2, r3, #1
 8018db6:	61fa      	str	r2, [r7, #28]
 8018db8:	69ba      	ldr	r2, [r7, #24]
 8018dba:	b2d2      	uxtb	r2, r2
 8018dbc:	701a      	strb	r2, [r3, #0]
 8018dbe:	69fb      	ldr	r3, [r7, #28]
 8018dc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8018dc2:	2208      	movs	r2, #8
 8018dc4:	68f9      	ldr	r1, [r7, #12]
 8018dc6:	6938      	ldr	r0, [r7, #16]
 8018dc8:	f7ff f954 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	f383 8811 	msr	BASEPRI, r3
}
 8018dd2:	bf00      	nop
 8018dd4:	3720      	adds	r7, #32
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	2003ce94 	.word	0x2003ce94
 8018de0:	2003ce64 	.word	0x2003ce64

08018de4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b088      	sub	sp, #32
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8018dec:	f3ef 8311 	mrs	r3, BASEPRI
 8018df0:	f04f 0120 	mov.w	r1, #32
 8018df4:	f381 8811 	msr	BASEPRI, r1
 8018df8:	617b      	str	r3, [r7, #20]
 8018dfa:	481a      	ldr	r0, [pc, #104]	; (8018e64 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8018dfc:	f7ff f859 	bl	8017eb2 <_PreparePacket>
 8018e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8018e06:	4b18      	ldr	r3, [pc, #96]	; (8018e68 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8018e08:	691b      	ldr	r3, [r3, #16]
 8018e0a:	687a      	ldr	r2, [r7, #4]
 8018e0c:	1ad3      	subs	r3, r2, r3
 8018e0e:	089b      	lsrs	r3, r3, #2
 8018e10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	61fb      	str	r3, [r7, #28]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	61bb      	str	r3, [r7, #24]
 8018e1a:	e00b      	b.n	8018e34 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	b2da      	uxtb	r2, r3
 8018e20:	69fb      	ldr	r3, [r7, #28]
 8018e22:	1c59      	adds	r1, r3, #1
 8018e24:	61f9      	str	r1, [r7, #28]
 8018e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018e2a:	b2d2      	uxtb	r2, r2
 8018e2c:	701a      	strb	r2, [r3, #0]
 8018e2e:	69bb      	ldr	r3, [r7, #24]
 8018e30:	09db      	lsrs	r3, r3, #7
 8018e32:	61bb      	str	r3, [r7, #24]
 8018e34:	69bb      	ldr	r3, [r7, #24]
 8018e36:	2b7f      	cmp	r3, #127	; 0x7f
 8018e38:	d8f0      	bhi.n	8018e1c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8018e3a:	69fb      	ldr	r3, [r7, #28]
 8018e3c:	1c5a      	adds	r2, r3, #1
 8018e3e:	61fa      	str	r2, [r7, #28]
 8018e40:	69ba      	ldr	r2, [r7, #24]
 8018e42:	b2d2      	uxtb	r2, r2
 8018e44:	701a      	strb	r2, [r3, #0]
 8018e46:	69fb      	ldr	r3, [r7, #28]
 8018e48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8018e4a:	2204      	movs	r2, #4
 8018e4c:	68f9      	ldr	r1, [r7, #12]
 8018e4e:	6938      	ldr	r0, [r7, #16]
 8018e50:	f7ff f910 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	f383 8811 	msr	BASEPRI, r3
}
 8018e5a:	bf00      	nop
 8018e5c:	3720      	adds	r7, #32
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop
 8018e64:	2003ce94 	.word	0x2003ce94
 8018e68:	2003ce64 	.word	0x2003ce64

08018e6c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b088      	sub	sp, #32
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8018e74:	f3ef 8311 	mrs	r3, BASEPRI
 8018e78:	f04f 0120 	mov.w	r1, #32
 8018e7c:	f381 8811 	msr	BASEPRI, r1
 8018e80:	617b      	str	r3, [r7, #20]
 8018e82:	481a      	ldr	r0, [pc, #104]	; (8018eec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8018e84:	f7ff f815 	bl	8017eb2 <_PreparePacket>
 8018e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8018e8e:	4b18      	ldr	r3, [pc, #96]	; (8018ef0 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8018e90:	691b      	ldr	r3, [r3, #16]
 8018e92:	687a      	ldr	r2, [r7, #4]
 8018e94:	1ad3      	subs	r3, r2, r3
 8018e96:	089b      	lsrs	r3, r3, #2
 8018e98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	61fb      	str	r3, [r7, #28]
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	61bb      	str	r3, [r7, #24]
 8018ea2:	e00b      	b.n	8018ebc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8018ea4:	69bb      	ldr	r3, [r7, #24]
 8018ea6:	b2da      	uxtb	r2, r3
 8018ea8:	69fb      	ldr	r3, [r7, #28]
 8018eaa:	1c59      	adds	r1, r3, #1
 8018eac:	61f9      	str	r1, [r7, #28]
 8018eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018eb2:	b2d2      	uxtb	r2, r2
 8018eb4:	701a      	strb	r2, [r3, #0]
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	09db      	lsrs	r3, r3, #7
 8018eba:	61bb      	str	r3, [r7, #24]
 8018ebc:	69bb      	ldr	r3, [r7, #24]
 8018ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8018ec0:	d8f0      	bhi.n	8018ea4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8018ec2:	69fb      	ldr	r3, [r7, #28]
 8018ec4:	1c5a      	adds	r2, r3, #1
 8018ec6:	61fa      	str	r2, [r7, #28]
 8018ec8:	69ba      	ldr	r2, [r7, #24]
 8018eca:	b2d2      	uxtb	r2, r2
 8018ecc:	701a      	strb	r2, [r3, #0]
 8018ece:	69fb      	ldr	r3, [r7, #28]
 8018ed0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8018ed2:	2206      	movs	r2, #6
 8018ed4:	68f9      	ldr	r1, [r7, #12]
 8018ed6:	6938      	ldr	r0, [r7, #16]
 8018ed8:	f7ff f8cc 	bl	8018074 <_SendPacket>
  RECORD_END();
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	f383 8811 	msr	BASEPRI, r3
}
 8018ee2:	bf00      	nop
 8018ee4:	3720      	adds	r7, #32
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}
 8018eea:	bf00      	nop
 8018eec:	2003ce94 	.word	0x2003ce94
 8018ef0:	2003ce64 	.word	0x2003ce64

08018ef4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8018ef4:	b480      	push	{r7}
 8018ef6:	b083      	sub	sp, #12
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8018efc:	4b05      	ldr	r3, [pc, #20]	; (8018f14 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8018efe:	691b      	ldr	r3, [r3, #16]
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	1ad3      	subs	r3, r2, r3
 8018f04:	089b      	lsrs	r3, r3, #2
}
 8018f06:	4618      	mov	r0, r3
 8018f08:	370c      	adds	r7, #12
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f10:	4770      	bx	lr
 8018f12:	bf00      	nop
 8018f14:	2003ce64 	.word	0x2003ce64

08018f18 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b08c      	sub	sp, #48	; 0x30
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	4603      	mov	r3, r0
 8018f20:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8018f22:	4b3b      	ldr	r3, [pc, #236]	; (8019010 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d06d      	beq.n	8019006 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8018f2a:	4b39      	ldr	r3, [pc, #228]	; (8019010 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8018f30:	2300      	movs	r3, #0
 8018f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f34:	e008      	b.n	8018f48 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8018f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f38:	691b      	ldr	r3, [r3, #16]
 8018f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8018f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d007      	beq.n	8018f52 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8018f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f44:	3301      	adds	r3, #1
 8018f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f48:	79fb      	ldrb	r3, [r7, #7]
 8018f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d3f2      	bcc.n	8018f36 <SEGGER_SYSVIEW_SendModule+0x1e>
 8018f50:	e000      	b.n	8018f54 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8018f52:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8018f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d055      	beq.n	8019006 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8018f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8018f5e:	f04f 0120 	mov.w	r1, #32
 8018f62:	f381 8811 	msr	BASEPRI, r1
 8018f66:	617b      	str	r3, [r7, #20]
 8018f68:	482a      	ldr	r0, [pc, #168]	; (8019014 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8018f6a:	f7fe ffa2 	bl	8017eb2 <_PreparePacket>
 8018f6e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8018f70:	693b      	ldr	r3, [r7, #16]
 8018f72:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	627b      	str	r3, [r7, #36]	; 0x24
 8018f78:	79fb      	ldrb	r3, [r7, #7]
 8018f7a:	623b      	str	r3, [r7, #32]
 8018f7c:	e00b      	b.n	8018f96 <SEGGER_SYSVIEW_SendModule+0x7e>
 8018f7e:	6a3b      	ldr	r3, [r7, #32]
 8018f80:	b2da      	uxtb	r2, r3
 8018f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f84:	1c59      	adds	r1, r3, #1
 8018f86:	6279      	str	r1, [r7, #36]	; 0x24
 8018f88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018f8c:	b2d2      	uxtb	r2, r2
 8018f8e:	701a      	strb	r2, [r3, #0]
 8018f90:	6a3b      	ldr	r3, [r7, #32]
 8018f92:	09db      	lsrs	r3, r3, #7
 8018f94:	623b      	str	r3, [r7, #32]
 8018f96:	6a3b      	ldr	r3, [r7, #32]
 8018f98:	2b7f      	cmp	r3, #127	; 0x7f
 8018f9a:	d8f0      	bhi.n	8018f7e <SEGGER_SYSVIEW_SendModule+0x66>
 8018f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f9e:	1c5a      	adds	r2, r3, #1
 8018fa0:	627a      	str	r2, [r7, #36]	; 0x24
 8018fa2:	6a3a      	ldr	r2, [r7, #32]
 8018fa4:	b2d2      	uxtb	r2, r2
 8018fa6:	701a      	strb	r2, [r3, #0]
 8018fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018faa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	61fb      	str	r3, [r7, #28]
 8018fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb2:	689b      	ldr	r3, [r3, #8]
 8018fb4:	61bb      	str	r3, [r7, #24]
 8018fb6:	e00b      	b.n	8018fd0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	b2da      	uxtb	r2, r3
 8018fbc:	69fb      	ldr	r3, [r7, #28]
 8018fbe:	1c59      	adds	r1, r3, #1
 8018fc0:	61f9      	str	r1, [r7, #28]
 8018fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018fc6:	b2d2      	uxtb	r2, r2
 8018fc8:	701a      	strb	r2, [r3, #0]
 8018fca:	69bb      	ldr	r3, [r7, #24]
 8018fcc:	09db      	lsrs	r3, r3, #7
 8018fce:	61bb      	str	r3, [r7, #24]
 8018fd0:	69bb      	ldr	r3, [r7, #24]
 8018fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8018fd4:	d8f0      	bhi.n	8018fb8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	1c5a      	adds	r2, r3, #1
 8018fda:	61fa      	str	r2, [r7, #28]
 8018fdc:	69ba      	ldr	r2, [r7, #24]
 8018fde:	b2d2      	uxtb	r2, r2
 8018fe0:	701a      	strb	r2, [r3, #0]
 8018fe2:	69fb      	ldr	r3, [r7, #28]
 8018fe4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8018fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	2280      	movs	r2, #128	; 0x80
 8018fec:	4619      	mov	r1, r3
 8018fee:	68f8      	ldr	r0, [r7, #12]
 8018ff0:	f7fe ff12 	bl	8017e18 <_EncodeStr>
 8018ff4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8018ff6:	2216      	movs	r2, #22
 8018ff8:	68f9      	ldr	r1, [r7, #12]
 8018ffa:	6938      	ldr	r0, [r7, #16]
 8018ffc:	f7ff f83a 	bl	8018074 <_SendPacket>
      RECORD_END();
 8019000:	697b      	ldr	r3, [r7, #20]
 8019002:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8019006:	bf00      	nop
 8019008:	3730      	adds	r7, #48	; 0x30
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	2003ce8c 	.word	0x2003ce8c
 8019014:	2003ce94 	.word	0x2003ce94

08019018 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801901e:	4b0c      	ldr	r3, [pc, #48]	; (8019050 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d00f      	beq.n	8019046 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8019026:	4b0a      	ldr	r3, [pc, #40]	; (8019050 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	68db      	ldr	r3, [r3, #12]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d002      	beq.n	801903a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	691b      	ldr	r3, [r3, #16]
 801903e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d1f2      	bne.n	801902c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8019046:	bf00      	nop
 8019048:	3708      	adds	r7, #8
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}
 801904e:	bf00      	nop
 8019050:	2003ce8c 	.word	0x2003ce8c

08019054 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8019054:	b580      	push	{r7, lr}
 8019056:	b086      	sub	sp, #24
 8019058:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801905a:	f3ef 8311 	mrs	r3, BASEPRI
 801905e:	f04f 0120 	mov.w	r1, #32
 8019062:	f381 8811 	msr	BASEPRI, r1
 8019066:	60fb      	str	r3, [r7, #12]
 8019068:	4817      	ldr	r0, [pc, #92]	; (80190c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801906a:	f7fe ff22 	bl	8017eb2 <_PreparePacket>
 801906e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	617b      	str	r3, [r7, #20]
 8019078:	4b14      	ldr	r3, [pc, #80]	; (80190cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801907a:	781b      	ldrb	r3, [r3, #0]
 801907c:	613b      	str	r3, [r7, #16]
 801907e:	e00b      	b.n	8019098 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8019080:	693b      	ldr	r3, [r7, #16]
 8019082:	b2da      	uxtb	r2, r3
 8019084:	697b      	ldr	r3, [r7, #20]
 8019086:	1c59      	adds	r1, r3, #1
 8019088:	6179      	str	r1, [r7, #20]
 801908a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801908e:	b2d2      	uxtb	r2, r2
 8019090:	701a      	strb	r2, [r3, #0]
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	09db      	lsrs	r3, r3, #7
 8019096:	613b      	str	r3, [r7, #16]
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	2b7f      	cmp	r3, #127	; 0x7f
 801909c:	d8f0      	bhi.n	8019080 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	1c5a      	adds	r2, r3, #1
 80190a2:	617a      	str	r2, [r7, #20]
 80190a4:	693a      	ldr	r2, [r7, #16]
 80190a6:	b2d2      	uxtb	r2, r2
 80190a8:	701a      	strb	r2, [r3, #0]
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80190ae:	221b      	movs	r2, #27
 80190b0:	6879      	ldr	r1, [r7, #4]
 80190b2:	68b8      	ldr	r0, [r7, #8]
 80190b4:	f7fe ffde 	bl	8018074 <_SendPacket>
  RECORD_END();
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	f383 8811 	msr	BASEPRI, r3
}
 80190be:	bf00      	nop
 80190c0:	3718      	adds	r7, #24
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	bf00      	nop
 80190c8:	2003ce94 	.word	0x2003ce94
 80190cc:	2003ce90 	.word	0x2003ce90

080190d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b08a      	sub	sp, #40	; 0x28
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80190d8:	f3ef 8311 	mrs	r3, BASEPRI
 80190dc:	f04f 0120 	mov.w	r1, #32
 80190e0:	f381 8811 	msr	BASEPRI, r1
 80190e4:	617b      	str	r3, [r7, #20]
 80190e6:	4827      	ldr	r0, [pc, #156]	; (8019184 <SEGGER_SYSVIEW_Warn+0xb4>)
 80190e8:	f7fe fee3 	bl	8017eb2 <_PreparePacket>
 80190ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80190ee:	2280      	movs	r2, #128	; 0x80
 80190f0:	6879      	ldr	r1, [r7, #4]
 80190f2:	6938      	ldr	r0, [r7, #16]
 80190f4:	f7fe fe90 	bl	8017e18 <_EncodeStr>
 80190f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	627b      	str	r3, [r7, #36]	; 0x24
 80190fe:	2301      	movs	r3, #1
 8019100:	623b      	str	r3, [r7, #32]
 8019102:	e00b      	b.n	801911c <SEGGER_SYSVIEW_Warn+0x4c>
 8019104:	6a3b      	ldr	r3, [r7, #32]
 8019106:	b2da      	uxtb	r2, r3
 8019108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801910a:	1c59      	adds	r1, r3, #1
 801910c:	6279      	str	r1, [r7, #36]	; 0x24
 801910e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019112:	b2d2      	uxtb	r2, r2
 8019114:	701a      	strb	r2, [r3, #0]
 8019116:	6a3b      	ldr	r3, [r7, #32]
 8019118:	09db      	lsrs	r3, r3, #7
 801911a:	623b      	str	r3, [r7, #32]
 801911c:	6a3b      	ldr	r3, [r7, #32]
 801911e:	2b7f      	cmp	r3, #127	; 0x7f
 8019120:	d8f0      	bhi.n	8019104 <SEGGER_SYSVIEW_Warn+0x34>
 8019122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019124:	1c5a      	adds	r2, r3, #1
 8019126:	627a      	str	r2, [r7, #36]	; 0x24
 8019128:	6a3a      	ldr	r2, [r7, #32]
 801912a:	b2d2      	uxtb	r2, r2
 801912c:	701a      	strb	r2, [r3, #0]
 801912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019130:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	61fb      	str	r3, [r7, #28]
 8019136:	2300      	movs	r3, #0
 8019138:	61bb      	str	r3, [r7, #24]
 801913a:	e00b      	b.n	8019154 <SEGGER_SYSVIEW_Warn+0x84>
 801913c:	69bb      	ldr	r3, [r7, #24]
 801913e:	b2da      	uxtb	r2, r3
 8019140:	69fb      	ldr	r3, [r7, #28]
 8019142:	1c59      	adds	r1, r3, #1
 8019144:	61f9      	str	r1, [r7, #28]
 8019146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801914a:	b2d2      	uxtb	r2, r2
 801914c:	701a      	strb	r2, [r3, #0]
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	09db      	lsrs	r3, r3, #7
 8019152:	61bb      	str	r3, [r7, #24]
 8019154:	69bb      	ldr	r3, [r7, #24]
 8019156:	2b7f      	cmp	r3, #127	; 0x7f
 8019158:	d8f0      	bhi.n	801913c <SEGGER_SYSVIEW_Warn+0x6c>
 801915a:	69fb      	ldr	r3, [r7, #28]
 801915c:	1c5a      	adds	r2, r3, #1
 801915e:	61fa      	str	r2, [r7, #28]
 8019160:	69ba      	ldr	r2, [r7, #24]
 8019162:	b2d2      	uxtb	r2, r2
 8019164:	701a      	strb	r2, [r3, #0]
 8019166:	69fb      	ldr	r3, [r7, #28]
 8019168:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801916a:	221a      	movs	r2, #26
 801916c:	68f9      	ldr	r1, [r7, #12]
 801916e:	6938      	ldr	r0, [r7, #16]
 8019170:	f7fe ff80 	bl	8018074 <_SendPacket>
  RECORD_END();
 8019174:	697b      	ldr	r3, [r7, #20]
 8019176:	f383 8811 	msr	BASEPRI, r3
}
 801917a:	bf00      	nop
 801917c:	3728      	adds	r7, #40	; 0x28
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
 8019182:	bf00      	nop
 8019184:	2003ce94 	.word	0x2003ce94

08019188 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8019188:	b580      	push	{r7, lr}
 801918a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 801918c:	4803      	ldr	r0, [pc, #12]	; (801919c <_cbSendSystemDesc+0x14>)
 801918e:	f7ff fd73 	bl	8018c78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8019192:	4803      	ldr	r0, [pc, #12]	; (80191a0 <_cbSendSystemDesc+0x18>)
 8019194:	f7ff fd70 	bl	8018c78 <SEGGER_SYSVIEW_SendSysDesc>
}
 8019198:	bf00      	nop
 801919a:	bd80      	pop	{r7, pc}
 801919c:	0801a680 	.word	0x0801a680
 80191a0:	0801a6b4 	.word	0x0801a6b4

080191a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80191a4:	b580      	push	{r7, lr}
 80191a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80191a8:	4b06      	ldr	r3, [pc, #24]	; (80191c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80191aa:	6818      	ldr	r0, [r3, #0]
 80191ac:	4b05      	ldr	r3, [pc, #20]	; (80191c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80191ae:	6819      	ldr	r1, [r3, #0]
 80191b0:	4b05      	ldr	r3, [pc, #20]	; (80191c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80191b2:	4a06      	ldr	r2, [pc, #24]	; (80191cc <SEGGER_SYSVIEW_Conf+0x28>)
 80191b4:	f7ff f832 	bl	801821c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80191b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80191bc:	f7ff f86c 	bl	8018298 <SEGGER_SYSVIEW_SetRAMBase>
}
 80191c0:	bf00      	nop
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	200000c0 	.word	0x200000c0
 80191c8:	08019189 	.word	0x08019189
 80191cc:	0801ac90 	.word	0x0801ac90

080191d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80191d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191d2:	b085      	sub	sp, #20
 80191d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80191d6:	2300      	movs	r3, #0
 80191d8:	607b      	str	r3, [r7, #4]
 80191da:	e048      	b.n	801926e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80191dc:	4929      	ldr	r1, [pc, #164]	; (8019284 <_cbSendTaskList+0xb4>)
 80191de:	687a      	ldr	r2, [r7, #4]
 80191e0:	4613      	mov	r3, r2
 80191e2:	009b      	lsls	r3, r3, #2
 80191e4:	4413      	add	r3, r2
 80191e6:	009b      	lsls	r3, r3, #2
 80191e8:	440b      	add	r3, r1
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7fa f88f 	bl	8013310 <uxTaskGetStackHighWaterMark>
 80191f2:	4601      	mov	r1, r0
 80191f4:	4823      	ldr	r0, [pc, #140]	; (8019284 <_cbSendTaskList+0xb4>)
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	4613      	mov	r3, r2
 80191fa:	009b      	lsls	r3, r3, #2
 80191fc:	4413      	add	r3, r2
 80191fe:	009b      	lsls	r3, r3, #2
 8019200:	4403      	add	r3, r0
 8019202:	3310      	adds	r3, #16
 8019204:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8019206:	491f      	ldr	r1, [pc, #124]	; (8019284 <_cbSendTaskList+0xb4>)
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	4613      	mov	r3, r2
 801920c:	009b      	lsls	r3, r3, #2
 801920e:	4413      	add	r3, r2
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	440b      	add	r3, r1
 8019214:	6818      	ldr	r0, [r3, #0]
 8019216:	491b      	ldr	r1, [pc, #108]	; (8019284 <_cbSendTaskList+0xb4>)
 8019218:	687a      	ldr	r2, [r7, #4]
 801921a:	4613      	mov	r3, r2
 801921c:	009b      	lsls	r3, r3, #2
 801921e:	4413      	add	r3, r2
 8019220:	009b      	lsls	r3, r3, #2
 8019222:	440b      	add	r3, r1
 8019224:	3304      	adds	r3, #4
 8019226:	6819      	ldr	r1, [r3, #0]
 8019228:	4c16      	ldr	r4, [pc, #88]	; (8019284 <_cbSendTaskList+0xb4>)
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	4613      	mov	r3, r2
 801922e:	009b      	lsls	r3, r3, #2
 8019230:	4413      	add	r3, r2
 8019232:	009b      	lsls	r3, r3, #2
 8019234:	4423      	add	r3, r4
 8019236:	3308      	adds	r3, #8
 8019238:	681c      	ldr	r4, [r3, #0]
 801923a:	4d12      	ldr	r5, [pc, #72]	; (8019284 <_cbSendTaskList+0xb4>)
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	4613      	mov	r3, r2
 8019240:	009b      	lsls	r3, r3, #2
 8019242:	4413      	add	r3, r2
 8019244:	009b      	lsls	r3, r3, #2
 8019246:	442b      	add	r3, r5
 8019248:	330c      	adds	r3, #12
 801924a:	681d      	ldr	r5, [r3, #0]
 801924c:	4e0d      	ldr	r6, [pc, #52]	; (8019284 <_cbSendTaskList+0xb4>)
 801924e:	687a      	ldr	r2, [r7, #4]
 8019250:	4613      	mov	r3, r2
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	4413      	add	r3, r2
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	4433      	add	r3, r6
 801925a:	3310      	adds	r3, #16
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	462b      	mov	r3, r5
 8019262:	4622      	mov	r2, r4
 8019264:	f000 f97a 	bl	801955c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	3301      	adds	r3, #1
 801926c:	607b      	str	r3, [r7, #4]
 801926e:	4b06      	ldr	r3, [pc, #24]	; (8019288 <_cbSendTaskList+0xb8>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	687a      	ldr	r2, [r7, #4]
 8019274:	429a      	cmp	r2, r3
 8019276:	d3b1      	bcc.n	80191dc <_cbSendTaskList+0xc>
  }
}
 8019278:	bf00      	nop
 801927a:	bf00      	nop
 801927c:	370c      	adds	r7, #12
 801927e:	46bd      	mov	sp, r7
 8019280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019282:	bf00      	nop
 8019284:	2003cf78 	.word	0x2003cf78
 8019288:	2003d018 	.word	0x2003d018

0801928c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 801928c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019290:	b082      	sub	sp, #8
 8019292:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8019294:	f7f9 fb8e 	bl	80129b4 <xTaskGetTickCountFromISR>
 8019298:	4603      	mov	r3, r0
 801929a:	2200      	movs	r2, #0
 801929c:	469a      	mov	sl, r3
 801929e:	4693      	mov	fp, r2
 80192a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80192a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80192a8:	4602      	mov	r2, r0
 80192aa:	460b      	mov	r3, r1
 80192ac:	f04f 0a00 	mov.w	sl, #0
 80192b0:	f04f 0b00 	mov.w	fp, #0
 80192b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80192b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80192bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80192c0:	4652      	mov	r2, sl
 80192c2:	465b      	mov	r3, fp
 80192c4:	1a14      	subs	r4, r2, r0
 80192c6:	eb63 0501 	sbc.w	r5, r3, r1
 80192ca:	f04f 0200 	mov.w	r2, #0
 80192ce:	f04f 0300 	mov.w	r3, #0
 80192d2:	00ab      	lsls	r3, r5, #2
 80192d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80192d8:	00a2      	lsls	r2, r4, #2
 80192da:	4614      	mov	r4, r2
 80192dc:	461d      	mov	r5, r3
 80192de:	eb14 0800 	adds.w	r8, r4, r0
 80192e2:	eb45 0901 	adc.w	r9, r5, r1
 80192e6:	f04f 0200 	mov.w	r2, #0
 80192ea:	f04f 0300 	mov.w	r3, #0
 80192ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80192f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80192f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80192fa:	4690      	mov	r8, r2
 80192fc:	4699      	mov	r9, r3
 80192fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8019302:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8019306:	4610      	mov	r0, r2
 8019308:	4619      	mov	r1, r3
 801930a:	3708      	adds	r7, #8
 801930c:	46bd      	mov	sp, r7
 801930e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08019314 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8019314:	b580      	push	{r7, lr}
 8019316:	b086      	sub	sp, #24
 8019318:	af02      	add	r7, sp, #8
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	607a      	str	r2, [r7, #4]
 8019320:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8019322:	2205      	movs	r2, #5
 8019324:	492b      	ldr	r1, [pc, #172]	; (80193d4 <SYSVIEW_AddTask+0xc0>)
 8019326:	68b8      	ldr	r0, [r7, #8]
 8019328:	f000 f98e 	bl	8019648 <memcmp>
 801932c:	4603      	mov	r3, r0
 801932e:	2b00      	cmp	r3, #0
 8019330:	d04b      	beq.n	80193ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8019332:	4b29      	ldr	r3, [pc, #164]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	2b07      	cmp	r3, #7
 8019338:	d903      	bls.n	8019342 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 801933a:	4828      	ldr	r0, [pc, #160]	; (80193dc <SYSVIEW_AddTask+0xc8>)
 801933c:	f7ff fec8 	bl	80190d0 <SEGGER_SYSVIEW_Warn>
    return;
 8019340:	e044      	b.n	80193cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8019342:	4b25      	ldr	r3, [pc, #148]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 8019344:	681a      	ldr	r2, [r3, #0]
 8019346:	4926      	ldr	r1, [pc, #152]	; (80193e0 <SYSVIEW_AddTask+0xcc>)
 8019348:	4613      	mov	r3, r2
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	4413      	add	r3, r2
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	440b      	add	r3, r1
 8019352:	68fa      	ldr	r2, [r7, #12]
 8019354:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8019356:	4b20      	ldr	r3, [pc, #128]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 8019358:	681a      	ldr	r2, [r3, #0]
 801935a:	4921      	ldr	r1, [pc, #132]	; (80193e0 <SYSVIEW_AddTask+0xcc>)
 801935c:	4613      	mov	r3, r2
 801935e:	009b      	lsls	r3, r3, #2
 8019360:	4413      	add	r3, r2
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	440b      	add	r3, r1
 8019366:	3304      	adds	r3, #4
 8019368:	68ba      	ldr	r2, [r7, #8]
 801936a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 801936c:	4b1a      	ldr	r3, [pc, #104]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 801936e:	681a      	ldr	r2, [r3, #0]
 8019370:	491b      	ldr	r1, [pc, #108]	; (80193e0 <SYSVIEW_AddTask+0xcc>)
 8019372:	4613      	mov	r3, r2
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	4413      	add	r3, r2
 8019378:	009b      	lsls	r3, r3, #2
 801937a:	440b      	add	r3, r1
 801937c:	3308      	adds	r3, #8
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8019382:	4b15      	ldr	r3, [pc, #84]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	4916      	ldr	r1, [pc, #88]	; (80193e0 <SYSVIEW_AddTask+0xcc>)
 8019388:	4613      	mov	r3, r2
 801938a:	009b      	lsls	r3, r3, #2
 801938c:	4413      	add	r3, r2
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	440b      	add	r3, r1
 8019392:	330c      	adds	r3, #12
 8019394:	683a      	ldr	r2, [r7, #0]
 8019396:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8019398:	4b0f      	ldr	r3, [pc, #60]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 801939a:	681a      	ldr	r2, [r3, #0]
 801939c:	4910      	ldr	r1, [pc, #64]	; (80193e0 <SYSVIEW_AddTask+0xcc>)
 801939e:	4613      	mov	r3, r2
 80193a0:	009b      	lsls	r3, r3, #2
 80193a2:	4413      	add	r3, r2
 80193a4:	009b      	lsls	r3, r3, #2
 80193a6:	440b      	add	r3, r1
 80193a8:	3310      	adds	r3, #16
 80193aa:	69ba      	ldr	r2, [r7, #24]
 80193ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80193ae:	4b0a      	ldr	r3, [pc, #40]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	3301      	adds	r3, #1
 80193b4:	4a08      	ldr	r2, [pc, #32]	; (80193d8 <SYSVIEW_AddTask+0xc4>)
 80193b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80193b8:	69bb      	ldr	r3, [r7, #24]
 80193ba:	9300      	str	r3, [sp, #0]
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	68b9      	ldr	r1, [r7, #8]
 80193c2:	68f8      	ldr	r0, [r7, #12]
 80193c4:	f000 f8ca 	bl	801955c <SYSVIEW_SendTaskInfo>
 80193c8:	e000      	b.n	80193cc <SYSVIEW_AddTask+0xb8>
    return;
 80193ca:	bf00      	nop

}
 80193cc:	3710      	adds	r7, #16
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}
 80193d2:	bf00      	nop
 80193d4:	0801a6c4 	.word	0x0801a6c4
 80193d8:	2003d018 	.word	0x2003d018
 80193dc:	0801a6cc 	.word	0x0801a6cc
 80193e0:	2003cf78 	.word	0x2003cf78

080193e4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b084      	sub	sp, #16
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80193ec:	4b59      	ldr	r3, [pc, #356]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f000 80ab 	beq.w	801954c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80193f6:	2300      	movs	r3, #0
 80193f8:	60fb      	str	r3, [r7, #12]
 80193fa:	e00d      	b.n	8019418 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80193fc:	4956      	ldr	r1, [pc, #344]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 80193fe:	68fa      	ldr	r2, [r7, #12]
 8019400:	4613      	mov	r3, r2
 8019402:	009b      	lsls	r3, r3, #2
 8019404:	4413      	add	r3, r2
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	440b      	add	r3, r1
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	687a      	ldr	r2, [r7, #4]
 801940e:	429a      	cmp	r2, r3
 8019410:	d008      	beq.n	8019424 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	3301      	adds	r3, #1
 8019416:	60fb      	str	r3, [r7, #12]
 8019418:	4b4e      	ldr	r3, [pc, #312]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	68fa      	ldr	r2, [r7, #12]
 801941e:	429a      	cmp	r2, r3
 8019420:	d3ec      	bcc.n	80193fc <SYSVIEW_DeleteTask+0x18>
 8019422:	e000      	b.n	8019426 <SYSVIEW_DeleteTask+0x42>
      break;
 8019424:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8019426:	4b4b      	ldr	r3, [pc, #300]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	3b01      	subs	r3, #1
 801942c:	68fa      	ldr	r2, [r7, #12]
 801942e:	429a      	cmp	r2, r3
 8019430:	d111      	bne.n	8019456 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8019432:	68fa      	ldr	r2, [r7, #12]
 8019434:	4613      	mov	r3, r2
 8019436:	009b      	lsls	r3, r3, #2
 8019438:	4413      	add	r3, r2
 801943a:	009b      	lsls	r3, r3, #2
 801943c:	4a46      	ldr	r2, [pc, #280]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 801943e:	4413      	add	r3, r2
 8019440:	2214      	movs	r2, #20
 8019442:	2100      	movs	r1, #0
 8019444:	4618      	mov	r0, r3
 8019446:	f000 f91d 	bl	8019684 <memset>
    _NumTasks--;
 801944a:	4b42      	ldr	r3, [pc, #264]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	3b01      	subs	r3, #1
 8019450:	4a40      	ldr	r2, [pc, #256]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019452:	6013      	str	r3, [r2, #0]
 8019454:	e07b      	b.n	801954e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8019456:	4b3f      	ldr	r3, [pc, #252]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	68fa      	ldr	r2, [r7, #12]
 801945c:	429a      	cmp	r2, r3
 801945e:	d276      	bcs.n	801954e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8019460:	4b3c      	ldr	r3, [pc, #240]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	1e5a      	subs	r2, r3, #1
 8019466:	493c      	ldr	r1, [pc, #240]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 8019468:	4613      	mov	r3, r2
 801946a:	009b      	lsls	r3, r3, #2
 801946c:	4413      	add	r3, r2
 801946e:	009b      	lsls	r3, r3, #2
 8019470:	440b      	add	r3, r1
 8019472:	6819      	ldr	r1, [r3, #0]
 8019474:	4838      	ldr	r0, [pc, #224]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 8019476:	68fa      	ldr	r2, [r7, #12]
 8019478:	4613      	mov	r3, r2
 801947a:	009b      	lsls	r3, r3, #2
 801947c:	4413      	add	r3, r2
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	4403      	add	r3, r0
 8019482:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8019484:	4b33      	ldr	r3, [pc, #204]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	1e5a      	subs	r2, r3, #1
 801948a:	4933      	ldr	r1, [pc, #204]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 801948c:	4613      	mov	r3, r2
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	4413      	add	r3, r2
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	440b      	add	r3, r1
 8019496:	3304      	adds	r3, #4
 8019498:	6819      	ldr	r1, [r3, #0]
 801949a:	482f      	ldr	r0, [pc, #188]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 801949c:	68fa      	ldr	r2, [r7, #12]
 801949e:	4613      	mov	r3, r2
 80194a0:	009b      	lsls	r3, r3, #2
 80194a2:	4413      	add	r3, r2
 80194a4:	009b      	lsls	r3, r3, #2
 80194a6:	4403      	add	r3, r0
 80194a8:	3304      	adds	r3, #4
 80194aa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80194ac:	4b29      	ldr	r3, [pc, #164]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	1e5a      	subs	r2, r3, #1
 80194b2:	4929      	ldr	r1, [pc, #164]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 80194b4:	4613      	mov	r3, r2
 80194b6:	009b      	lsls	r3, r3, #2
 80194b8:	4413      	add	r3, r2
 80194ba:	009b      	lsls	r3, r3, #2
 80194bc:	440b      	add	r3, r1
 80194be:	3308      	adds	r3, #8
 80194c0:	6819      	ldr	r1, [r3, #0]
 80194c2:	4825      	ldr	r0, [pc, #148]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 80194c4:	68fa      	ldr	r2, [r7, #12]
 80194c6:	4613      	mov	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	4413      	add	r3, r2
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	4403      	add	r3, r0
 80194d0:	3308      	adds	r3, #8
 80194d2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80194d4:	4b1f      	ldr	r3, [pc, #124]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	1e5a      	subs	r2, r3, #1
 80194da:	491f      	ldr	r1, [pc, #124]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 80194dc:	4613      	mov	r3, r2
 80194de:	009b      	lsls	r3, r3, #2
 80194e0:	4413      	add	r3, r2
 80194e2:	009b      	lsls	r3, r3, #2
 80194e4:	440b      	add	r3, r1
 80194e6:	330c      	adds	r3, #12
 80194e8:	6819      	ldr	r1, [r3, #0]
 80194ea:	481b      	ldr	r0, [pc, #108]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 80194ec:	68fa      	ldr	r2, [r7, #12]
 80194ee:	4613      	mov	r3, r2
 80194f0:	009b      	lsls	r3, r3, #2
 80194f2:	4413      	add	r3, r2
 80194f4:	009b      	lsls	r3, r3, #2
 80194f6:	4403      	add	r3, r0
 80194f8:	330c      	adds	r3, #12
 80194fa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80194fc:	4b15      	ldr	r3, [pc, #84]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	1e5a      	subs	r2, r3, #1
 8019502:	4915      	ldr	r1, [pc, #84]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 8019504:	4613      	mov	r3, r2
 8019506:	009b      	lsls	r3, r3, #2
 8019508:	4413      	add	r3, r2
 801950a:	009b      	lsls	r3, r3, #2
 801950c:	440b      	add	r3, r1
 801950e:	3310      	adds	r3, #16
 8019510:	6819      	ldr	r1, [r3, #0]
 8019512:	4811      	ldr	r0, [pc, #68]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 8019514:	68fa      	ldr	r2, [r7, #12]
 8019516:	4613      	mov	r3, r2
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	4413      	add	r3, r2
 801951c:	009b      	lsls	r3, r3, #2
 801951e:	4403      	add	r3, r0
 8019520:	3310      	adds	r3, #16
 8019522:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8019524:	4b0b      	ldr	r3, [pc, #44]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	1e5a      	subs	r2, r3, #1
 801952a:	4613      	mov	r3, r2
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	4413      	add	r3, r2
 8019530:	009b      	lsls	r3, r3, #2
 8019532:	4a09      	ldr	r2, [pc, #36]	; (8019558 <SYSVIEW_DeleteTask+0x174>)
 8019534:	4413      	add	r3, r2
 8019536:	2214      	movs	r2, #20
 8019538:	2100      	movs	r1, #0
 801953a:	4618      	mov	r0, r3
 801953c:	f000 f8a2 	bl	8019684 <memset>
    _NumTasks--;
 8019540:	4b04      	ldr	r3, [pc, #16]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	3b01      	subs	r3, #1
 8019546:	4a03      	ldr	r2, [pc, #12]	; (8019554 <SYSVIEW_DeleteTask+0x170>)
 8019548:	6013      	str	r3, [r2, #0]
 801954a:	e000      	b.n	801954e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 801954c:	bf00      	nop
  }
}
 801954e:	3710      	adds	r7, #16
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}
 8019554:	2003d018 	.word	0x2003d018
 8019558:	2003cf78 	.word	0x2003cf78

0801955c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 801955c:	b580      	push	{r7, lr}
 801955e:	b08a      	sub	sp, #40	; 0x28
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	607a      	str	r2, [r7, #4]
 8019568:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 801956a:	f107 0314 	add.w	r3, r7, #20
 801956e:	2214      	movs	r2, #20
 8019570:	2100      	movs	r1, #0
 8019572:	4618      	mov	r0, r3
 8019574:	f000 f886 	bl	8019684 <memset>
  TaskInfo.TaskID     = TaskID;
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8019588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801958a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 801958c:	f107 0314 	add.w	r3, r7, #20
 8019590:	4618      	mov	r0, r3
 8019592:	f7ff fa77 	bl	8018a84 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8019596:	bf00      	nop
 8019598:	3728      	adds	r7, #40	; 0x28
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
	...

080195a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80195a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80195d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80195a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80195a6:	e003      	b.n	80195b0 <LoopCopyDataInit>

080195a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80195a8:	4b0c      	ldr	r3, [pc, #48]	; (80195dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80195aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80195ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80195ae:	3104      	adds	r1, #4

080195b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80195b0:	480b      	ldr	r0, [pc, #44]	; (80195e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80195b2:	4b0c      	ldr	r3, [pc, #48]	; (80195e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80195b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80195b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80195b8:	d3f6      	bcc.n	80195a8 <CopyDataInit>
	ldr	r2, =_sbss
 80195ba:	4a0b      	ldr	r2, [pc, #44]	; (80195e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80195bc:	e002      	b.n	80195c4 <LoopFillZerobss>

080195be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80195be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80195c0:	f842 3b04 	str.w	r3, [r2], #4

080195c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80195c4:	4b09      	ldr	r3, [pc, #36]	; (80195ec <LoopForever+0x16>)
	cmp	r2, r3
 80195c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80195c8:	d3f9      	bcc.n	80195be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80195ca:	f7fc fe95 	bl	80162f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80195ce:	f000 f817 	bl	8019600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80195d2:	f7fb fdcf 	bl	8015174 <main>

080195d6 <LoopForever>:

LoopForever:
    b LoopForever
 80195d6:	e7fe      	b.n	80195d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80195d8:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80195dc:	0801acdc 	.word	0x0801acdc
	ldr	r0, =_sdata
 80195e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80195e4:	200001a8 	.word	0x200001a8
	ldr	r2, =_sbss
 80195e8:	200001a8 	.word	0x200001a8
	ldr	r3, = _ebss
 80195ec:	2003d02c 	.word	0x2003d02c

080195f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80195f0:	e7fe      	b.n	80195f0 <ADC1_2_IRQHandler>
	...

080195f4 <__errno>:
 80195f4:	4b01      	ldr	r3, [pc, #4]	; (80195fc <__errno+0x8>)
 80195f6:	6818      	ldr	r0, [r3, #0]
 80195f8:	4770      	bx	lr
 80195fa:	bf00      	nop
 80195fc:	20000144 	.word	0x20000144

08019600 <__libc_init_array>:
 8019600:	b570      	push	{r4, r5, r6, lr}
 8019602:	4d0d      	ldr	r5, [pc, #52]	; (8019638 <__libc_init_array+0x38>)
 8019604:	4c0d      	ldr	r4, [pc, #52]	; (801963c <__libc_init_array+0x3c>)
 8019606:	1b64      	subs	r4, r4, r5
 8019608:	10a4      	asrs	r4, r4, #2
 801960a:	2600      	movs	r6, #0
 801960c:	42a6      	cmp	r6, r4
 801960e:	d109      	bne.n	8019624 <__libc_init_array+0x24>
 8019610:	4d0b      	ldr	r5, [pc, #44]	; (8019640 <__libc_init_array+0x40>)
 8019612:	4c0c      	ldr	r4, [pc, #48]	; (8019644 <__libc_init_array+0x44>)
 8019614:	f000 fcd4 	bl	8019fc0 <_init>
 8019618:	1b64      	subs	r4, r4, r5
 801961a:	10a4      	asrs	r4, r4, #2
 801961c:	2600      	movs	r6, #0
 801961e:	42a6      	cmp	r6, r4
 8019620:	d105      	bne.n	801962e <__libc_init_array+0x2e>
 8019622:	bd70      	pop	{r4, r5, r6, pc}
 8019624:	f855 3b04 	ldr.w	r3, [r5], #4
 8019628:	4798      	blx	r3
 801962a:	3601      	adds	r6, #1
 801962c:	e7ee      	b.n	801960c <__libc_init_array+0xc>
 801962e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019632:	4798      	blx	r3
 8019634:	3601      	adds	r6, #1
 8019636:	e7f2      	b.n	801961e <__libc_init_array+0x1e>
 8019638:	0801acd4 	.word	0x0801acd4
 801963c:	0801acd4 	.word	0x0801acd4
 8019640:	0801acd4 	.word	0x0801acd4
 8019644:	0801acd8 	.word	0x0801acd8

08019648 <memcmp>:
 8019648:	b510      	push	{r4, lr}
 801964a:	3901      	subs	r1, #1
 801964c:	4402      	add	r2, r0
 801964e:	4290      	cmp	r0, r2
 8019650:	d101      	bne.n	8019656 <memcmp+0xe>
 8019652:	2000      	movs	r0, #0
 8019654:	e005      	b.n	8019662 <memcmp+0x1a>
 8019656:	7803      	ldrb	r3, [r0, #0]
 8019658:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801965c:	42a3      	cmp	r3, r4
 801965e:	d001      	beq.n	8019664 <memcmp+0x1c>
 8019660:	1b18      	subs	r0, r3, r4
 8019662:	bd10      	pop	{r4, pc}
 8019664:	3001      	adds	r0, #1
 8019666:	e7f2      	b.n	801964e <memcmp+0x6>

08019668 <memcpy>:
 8019668:	440a      	add	r2, r1
 801966a:	4291      	cmp	r1, r2
 801966c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019670:	d100      	bne.n	8019674 <memcpy+0xc>
 8019672:	4770      	bx	lr
 8019674:	b510      	push	{r4, lr}
 8019676:	f811 4b01 	ldrb.w	r4, [r1], #1
 801967a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801967e:	4291      	cmp	r1, r2
 8019680:	d1f9      	bne.n	8019676 <memcpy+0xe>
 8019682:	bd10      	pop	{r4, pc}

08019684 <memset>:
 8019684:	4402      	add	r2, r0
 8019686:	4603      	mov	r3, r0
 8019688:	4293      	cmp	r3, r2
 801968a:	d100      	bne.n	801968e <memset+0xa>
 801968c:	4770      	bx	lr
 801968e:	f803 1b01 	strb.w	r1, [r3], #1
 8019692:	e7f9      	b.n	8019688 <memset+0x4>

08019694 <siprintf>:
 8019694:	b40e      	push	{r1, r2, r3}
 8019696:	b500      	push	{lr}
 8019698:	b09c      	sub	sp, #112	; 0x70
 801969a:	ab1d      	add	r3, sp, #116	; 0x74
 801969c:	9002      	str	r0, [sp, #8]
 801969e:	9006      	str	r0, [sp, #24]
 80196a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80196a4:	4809      	ldr	r0, [pc, #36]	; (80196cc <siprintf+0x38>)
 80196a6:	9107      	str	r1, [sp, #28]
 80196a8:	9104      	str	r1, [sp, #16]
 80196aa:	4909      	ldr	r1, [pc, #36]	; (80196d0 <siprintf+0x3c>)
 80196ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80196b0:	9105      	str	r1, [sp, #20]
 80196b2:	6800      	ldr	r0, [r0, #0]
 80196b4:	9301      	str	r3, [sp, #4]
 80196b6:	a902      	add	r1, sp, #8
 80196b8:	f000 f89e 	bl	80197f8 <_svfiprintf_r>
 80196bc:	9b02      	ldr	r3, [sp, #8]
 80196be:	2200      	movs	r2, #0
 80196c0:	701a      	strb	r2, [r3, #0]
 80196c2:	b01c      	add	sp, #112	; 0x70
 80196c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80196c8:	b003      	add	sp, #12
 80196ca:	4770      	bx	lr
 80196cc:	20000144 	.word	0x20000144
 80196d0:	ffff0208 	.word	0xffff0208

080196d4 <strcat>:
 80196d4:	b510      	push	{r4, lr}
 80196d6:	4602      	mov	r2, r0
 80196d8:	7814      	ldrb	r4, [r2, #0]
 80196da:	4613      	mov	r3, r2
 80196dc:	3201      	adds	r2, #1
 80196de:	2c00      	cmp	r4, #0
 80196e0:	d1fa      	bne.n	80196d8 <strcat+0x4>
 80196e2:	3b01      	subs	r3, #1
 80196e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80196ec:	2a00      	cmp	r2, #0
 80196ee:	d1f9      	bne.n	80196e4 <strcat+0x10>
 80196f0:	bd10      	pop	{r4, pc}

080196f2 <strncmp>:
 80196f2:	b510      	push	{r4, lr}
 80196f4:	b17a      	cbz	r2, 8019716 <strncmp+0x24>
 80196f6:	4603      	mov	r3, r0
 80196f8:	3901      	subs	r1, #1
 80196fa:	1884      	adds	r4, r0, r2
 80196fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019700:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019704:	4290      	cmp	r0, r2
 8019706:	d101      	bne.n	801970c <strncmp+0x1a>
 8019708:	42a3      	cmp	r3, r4
 801970a:	d101      	bne.n	8019710 <strncmp+0x1e>
 801970c:	1a80      	subs	r0, r0, r2
 801970e:	bd10      	pop	{r4, pc}
 8019710:	2800      	cmp	r0, #0
 8019712:	d1f3      	bne.n	80196fc <strncmp+0xa>
 8019714:	e7fa      	b.n	801970c <strncmp+0x1a>
 8019716:	4610      	mov	r0, r2
 8019718:	e7f9      	b.n	801970e <strncmp+0x1c>

0801971a <strncpy>:
 801971a:	b510      	push	{r4, lr}
 801971c:	3901      	subs	r1, #1
 801971e:	4603      	mov	r3, r0
 8019720:	b132      	cbz	r2, 8019730 <strncpy+0x16>
 8019722:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019726:	f803 4b01 	strb.w	r4, [r3], #1
 801972a:	3a01      	subs	r2, #1
 801972c:	2c00      	cmp	r4, #0
 801972e:	d1f7      	bne.n	8019720 <strncpy+0x6>
 8019730:	441a      	add	r2, r3
 8019732:	2100      	movs	r1, #0
 8019734:	4293      	cmp	r3, r2
 8019736:	d100      	bne.n	801973a <strncpy+0x20>
 8019738:	bd10      	pop	{r4, pc}
 801973a:	f803 1b01 	strb.w	r1, [r3], #1
 801973e:	e7f9      	b.n	8019734 <strncpy+0x1a>

08019740 <__ssputs_r>:
 8019740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019744:	688e      	ldr	r6, [r1, #8]
 8019746:	429e      	cmp	r6, r3
 8019748:	4682      	mov	sl, r0
 801974a:	460c      	mov	r4, r1
 801974c:	4690      	mov	r8, r2
 801974e:	461f      	mov	r7, r3
 8019750:	d838      	bhi.n	80197c4 <__ssputs_r+0x84>
 8019752:	898a      	ldrh	r2, [r1, #12]
 8019754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019758:	d032      	beq.n	80197c0 <__ssputs_r+0x80>
 801975a:	6825      	ldr	r5, [r4, #0]
 801975c:	6909      	ldr	r1, [r1, #16]
 801975e:	eba5 0901 	sub.w	r9, r5, r1
 8019762:	6965      	ldr	r5, [r4, #20]
 8019764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801976c:	3301      	adds	r3, #1
 801976e:	444b      	add	r3, r9
 8019770:	106d      	asrs	r5, r5, #1
 8019772:	429d      	cmp	r5, r3
 8019774:	bf38      	it	cc
 8019776:	461d      	movcc	r5, r3
 8019778:	0553      	lsls	r3, r2, #21
 801977a:	d531      	bpl.n	80197e0 <__ssputs_r+0xa0>
 801977c:	4629      	mov	r1, r5
 801977e:	f000 fb55 	bl	8019e2c <_malloc_r>
 8019782:	4606      	mov	r6, r0
 8019784:	b950      	cbnz	r0, 801979c <__ssputs_r+0x5c>
 8019786:	230c      	movs	r3, #12
 8019788:	f8ca 3000 	str.w	r3, [sl]
 801978c:	89a3      	ldrh	r3, [r4, #12]
 801978e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019792:	81a3      	strh	r3, [r4, #12]
 8019794:	f04f 30ff 	mov.w	r0, #4294967295
 8019798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801979c:	6921      	ldr	r1, [r4, #16]
 801979e:	464a      	mov	r2, r9
 80197a0:	f7ff ff62 	bl	8019668 <memcpy>
 80197a4:	89a3      	ldrh	r3, [r4, #12]
 80197a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ae:	81a3      	strh	r3, [r4, #12]
 80197b0:	6126      	str	r6, [r4, #16]
 80197b2:	6165      	str	r5, [r4, #20]
 80197b4:	444e      	add	r6, r9
 80197b6:	eba5 0509 	sub.w	r5, r5, r9
 80197ba:	6026      	str	r6, [r4, #0]
 80197bc:	60a5      	str	r5, [r4, #8]
 80197be:	463e      	mov	r6, r7
 80197c0:	42be      	cmp	r6, r7
 80197c2:	d900      	bls.n	80197c6 <__ssputs_r+0x86>
 80197c4:	463e      	mov	r6, r7
 80197c6:	6820      	ldr	r0, [r4, #0]
 80197c8:	4632      	mov	r2, r6
 80197ca:	4641      	mov	r1, r8
 80197cc:	f000 faa8 	bl	8019d20 <memmove>
 80197d0:	68a3      	ldr	r3, [r4, #8]
 80197d2:	1b9b      	subs	r3, r3, r6
 80197d4:	60a3      	str	r3, [r4, #8]
 80197d6:	6823      	ldr	r3, [r4, #0]
 80197d8:	4433      	add	r3, r6
 80197da:	6023      	str	r3, [r4, #0]
 80197dc:	2000      	movs	r0, #0
 80197de:	e7db      	b.n	8019798 <__ssputs_r+0x58>
 80197e0:	462a      	mov	r2, r5
 80197e2:	f000 fb97 	bl	8019f14 <_realloc_r>
 80197e6:	4606      	mov	r6, r0
 80197e8:	2800      	cmp	r0, #0
 80197ea:	d1e1      	bne.n	80197b0 <__ssputs_r+0x70>
 80197ec:	6921      	ldr	r1, [r4, #16]
 80197ee:	4650      	mov	r0, sl
 80197f0:	f000 fab0 	bl	8019d54 <_free_r>
 80197f4:	e7c7      	b.n	8019786 <__ssputs_r+0x46>
	...

080197f8 <_svfiprintf_r>:
 80197f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197fc:	4698      	mov	r8, r3
 80197fe:	898b      	ldrh	r3, [r1, #12]
 8019800:	061b      	lsls	r3, r3, #24
 8019802:	b09d      	sub	sp, #116	; 0x74
 8019804:	4607      	mov	r7, r0
 8019806:	460d      	mov	r5, r1
 8019808:	4614      	mov	r4, r2
 801980a:	d50e      	bpl.n	801982a <_svfiprintf_r+0x32>
 801980c:	690b      	ldr	r3, [r1, #16]
 801980e:	b963      	cbnz	r3, 801982a <_svfiprintf_r+0x32>
 8019810:	2140      	movs	r1, #64	; 0x40
 8019812:	f000 fb0b 	bl	8019e2c <_malloc_r>
 8019816:	6028      	str	r0, [r5, #0]
 8019818:	6128      	str	r0, [r5, #16]
 801981a:	b920      	cbnz	r0, 8019826 <_svfiprintf_r+0x2e>
 801981c:	230c      	movs	r3, #12
 801981e:	603b      	str	r3, [r7, #0]
 8019820:	f04f 30ff 	mov.w	r0, #4294967295
 8019824:	e0d1      	b.n	80199ca <_svfiprintf_r+0x1d2>
 8019826:	2340      	movs	r3, #64	; 0x40
 8019828:	616b      	str	r3, [r5, #20]
 801982a:	2300      	movs	r3, #0
 801982c:	9309      	str	r3, [sp, #36]	; 0x24
 801982e:	2320      	movs	r3, #32
 8019830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019834:	f8cd 800c 	str.w	r8, [sp, #12]
 8019838:	2330      	movs	r3, #48	; 0x30
 801983a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80199e4 <_svfiprintf_r+0x1ec>
 801983e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019842:	f04f 0901 	mov.w	r9, #1
 8019846:	4623      	mov	r3, r4
 8019848:	469a      	mov	sl, r3
 801984a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801984e:	b10a      	cbz	r2, 8019854 <_svfiprintf_r+0x5c>
 8019850:	2a25      	cmp	r2, #37	; 0x25
 8019852:	d1f9      	bne.n	8019848 <_svfiprintf_r+0x50>
 8019854:	ebba 0b04 	subs.w	fp, sl, r4
 8019858:	d00b      	beq.n	8019872 <_svfiprintf_r+0x7a>
 801985a:	465b      	mov	r3, fp
 801985c:	4622      	mov	r2, r4
 801985e:	4629      	mov	r1, r5
 8019860:	4638      	mov	r0, r7
 8019862:	f7ff ff6d 	bl	8019740 <__ssputs_r>
 8019866:	3001      	adds	r0, #1
 8019868:	f000 80aa 	beq.w	80199c0 <_svfiprintf_r+0x1c8>
 801986c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801986e:	445a      	add	r2, fp
 8019870:	9209      	str	r2, [sp, #36]	; 0x24
 8019872:	f89a 3000 	ldrb.w	r3, [sl]
 8019876:	2b00      	cmp	r3, #0
 8019878:	f000 80a2 	beq.w	80199c0 <_svfiprintf_r+0x1c8>
 801987c:	2300      	movs	r3, #0
 801987e:	f04f 32ff 	mov.w	r2, #4294967295
 8019882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019886:	f10a 0a01 	add.w	sl, sl, #1
 801988a:	9304      	str	r3, [sp, #16]
 801988c:	9307      	str	r3, [sp, #28]
 801988e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019892:	931a      	str	r3, [sp, #104]	; 0x68
 8019894:	4654      	mov	r4, sl
 8019896:	2205      	movs	r2, #5
 8019898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801989c:	4851      	ldr	r0, [pc, #324]	; (80199e4 <_svfiprintf_r+0x1ec>)
 801989e:	f7e6 fcaf 	bl	8000200 <memchr>
 80198a2:	9a04      	ldr	r2, [sp, #16]
 80198a4:	b9d8      	cbnz	r0, 80198de <_svfiprintf_r+0xe6>
 80198a6:	06d0      	lsls	r0, r2, #27
 80198a8:	bf44      	itt	mi
 80198aa:	2320      	movmi	r3, #32
 80198ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198b0:	0711      	lsls	r1, r2, #28
 80198b2:	bf44      	itt	mi
 80198b4:	232b      	movmi	r3, #43	; 0x2b
 80198b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198ba:	f89a 3000 	ldrb.w	r3, [sl]
 80198be:	2b2a      	cmp	r3, #42	; 0x2a
 80198c0:	d015      	beq.n	80198ee <_svfiprintf_r+0xf6>
 80198c2:	9a07      	ldr	r2, [sp, #28]
 80198c4:	4654      	mov	r4, sl
 80198c6:	2000      	movs	r0, #0
 80198c8:	f04f 0c0a 	mov.w	ip, #10
 80198cc:	4621      	mov	r1, r4
 80198ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198d2:	3b30      	subs	r3, #48	; 0x30
 80198d4:	2b09      	cmp	r3, #9
 80198d6:	d94e      	bls.n	8019976 <_svfiprintf_r+0x17e>
 80198d8:	b1b0      	cbz	r0, 8019908 <_svfiprintf_r+0x110>
 80198da:	9207      	str	r2, [sp, #28]
 80198dc:	e014      	b.n	8019908 <_svfiprintf_r+0x110>
 80198de:	eba0 0308 	sub.w	r3, r0, r8
 80198e2:	fa09 f303 	lsl.w	r3, r9, r3
 80198e6:	4313      	orrs	r3, r2
 80198e8:	9304      	str	r3, [sp, #16]
 80198ea:	46a2      	mov	sl, r4
 80198ec:	e7d2      	b.n	8019894 <_svfiprintf_r+0x9c>
 80198ee:	9b03      	ldr	r3, [sp, #12]
 80198f0:	1d19      	adds	r1, r3, #4
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	9103      	str	r1, [sp, #12]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	bfbb      	ittet	lt
 80198fa:	425b      	neglt	r3, r3
 80198fc:	f042 0202 	orrlt.w	r2, r2, #2
 8019900:	9307      	strge	r3, [sp, #28]
 8019902:	9307      	strlt	r3, [sp, #28]
 8019904:	bfb8      	it	lt
 8019906:	9204      	strlt	r2, [sp, #16]
 8019908:	7823      	ldrb	r3, [r4, #0]
 801990a:	2b2e      	cmp	r3, #46	; 0x2e
 801990c:	d10c      	bne.n	8019928 <_svfiprintf_r+0x130>
 801990e:	7863      	ldrb	r3, [r4, #1]
 8019910:	2b2a      	cmp	r3, #42	; 0x2a
 8019912:	d135      	bne.n	8019980 <_svfiprintf_r+0x188>
 8019914:	9b03      	ldr	r3, [sp, #12]
 8019916:	1d1a      	adds	r2, r3, #4
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	9203      	str	r2, [sp, #12]
 801991c:	2b00      	cmp	r3, #0
 801991e:	bfb8      	it	lt
 8019920:	f04f 33ff 	movlt.w	r3, #4294967295
 8019924:	3402      	adds	r4, #2
 8019926:	9305      	str	r3, [sp, #20]
 8019928:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80199f4 <_svfiprintf_r+0x1fc>
 801992c:	7821      	ldrb	r1, [r4, #0]
 801992e:	2203      	movs	r2, #3
 8019930:	4650      	mov	r0, sl
 8019932:	f7e6 fc65 	bl	8000200 <memchr>
 8019936:	b140      	cbz	r0, 801994a <_svfiprintf_r+0x152>
 8019938:	2340      	movs	r3, #64	; 0x40
 801993a:	eba0 000a 	sub.w	r0, r0, sl
 801993e:	fa03 f000 	lsl.w	r0, r3, r0
 8019942:	9b04      	ldr	r3, [sp, #16]
 8019944:	4303      	orrs	r3, r0
 8019946:	3401      	adds	r4, #1
 8019948:	9304      	str	r3, [sp, #16]
 801994a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801994e:	4826      	ldr	r0, [pc, #152]	; (80199e8 <_svfiprintf_r+0x1f0>)
 8019950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019954:	2206      	movs	r2, #6
 8019956:	f7e6 fc53 	bl	8000200 <memchr>
 801995a:	2800      	cmp	r0, #0
 801995c:	d038      	beq.n	80199d0 <_svfiprintf_r+0x1d8>
 801995e:	4b23      	ldr	r3, [pc, #140]	; (80199ec <_svfiprintf_r+0x1f4>)
 8019960:	bb1b      	cbnz	r3, 80199aa <_svfiprintf_r+0x1b2>
 8019962:	9b03      	ldr	r3, [sp, #12]
 8019964:	3307      	adds	r3, #7
 8019966:	f023 0307 	bic.w	r3, r3, #7
 801996a:	3308      	adds	r3, #8
 801996c:	9303      	str	r3, [sp, #12]
 801996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019970:	4433      	add	r3, r6
 8019972:	9309      	str	r3, [sp, #36]	; 0x24
 8019974:	e767      	b.n	8019846 <_svfiprintf_r+0x4e>
 8019976:	fb0c 3202 	mla	r2, ip, r2, r3
 801997a:	460c      	mov	r4, r1
 801997c:	2001      	movs	r0, #1
 801997e:	e7a5      	b.n	80198cc <_svfiprintf_r+0xd4>
 8019980:	2300      	movs	r3, #0
 8019982:	3401      	adds	r4, #1
 8019984:	9305      	str	r3, [sp, #20]
 8019986:	4619      	mov	r1, r3
 8019988:	f04f 0c0a 	mov.w	ip, #10
 801998c:	4620      	mov	r0, r4
 801998e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019992:	3a30      	subs	r2, #48	; 0x30
 8019994:	2a09      	cmp	r2, #9
 8019996:	d903      	bls.n	80199a0 <_svfiprintf_r+0x1a8>
 8019998:	2b00      	cmp	r3, #0
 801999a:	d0c5      	beq.n	8019928 <_svfiprintf_r+0x130>
 801999c:	9105      	str	r1, [sp, #20]
 801999e:	e7c3      	b.n	8019928 <_svfiprintf_r+0x130>
 80199a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80199a4:	4604      	mov	r4, r0
 80199a6:	2301      	movs	r3, #1
 80199a8:	e7f0      	b.n	801998c <_svfiprintf_r+0x194>
 80199aa:	ab03      	add	r3, sp, #12
 80199ac:	9300      	str	r3, [sp, #0]
 80199ae:	462a      	mov	r2, r5
 80199b0:	4b0f      	ldr	r3, [pc, #60]	; (80199f0 <_svfiprintf_r+0x1f8>)
 80199b2:	a904      	add	r1, sp, #16
 80199b4:	4638      	mov	r0, r7
 80199b6:	f3af 8000 	nop.w
 80199ba:	1c42      	adds	r2, r0, #1
 80199bc:	4606      	mov	r6, r0
 80199be:	d1d6      	bne.n	801996e <_svfiprintf_r+0x176>
 80199c0:	89ab      	ldrh	r3, [r5, #12]
 80199c2:	065b      	lsls	r3, r3, #25
 80199c4:	f53f af2c 	bmi.w	8019820 <_svfiprintf_r+0x28>
 80199c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199ca:	b01d      	add	sp, #116	; 0x74
 80199cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d0:	ab03      	add	r3, sp, #12
 80199d2:	9300      	str	r3, [sp, #0]
 80199d4:	462a      	mov	r2, r5
 80199d6:	4b06      	ldr	r3, [pc, #24]	; (80199f0 <_svfiprintf_r+0x1f8>)
 80199d8:	a904      	add	r1, sp, #16
 80199da:	4638      	mov	r0, r7
 80199dc:	f000 f87a 	bl	8019ad4 <_printf_i>
 80199e0:	e7eb      	b.n	80199ba <_svfiprintf_r+0x1c2>
 80199e2:	bf00      	nop
 80199e4:	0801ac98 	.word	0x0801ac98
 80199e8:	0801aca2 	.word	0x0801aca2
 80199ec:	00000000 	.word	0x00000000
 80199f0:	08019741 	.word	0x08019741
 80199f4:	0801ac9e 	.word	0x0801ac9e

080199f8 <_printf_common>:
 80199f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199fc:	4616      	mov	r6, r2
 80199fe:	4699      	mov	r9, r3
 8019a00:	688a      	ldr	r2, [r1, #8]
 8019a02:	690b      	ldr	r3, [r1, #16]
 8019a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	bfb8      	it	lt
 8019a0c:	4613      	movlt	r3, r2
 8019a0e:	6033      	str	r3, [r6, #0]
 8019a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019a14:	4607      	mov	r7, r0
 8019a16:	460c      	mov	r4, r1
 8019a18:	b10a      	cbz	r2, 8019a1e <_printf_common+0x26>
 8019a1a:	3301      	adds	r3, #1
 8019a1c:	6033      	str	r3, [r6, #0]
 8019a1e:	6823      	ldr	r3, [r4, #0]
 8019a20:	0699      	lsls	r1, r3, #26
 8019a22:	bf42      	ittt	mi
 8019a24:	6833      	ldrmi	r3, [r6, #0]
 8019a26:	3302      	addmi	r3, #2
 8019a28:	6033      	strmi	r3, [r6, #0]
 8019a2a:	6825      	ldr	r5, [r4, #0]
 8019a2c:	f015 0506 	ands.w	r5, r5, #6
 8019a30:	d106      	bne.n	8019a40 <_printf_common+0x48>
 8019a32:	f104 0a19 	add.w	sl, r4, #25
 8019a36:	68e3      	ldr	r3, [r4, #12]
 8019a38:	6832      	ldr	r2, [r6, #0]
 8019a3a:	1a9b      	subs	r3, r3, r2
 8019a3c:	42ab      	cmp	r3, r5
 8019a3e:	dc26      	bgt.n	8019a8e <_printf_common+0x96>
 8019a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a44:	1e13      	subs	r3, r2, #0
 8019a46:	6822      	ldr	r2, [r4, #0]
 8019a48:	bf18      	it	ne
 8019a4a:	2301      	movne	r3, #1
 8019a4c:	0692      	lsls	r2, r2, #26
 8019a4e:	d42b      	bmi.n	8019aa8 <_printf_common+0xb0>
 8019a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a54:	4649      	mov	r1, r9
 8019a56:	4638      	mov	r0, r7
 8019a58:	47c0      	blx	r8
 8019a5a:	3001      	adds	r0, #1
 8019a5c:	d01e      	beq.n	8019a9c <_printf_common+0xa4>
 8019a5e:	6823      	ldr	r3, [r4, #0]
 8019a60:	68e5      	ldr	r5, [r4, #12]
 8019a62:	6832      	ldr	r2, [r6, #0]
 8019a64:	f003 0306 	and.w	r3, r3, #6
 8019a68:	2b04      	cmp	r3, #4
 8019a6a:	bf08      	it	eq
 8019a6c:	1aad      	subeq	r5, r5, r2
 8019a6e:	68a3      	ldr	r3, [r4, #8]
 8019a70:	6922      	ldr	r2, [r4, #16]
 8019a72:	bf0c      	ite	eq
 8019a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a78:	2500      	movne	r5, #0
 8019a7a:	4293      	cmp	r3, r2
 8019a7c:	bfc4      	itt	gt
 8019a7e:	1a9b      	subgt	r3, r3, r2
 8019a80:	18ed      	addgt	r5, r5, r3
 8019a82:	2600      	movs	r6, #0
 8019a84:	341a      	adds	r4, #26
 8019a86:	42b5      	cmp	r5, r6
 8019a88:	d11a      	bne.n	8019ac0 <_printf_common+0xc8>
 8019a8a:	2000      	movs	r0, #0
 8019a8c:	e008      	b.n	8019aa0 <_printf_common+0xa8>
 8019a8e:	2301      	movs	r3, #1
 8019a90:	4652      	mov	r2, sl
 8019a92:	4649      	mov	r1, r9
 8019a94:	4638      	mov	r0, r7
 8019a96:	47c0      	blx	r8
 8019a98:	3001      	adds	r0, #1
 8019a9a:	d103      	bne.n	8019aa4 <_printf_common+0xac>
 8019a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aa4:	3501      	adds	r5, #1
 8019aa6:	e7c6      	b.n	8019a36 <_printf_common+0x3e>
 8019aa8:	18e1      	adds	r1, r4, r3
 8019aaa:	1c5a      	adds	r2, r3, #1
 8019aac:	2030      	movs	r0, #48	; 0x30
 8019aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019ab2:	4422      	add	r2, r4
 8019ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019abc:	3302      	adds	r3, #2
 8019abe:	e7c7      	b.n	8019a50 <_printf_common+0x58>
 8019ac0:	2301      	movs	r3, #1
 8019ac2:	4622      	mov	r2, r4
 8019ac4:	4649      	mov	r1, r9
 8019ac6:	4638      	mov	r0, r7
 8019ac8:	47c0      	blx	r8
 8019aca:	3001      	adds	r0, #1
 8019acc:	d0e6      	beq.n	8019a9c <_printf_common+0xa4>
 8019ace:	3601      	adds	r6, #1
 8019ad0:	e7d9      	b.n	8019a86 <_printf_common+0x8e>
	...

08019ad4 <_printf_i>:
 8019ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad8:	7e0f      	ldrb	r7, [r1, #24]
 8019ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019adc:	2f78      	cmp	r7, #120	; 0x78
 8019ade:	4691      	mov	r9, r2
 8019ae0:	4680      	mov	r8, r0
 8019ae2:	460c      	mov	r4, r1
 8019ae4:	469a      	mov	sl, r3
 8019ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019aea:	d807      	bhi.n	8019afc <_printf_i+0x28>
 8019aec:	2f62      	cmp	r7, #98	; 0x62
 8019aee:	d80a      	bhi.n	8019b06 <_printf_i+0x32>
 8019af0:	2f00      	cmp	r7, #0
 8019af2:	f000 80d8 	beq.w	8019ca6 <_printf_i+0x1d2>
 8019af6:	2f58      	cmp	r7, #88	; 0x58
 8019af8:	f000 80a3 	beq.w	8019c42 <_printf_i+0x16e>
 8019afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019b04:	e03a      	b.n	8019b7c <_printf_i+0xa8>
 8019b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019b0a:	2b15      	cmp	r3, #21
 8019b0c:	d8f6      	bhi.n	8019afc <_printf_i+0x28>
 8019b0e:	a101      	add	r1, pc, #4	; (adr r1, 8019b14 <_printf_i+0x40>)
 8019b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b14:	08019b6d 	.word	0x08019b6d
 8019b18:	08019b81 	.word	0x08019b81
 8019b1c:	08019afd 	.word	0x08019afd
 8019b20:	08019afd 	.word	0x08019afd
 8019b24:	08019afd 	.word	0x08019afd
 8019b28:	08019afd 	.word	0x08019afd
 8019b2c:	08019b81 	.word	0x08019b81
 8019b30:	08019afd 	.word	0x08019afd
 8019b34:	08019afd 	.word	0x08019afd
 8019b38:	08019afd 	.word	0x08019afd
 8019b3c:	08019afd 	.word	0x08019afd
 8019b40:	08019c8d 	.word	0x08019c8d
 8019b44:	08019bb1 	.word	0x08019bb1
 8019b48:	08019c6f 	.word	0x08019c6f
 8019b4c:	08019afd 	.word	0x08019afd
 8019b50:	08019afd 	.word	0x08019afd
 8019b54:	08019caf 	.word	0x08019caf
 8019b58:	08019afd 	.word	0x08019afd
 8019b5c:	08019bb1 	.word	0x08019bb1
 8019b60:	08019afd 	.word	0x08019afd
 8019b64:	08019afd 	.word	0x08019afd
 8019b68:	08019c77 	.word	0x08019c77
 8019b6c:	682b      	ldr	r3, [r5, #0]
 8019b6e:	1d1a      	adds	r2, r3, #4
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	602a      	str	r2, [r5, #0]
 8019b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	e0a3      	b.n	8019cc8 <_printf_i+0x1f4>
 8019b80:	6820      	ldr	r0, [r4, #0]
 8019b82:	6829      	ldr	r1, [r5, #0]
 8019b84:	0606      	lsls	r6, r0, #24
 8019b86:	f101 0304 	add.w	r3, r1, #4
 8019b8a:	d50a      	bpl.n	8019ba2 <_printf_i+0xce>
 8019b8c:	680e      	ldr	r6, [r1, #0]
 8019b8e:	602b      	str	r3, [r5, #0]
 8019b90:	2e00      	cmp	r6, #0
 8019b92:	da03      	bge.n	8019b9c <_printf_i+0xc8>
 8019b94:	232d      	movs	r3, #45	; 0x2d
 8019b96:	4276      	negs	r6, r6
 8019b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b9c:	485e      	ldr	r0, [pc, #376]	; (8019d18 <_printf_i+0x244>)
 8019b9e:	230a      	movs	r3, #10
 8019ba0:	e019      	b.n	8019bd6 <_printf_i+0x102>
 8019ba2:	680e      	ldr	r6, [r1, #0]
 8019ba4:	602b      	str	r3, [r5, #0]
 8019ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019baa:	bf18      	it	ne
 8019bac:	b236      	sxthne	r6, r6
 8019bae:	e7ef      	b.n	8019b90 <_printf_i+0xbc>
 8019bb0:	682b      	ldr	r3, [r5, #0]
 8019bb2:	6820      	ldr	r0, [r4, #0]
 8019bb4:	1d19      	adds	r1, r3, #4
 8019bb6:	6029      	str	r1, [r5, #0]
 8019bb8:	0601      	lsls	r1, r0, #24
 8019bba:	d501      	bpl.n	8019bc0 <_printf_i+0xec>
 8019bbc:	681e      	ldr	r6, [r3, #0]
 8019bbe:	e002      	b.n	8019bc6 <_printf_i+0xf2>
 8019bc0:	0646      	lsls	r6, r0, #25
 8019bc2:	d5fb      	bpl.n	8019bbc <_printf_i+0xe8>
 8019bc4:	881e      	ldrh	r6, [r3, #0]
 8019bc6:	4854      	ldr	r0, [pc, #336]	; (8019d18 <_printf_i+0x244>)
 8019bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8019bca:	bf0c      	ite	eq
 8019bcc:	2308      	moveq	r3, #8
 8019bce:	230a      	movne	r3, #10
 8019bd0:	2100      	movs	r1, #0
 8019bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019bd6:	6865      	ldr	r5, [r4, #4]
 8019bd8:	60a5      	str	r5, [r4, #8]
 8019bda:	2d00      	cmp	r5, #0
 8019bdc:	bfa2      	ittt	ge
 8019bde:	6821      	ldrge	r1, [r4, #0]
 8019be0:	f021 0104 	bicge.w	r1, r1, #4
 8019be4:	6021      	strge	r1, [r4, #0]
 8019be6:	b90e      	cbnz	r6, 8019bec <_printf_i+0x118>
 8019be8:	2d00      	cmp	r5, #0
 8019bea:	d04d      	beq.n	8019c88 <_printf_i+0x1b4>
 8019bec:	4615      	mov	r5, r2
 8019bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8019bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8019bf6:	5dc7      	ldrb	r7, [r0, r7]
 8019bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019bfc:	4637      	mov	r7, r6
 8019bfe:	42bb      	cmp	r3, r7
 8019c00:	460e      	mov	r6, r1
 8019c02:	d9f4      	bls.n	8019bee <_printf_i+0x11a>
 8019c04:	2b08      	cmp	r3, #8
 8019c06:	d10b      	bne.n	8019c20 <_printf_i+0x14c>
 8019c08:	6823      	ldr	r3, [r4, #0]
 8019c0a:	07de      	lsls	r6, r3, #31
 8019c0c:	d508      	bpl.n	8019c20 <_printf_i+0x14c>
 8019c0e:	6923      	ldr	r3, [r4, #16]
 8019c10:	6861      	ldr	r1, [r4, #4]
 8019c12:	4299      	cmp	r1, r3
 8019c14:	bfde      	ittt	le
 8019c16:	2330      	movle	r3, #48	; 0x30
 8019c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019c20:	1b52      	subs	r2, r2, r5
 8019c22:	6122      	str	r2, [r4, #16]
 8019c24:	f8cd a000 	str.w	sl, [sp]
 8019c28:	464b      	mov	r3, r9
 8019c2a:	aa03      	add	r2, sp, #12
 8019c2c:	4621      	mov	r1, r4
 8019c2e:	4640      	mov	r0, r8
 8019c30:	f7ff fee2 	bl	80199f8 <_printf_common>
 8019c34:	3001      	adds	r0, #1
 8019c36:	d14c      	bne.n	8019cd2 <_printf_i+0x1fe>
 8019c38:	f04f 30ff 	mov.w	r0, #4294967295
 8019c3c:	b004      	add	sp, #16
 8019c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c42:	4835      	ldr	r0, [pc, #212]	; (8019d18 <_printf_i+0x244>)
 8019c44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019c48:	6829      	ldr	r1, [r5, #0]
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019c50:	6029      	str	r1, [r5, #0]
 8019c52:	061d      	lsls	r5, r3, #24
 8019c54:	d514      	bpl.n	8019c80 <_printf_i+0x1ac>
 8019c56:	07df      	lsls	r7, r3, #31
 8019c58:	bf44      	itt	mi
 8019c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8019c5e:	6023      	strmi	r3, [r4, #0]
 8019c60:	b91e      	cbnz	r6, 8019c6a <_printf_i+0x196>
 8019c62:	6823      	ldr	r3, [r4, #0]
 8019c64:	f023 0320 	bic.w	r3, r3, #32
 8019c68:	6023      	str	r3, [r4, #0]
 8019c6a:	2310      	movs	r3, #16
 8019c6c:	e7b0      	b.n	8019bd0 <_printf_i+0xfc>
 8019c6e:	6823      	ldr	r3, [r4, #0]
 8019c70:	f043 0320 	orr.w	r3, r3, #32
 8019c74:	6023      	str	r3, [r4, #0]
 8019c76:	2378      	movs	r3, #120	; 0x78
 8019c78:	4828      	ldr	r0, [pc, #160]	; (8019d1c <_printf_i+0x248>)
 8019c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019c7e:	e7e3      	b.n	8019c48 <_printf_i+0x174>
 8019c80:	0659      	lsls	r1, r3, #25
 8019c82:	bf48      	it	mi
 8019c84:	b2b6      	uxthmi	r6, r6
 8019c86:	e7e6      	b.n	8019c56 <_printf_i+0x182>
 8019c88:	4615      	mov	r5, r2
 8019c8a:	e7bb      	b.n	8019c04 <_printf_i+0x130>
 8019c8c:	682b      	ldr	r3, [r5, #0]
 8019c8e:	6826      	ldr	r6, [r4, #0]
 8019c90:	6961      	ldr	r1, [r4, #20]
 8019c92:	1d18      	adds	r0, r3, #4
 8019c94:	6028      	str	r0, [r5, #0]
 8019c96:	0635      	lsls	r5, r6, #24
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	d501      	bpl.n	8019ca0 <_printf_i+0x1cc>
 8019c9c:	6019      	str	r1, [r3, #0]
 8019c9e:	e002      	b.n	8019ca6 <_printf_i+0x1d2>
 8019ca0:	0670      	lsls	r0, r6, #25
 8019ca2:	d5fb      	bpl.n	8019c9c <_printf_i+0x1c8>
 8019ca4:	8019      	strh	r1, [r3, #0]
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	6123      	str	r3, [r4, #16]
 8019caa:	4615      	mov	r5, r2
 8019cac:	e7ba      	b.n	8019c24 <_printf_i+0x150>
 8019cae:	682b      	ldr	r3, [r5, #0]
 8019cb0:	1d1a      	adds	r2, r3, #4
 8019cb2:	602a      	str	r2, [r5, #0]
 8019cb4:	681d      	ldr	r5, [r3, #0]
 8019cb6:	6862      	ldr	r2, [r4, #4]
 8019cb8:	2100      	movs	r1, #0
 8019cba:	4628      	mov	r0, r5
 8019cbc:	f7e6 faa0 	bl	8000200 <memchr>
 8019cc0:	b108      	cbz	r0, 8019cc6 <_printf_i+0x1f2>
 8019cc2:	1b40      	subs	r0, r0, r5
 8019cc4:	6060      	str	r0, [r4, #4]
 8019cc6:	6863      	ldr	r3, [r4, #4]
 8019cc8:	6123      	str	r3, [r4, #16]
 8019cca:	2300      	movs	r3, #0
 8019ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cd0:	e7a8      	b.n	8019c24 <_printf_i+0x150>
 8019cd2:	6923      	ldr	r3, [r4, #16]
 8019cd4:	462a      	mov	r2, r5
 8019cd6:	4649      	mov	r1, r9
 8019cd8:	4640      	mov	r0, r8
 8019cda:	47d0      	blx	sl
 8019cdc:	3001      	adds	r0, #1
 8019cde:	d0ab      	beq.n	8019c38 <_printf_i+0x164>
 8019ce0:	6823      	ldr	r3, [r4, #0]
 8019ce2:	079b      	lsls	r3, r3, #30
 8019ce4:	d413      	bmi.n	8019d0e <_printf_i+0x23a>
 8019ce6:	68e0      	ldr	r0, [r4, #12]
 8019ce8:	9b03      	ldr	r3, [sp, #12]
 8019cea:	4298      	cmp	r0, r3
 8019cec:	bfb8      	it	lt
 8019cee:	4618      	movlt	r0, r3
 8019cf0:	e7a4      	b.n	8019c3c <_printf_i+0x168>
 8019cf2:	2301      	movs	r3, #1
 8019cf4:	4632      	mov	r2, r6
 8019cf6:	4649      	mov	r1, r9
 8019cf8:	4640      	mov	r0, r8
 8019cfa:	47d0      	blx	sl
 8019cfc:	3001      	adds	r0, #1
 8019cfe:	d09b      	beq.n	8019c38 <_printf_i+0x164>
 8019d00:	3501      	adds	r5, #1
 8019d02:	68e3      	ldr	r3, [r4, #12]
 8019d04:	9903      	ldr	r1, [sp, #12]
 8019d06:	1a5b      	subs	r3, r3, r1
 8019d08:	42ab      	cmp	r3, r5
 8019d0a:	dcf2      	bgt.n	8019cf2 <_printf_i+0x21e>
 8019d0c:	e7eb      	b.n	8019ce6 <_printf_i+0x212>
 8019d0e:	2500      	movs	r5, #0
 8019d10:	f104 0619 	add.w	r6, r4, #25
 8019d14:	e7f5      	b.n	8019d02 <_printf_i+0x22e>
 8019d16:	bf00      	nop
 8019d18:	0801aca9 	.word	0x0801aca9
 8019d1c:	0801acba 	.word	0x0801acba

08019d20 <memmove>:
 8019d20:	4288      	cmp	r0, r1
 8019d22:	b510      	push	{r4, lr}
 8019d24:	eb01 0402 	add.w	r4, r1, r2
 8019d28:	d902      	bls.n	8019d30 <memmove+0x10>
 8019d2a:	4284      	cmp	r4, r0
 8019d2c:	4623      	mov	r3, r4
 8019d2e:	d807      	bhi.n	8019d40 <memmove+0x20>
 8019d30:	1e43      	subs	r3, r0, #1
 8019d32:	42a1      	cmp	r1, r4
 8019d34:	d008      	beq.n	8019d48 <memmove+0x28>
 8019d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d3e:	e7f8      	b.n	8019d32 <memmove+0x12>
 8019d40:	4402      	add	r2, r0
 8019d42:	4601      	mov	r1, r0
 8019d44:	428a      	cmp	r2, r1
 8019d46:	d100      	bne.n	8019d4a <memmove+0x2a>
 8019d48:	bd10      	pop	{r4, pc}
 8019d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d52:	e7f7      	b.n	8019d44 <memmove+0x24>

08019d54 <_free_r>:
 8019d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d56:	2900      	cmp	r1, #0
 8019d58:	d044      	beq.n	8019de4 <_free_r+0x90>
 8019d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d5e:	9001      	str	r0, [sp, #4]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	f1a1 0404 	sub.w	r4, r1, #4
 8019d66:	bfb8      	it	lt
 8019d68:	18e4      	addlt	r4, r4, r3
 8019d6a:	f000 f913 	bl	8019f94 <__malloc_lock>
 8019d6e:	4a1e      	ldr	r2, [pc, #120]	; (8019de8 <_free_r+0x94>)
 8019d70:	9801      	ldr	r0, [sp, #4]
 8019d72:	6813      	ldr	r3, [r2, #0]
 8019d74:	b933      	cbnz	r3, 8019d84 <_free_r+0x30>
 8019d76:	6063      	str	r3, [r4, #4]
 8019d78:	6014      	str	r4, [r2, #0]
 8019d7a:	b003      	add	sp, #12
 8019d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d80:	f000 b90e 	b.w	8019fa0 <__malloc_unlock>
 8019d84:	42a3      	cmp	r3, r4
 8019d86:	d908      	bls.n	8019d9a <_free_r+0x46>
 8019d88:	6825      	ldr	r5, [r4, #0]
 8019d8a:	1961      	adds	r1, r4, r5
 8019d8c:	428b      	cmp	r3, r1
 8019d8e:	bf01      	itttt	eq
 8019d90:	6819      	ldreq	r1, [r3, #0]
 8019d92:	685b      	ldreq	r3, [r3, #4]
 8019d94:	1949      	addeq	r1, r1, r5
 8019d96:	6021      	streq	r1, [r4, #0]
 8019d98:	e7ed      	b.n	8019d76 <_free_r+0x22>
 8019d9a:	461a      	mov	r2, r3
 8019d9c:	685b      	ldr	r3, [r3, #4]
 8019d9e:	b10b      	cbz	r3, 8019da4 <_free_r+0x50>
 8019da0:	42a3      	cmp	r3, r4
 8019da2:	d9fa      	bls.n	8019d9a <_free_r+0x46>
 8019da4:	6811      	ldr	r1, [r2, #0]
 8019da6:	1855      	adds	r5, r2, r1
 8019da8:	42a5      	cmp	r5, r4
 8019daa:	d10b      	bne.n	8019dc4 <_free_r+0x70>
 8019dac:	6824      	ldr	r4, [r4, #0]
 8019dae:	4421      	add	r1, r4
 8019db0:	1854      	adds	r4, r2, r1
 8019db2:	42a3      	cmp	r3, r4
 8019db4:	6011      	str	r1, [r2, #0]
 8019db6:	d1e0      	bne.n	8019d7a <_free_r+0x26>
 8019db8:	681c      	ldr	r4, [r3, #0]
 8019dba:	685b      	ldr	r3, [r3, #4]
 8019dbc:	6053      	str	r3, [r2, #4]
 8019dbe:	4421      	add	r1, r4
 8019dc0:	6011      	str	r1, [r2, #0]
 8019dc2:	e7da      	b.n	8019d7a <_free_r+0x26>
 8019dc4:	d902      	bls.n	8019dcc <_free_r+0x78>
 8019dc6:	230c      	movs	r3, #12
 8019dc8:	6003      	str	r3, [r0, #0]
 8019dca:	e7d6      	b.n	8019d7a <_free_r+0x26>
 8019dcc:	6825      	ldr	r5, [r4, #0]
 8019dce:	1961      	adds	r1, r4, r5
 8019dd0:	428b      	cmp	r3, r1
 8019dd2:	bf04      	itt	eq
 8019dd4:	6819      	ldreq	r1, [r3, #0]
 8019dd6:	685b      	ldreq	r3, [r3, #4]
 8019dd8:	6063      	str	r3, [r4, #4]
 8019dda:	bf04      	itt	eq
 8019ddc:	1949      	addeq	r1, r1, r5
 8019dde:	6021      	streq	r1, [r4, #0]
 8019de0:	6054      	str	r4, [r2, #4]
 8019de2:	e7ca      	b.n	8019d7a <_free_r+0x26>
 8019de4:	b003      	add	sp, #12
 8019de6:	bd30      	pop	{r4, r5, pc}
 8019de8:	2003d01c 	.word	0x2003d01c

08019dec <sbrk_aligned>:
 8019dec:	b570      	push	{r4, r5, r6, lr}
 8019dee:	4e0e      	ldr	r6, [pc, #56]	; (8019e28 <sbrk_aligned+0x3c>)
 8019df0:	460c      	mov	r4, r1
 8019df2:	6831      	ldr	r1, [r6, #0]
 8019df4:	4605      	mov	r5, r0
 8019df6:	b911      	cbnz	r1, 8019dfe <sbrk_aligned+0x12>
 8019df8:	f000 f8bc 	bl	8019f74 <_sbrk_r>
 8019dfc:	6030      	str	r0, [r6, #0]
 8019dfe:	4621      	mov	r1, r4
 8019e00:	4628      	mov	r0, r5
 8019e02:	f000 f8b7 	bl	8019f74 <_sbrk_r>
 8019e06:	1c43      	adds	r3, r0, #1
 8019e08:	d00a      	beq.n	8019e20 <sbrk_aligned+0x34>
 8019e0a:	1cc4      	adds	r4, r0, #3
 8019e0c:	f024 0403 	bic.w	r4, r4, #3
 8019e10:	42a0      	cmp	r0, r4
 8019e12:	d007      	beq.n	8019e24 <sbrk_aligned+0x38>
 8019e14:	1a21      	subs	r1, r4, r0
 8019e16:	4628      	mov	r0, r5
 8019e18:	f000 f8ac 	bl	8019f74 <_sbrk_r>
 8019e1c:	3001      	adds	r0, #1
 8019e1e:	d101      	bne.n	8019e24 <sbrk_aligned+0x38>
 8019e20:	f04f 34ff 	mov.w	r4, #4294967295
 8019e24:	4620      	mov	r0, r4
 8019e26:	bd70      	pop	{r4, r5, r6, pc}
 8019e28:	2003d020 	.word	0x2003d020

08019e2c <_malloc_r>:
 8019e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e30:	1ccd      	adds	r5, r1, #3
 8019e32:	f025 0503 	bic.w	r5, r5, #3
 8019e36:	3508      	adds	r5, #8
 8019e38:	2d0c      	cmp	r5, #12
 8019e3a:	bf38      	it	cc
 8019e3c:	250c      	movcc	r5, #12
 8019e3e:	2d00      	cmp	r5, #0
 8019e40:	4607      	mov	r7, r0
 8019e42:	db01      	blt.n	8019e48 <_malloc_r+0x1c>
 8019e44:	42a9      	cmp	r1, r5
 8019e46:	d905      	bls.n	8019e54 <_malloc_r+0x28>
 8019e48:	230c      	movs	r3, #12
 8019e4a:	603b      	str	r3, [r7, #0]
 8019e4c:	2600      	movs	r6, #0
 8019e4e:	4630      	mov	r0, r6
 8019e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e54:	4e2e      	ldr	r6, [pc, #184]	; (8019f10 <_malloc_r+0xe4>)
 8019e56:	f000 f89d 	bl	8019f94 <__malloc_lock>
 8019e5a:	6833      	ldr	r3, [r6, #0]
 8019e5c:	461c      	mov	r4, r3
 8019e5e:	bb34      	cbnz	r4, 8019eae <_malloc_r+0x82>
 8019e60:	4629      	mov	r1, r5
 8019e62:	4638      	mov	r0, r7
 8019e64:	f7ff ffc2 	bl	8019dec <sbrk_aligned>
 8019e68:	1c43      	adds	r3, r0, #1
 8019e6a:	4604      	mov	r4, r0
 8019e6c:	d14d      	bne.n	8019f0a <_malloc_r+0xde>
 8019e6e:	6834      	ldr	r4, [r6, #0]
 8019e70:	4626      	mov	r6, r4
 8019e72:	2e00      	cmp	r6, #0
 8019e74:	d140      	bne.n	8019ef8 <_malloc_r+0xcc>
 8019e76:	6823      	ldr	r3, [r4, #0]
 8019e78:	4631      	mov	r1, r6
 8019e7a:	4638      	mov	r0, r7
 8019e7c:	eb04 0803 	add.w	r8, r4, r3
 8019e80:	f000 f878 	bl	8019f74 <_sbrk_r>
 8019e84:	4580      	cmp	r8, r0
 8019e86:	d13a      	bne.n	8019efe <_malloc_r+0xd2>
 8019e88:	6821      	ldr	r1, [r4, #0]
 8019e8a:	3503      	adds	r5, #3
 8019e8c:	1a6d      	subs	r5, r5, r1
 8019e8e:	f025 0503 	bic.w	r5, r5, #3
 8019e92:	3508      	adds	r5, #8
 8019e94:	2d0c      	cmp	r5, #12
 8019e96:	bf38      	it	cc
 8019e98:	250c      	movcc	r5, #12
 8019e9a:	4629      	mov	r1, r5
 8019e9c:	4638      	mov	r0, r7
 8019e9e:	f7ff ffa5 	bl	8019dec <sbrk_aligned>
 8019ea2:	3001      	adds	r0, #1
 8019ea4:	d02b      	beq.n	8019efe <_malloc_r+0xd2>
 8019ea6:	6823      	ldr	r3, [r4, #0]
 8019ea8:	442b      	add	r3, r5
 8019eaa:	6023      	str	r3, [r4, #0]
 8019eac:	e00e      	b.n	8019ecc <_malloc_r+0xa0>
 8019eae:	6822      	ldr	r2, [r4, #0]
 8019eb0:	1b52      	subs	r2, r2, r5
 8019eb2:	d41e      	bmi.n	8019ef2 <_malloc_r+0xc6>
 8019eb4:	2a0b      	cmp	r2, #11
 8019eb6:	d916      	bls.n	8019ee6 <_malloc_r+0xba>
 8019eb8:	1961      	adds	r1, r4, r5
 8019eba:	42a3      	cmp	r3, r4
 8019ebc:	6025      	str	r5, [r4, #0]
 8019ebe:	bf18      	it	ne
 8019ec0:	6059      	strne	r1, [r3, #4]
 8019ec2:	6863      	ldr	r3, [r4, #4]
 8019ec4:	bf08      	it	eq
 8019ec6:	6031      	streq	r1, [r6, #0]
 8019ec8:	5162      	str	r2, [r4, r5]
 8019eca:	604b      	str	r3, [r1, #4]
 8019ecc:	4638      	mov	r0, r7
 8019ece:	f104 060b 	add.w	r6, r4, #11
 8019ed2:	f000 f865 	bl	8019fa0 <__malloc_unlock>
 8019ed6:	f026 0607 	bic.w	r6, r6, #7
 8019eda:	1d23      	adds	r3, r4, #4
 8019edc:	1af2      	subs	r2, r6, r3
 8019ede:	d0b6      	beq.n	8019e4e <_malloc_r+0x22>
 8019ee0:	1b9b      	subs	r3, r3, r6
 8019ee2:	50a3      	str	r3, [r4, r2]
 8019ee4:	e7b3      	b.n	8019e4e <_malloc_r+0x22>
 8019ee6:	6862      	ldr	r2, [r4, #4]
 8019ee8:	42a3      	cmp	r3, r4
 8019eea:	bf0c      	ite	eq
 8019eec:	6032      	streq	r2, [r6, #0]
 8019eee:	605a      	strne	r2, [r3, #4]
 8019ef0:	e7ec      	b.n	8019ecc <_malloc_r+0xa0>
 8019ef2:	4623      	mov	r3, r4
 8019ef4:	6864      	ldr	r4, [r4, #4]
 8019ef6:	e7b2      	b.n	8019e5e <_malloc_r+0x32>
 8019ef8:	4634      	mov	r4, r6
 8019efa:	6876      	ldr	r6, [r6, #4]
 8019efc:	e7b9      	b.n	8019e72 <_malloc_r+0x46>
 8019efe:	230c      	movs	r3, #12
 8019f00:	603b      	str	r3, [r7, #0]
 8019f02:	4638      	mov	r0, r7
 8019f04:	f000 f84c 	bl	8019fa0 <__malloc_unlock>
 8019f08:	e7a1      	b.n	8019e4e <_malloc_r+0x22>
 8019f0a:	6025      	str	r5, [r4, #0]
 8019f0c:	e7de      	b.n	8019ecc <_malloc_r+0xa0>
 8019f0e:	bf00      	nop
 8019f10:	2003d01c 	.word	0x2003d01c

08019f14 <_realloc_r>:
 8019f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f18:	4680      	mov	r8, r0
 8019f1a:	4614      	mov	r4, r2
 8019f1c:	460e      	mov	r6, r1
 8019f1e:	b921      	cbnz	r1, 8019f2a <_realloc_r+0x16>
 8019f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f24:	4611      	mov	r1, r2
 8019f26:	f7ff bf81 	b.w	8019e2c <_malloc_r>
 8019f2a:	b92a      	cbnz	r2, 8019f38 <_realloc_r+0x24>
 8019f2c:	f7ff ff12 	bl	8019d54 <_free_r>
 8019f30:	4625      	mov	r5, r4
 8019f32:	4628      	mov	r0, r5
 8019f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f38:	f000 f838 	bl	8019fac <_malloc_usable_size_r>
 8019f3c:	4284      	cmp	r4, r0
 8019f3e:	4607      	mov	r7, r0
 8019f40:	d802      	bhi.n	8019f48 <_realloc_r+0x34>
 8019f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019f46:	d812      	bhi.n	8019f6e <_realloc_r+0x5a>
 8019f48:	4621      	mov	r1, r4
 8019f4a:	4640      	mov	r0, r8
 8019f4c:	f7ff ff6e 	bl	8019e2c <_malloc_r>
 8019f50:	4605      	mov	r5, r0
 8019f52:	2800      	cmp	r0, #0
 8019f54:	d0ed      	beq.n	8019f32 <_realloc_r+0x1e>
 8019f56:	42bc      	cmp	r4, r7
 8019f58:	4622      	mov	r2, r4
 8019f5a:	4631      	mov	r1, r6
 8019f5c:	bf28      	it	cs
 8019f5e:	463a      	movcs	r2, r7
 8019f60:	f7ff fb82 	bl	8019668 <memcpy>
 8019f64:	4631      	mov	r1, r6
 8019f66:	4640      	mov	r0, r8
 8019f68:	f7ff fef4 	bl	8019d54 <_free_r>
 8019f6c:	e7e1      	b.n	8019f32 <_realloc_r+0x1e>
 8019f6e:	4635      	mov	r5, r6
 8019f70:	e7df      	b.n	8019f32 <_realloc_r+0x1e>
	...

08019f74 <_sbrk_r>:
 8019f74:	b538      	push	{r3, r4, r5, lr}
 8019f76:	4d06      	ldr	r5, [pc, #24]	; (8019f90 <_sbrk_r+0x1c>)
 8019f78:	2300      	movs	r3, #0
 8019f7a:	4604      	mov	r4, r0
 8019f7c:	4608      	mov	r0, r1
 8019f7e:	602b      	str	r3, [r5, #0]
 8019f80:	f7fc f98e 	bl	80162a0 <_sbrk>
 8019f84:	1c43      	adds	r3, r0, #1
 8019f86:	d102      	bne.n	8019f8e <_sbrk_r+0x1a>
 8019f88:	682b      	ldr	r3, [r5, #0]
 8019f8a:	b103      	cbz	r3, 8019f8e <_sbrk_r+0x1a>
 8019f8c:	6023      	str	r3, [r4, #0]
 8019f8e:	bd38      	pop	{r3, r4, r5, pc}
 8019f90:	2003d024 	.word	0x2003d024

08019f94 <__malloc_lock>:
 8019f94:	4801      	ldr	r0, [pc, #4]	; (8019f9c <__malloc_lock+0x8>)
 8019f96:	f000 b811 	b.w	8019fbc <__retarget_lock_acquire_recursive>
 8019f9a:	bf00      	nop
 8019f9c:	2003d028 	.word	0x2003d028

08019fa0 <__malloc_unlock>:
 8019fa0:	4801      	ldr	r0, [pc, #4]	; (8019fa8 <__malloc_unlock+0x8>)
 8019fa2:	f000 b80c 	b.w	8019fbe <__retarget_lock_release_recursive>
 8019fa6:	bf00      	nop
 8019fa8:	2003d028 	.word	0x2003d028

08019fac <_malloc_usable_size_r>:
 8019fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019fb0:	1f18      	subs	r0, r3, #4
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	bfbc      	itt	lt
 8019fb6:	580b      	ldrlt	r3, [r1, r0]
 8019fb8:	18c0      	addlt	r0, r0, r3
 8019fba:	4770      	bx	lr

08019fbc <__retarget_lock_acquire_recursive>:
 8019fbc:	4770      	bx	lr

08019fbe <__retarget_lock_release_recursive>:
 8019fbe:	4770      	bx	lr

08019fc0 <_init>:
 8019fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc2:	bf00      	nop
 8019fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fc6:	bc08      	pop	{r3}
 8019fc8:	469e      	mov	lr, r3
 8019fca:	4770      	bx	lr

08019fcc <_fini>:
 8019fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fce:	bf00      	nop
 8019fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fd2:	bc08      	pop	{r3}
 8019fd4:	469e      	mov	lr, r3
 8019fd6:	4770      	bx	lr
